{"/home/travis/build/npmtest/node-npmtest-bearcat/test.js":"/* istanbul instrument in package npmtest_bearcat */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-bearcat/lib.npmtest_bearcat.js":"/* istanbul instrument in package npmtest_bearcat */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_bearcat = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_bearcat = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-bearcat/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-bearcat && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_bearcat */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_bearcat\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_bearcat.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_bearcat.rollup.js'] =\n            local.assetsDict['/assets.npmtest_bearcat.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_bearcat.__dirname +\n                    '/lib.npmtest_bearcat.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/index.js":"require('./lib/util/requireUtil');\n\nmodule.exports = require('./lib/bearcat');","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/util/requireUtil.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat RequireUtils\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>\n * MIT Licensed\n */\n\nvar ShimBuiltins = require('../../shim/builtins');\nvar RequireUtils = {};\n\nvar Root;\n(function() {\n\tRoot = this;\n}());\n\nif (!Root.process) {\n\tRoot.process = ShimBuiltins.process;\n}\n\n/**\n * RequireUtils require os shim.\n *\n * @api public\n */\nRequireUtils.requireOs = function() {\n\tvar os = require('os');\n\tif (os) {\n\t\treturn os;\n\t} else {\n\t\treturn ShimBuiltins.os;\n\t}\n}\n\n/**\n * RequireUtils require path shim.\n *\n * @api public\n */\nRequireUtils.requirePath = function() {\n\tvar path = require('path');\n\tif (path) {\n\t\treturn path;\n\t} else {\n\t\treturn ShimBuiltins.path;\n\t}\n}\n\n/**\n * RequireUtils require util shim.\n *\n * @api public\n */\nRequireUtils.requireUtil = function() {\n\tvar util = require('util');\n\tif (util) {\n\t\treturn util;\n\t} else {\n\t\treturn ShimBuiltins.util;\n\t}\n}\n\nmodule.exports = RequireUtils;","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/shim/builtins.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat builtins.js\n * Copyright(c) 2014 fantasyni <fantasyni@163.com>\n * MIT Licensed\n */\n\nexports.process = require('./modules/process');\nexports.path = require('./modules/path');\nexports.util = require('./modules/util');\nexports.os = require('./modules/os');\nrequire('./object');","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/shim/modules/process.js":"// shim for using process in browser\n\nvar process = module.exports = {};\n\nprocess.nextTick = (function() {\n    var canSetImmediate = typeof window !== 'undefined' && window.setImmediate;\n    var canMutationObserver = typeof window !== 'undefined' && window.MutationObserver;\n    var canPost = typeof window !== 'undefined' && window.postMessage && window.addEventListener;\n\n    if (canSetImmediate) {\n        return function(f) {\n            return window.setImmediate(f)\n        };\n    }\n\n    var queue = [];\n\n    if (canMutationObserver) {\n        var hiddenDiv = document.createElement(\"div\");\n        var observer = new MutationObserver(function() {\n            var queueList = queue.slice();\n            queue.length = 0;\n            queueList.forEach(function(fn) {\n                fn();\n            });\n        });\n\n        observer.observe(hiddenDiv, {\n            attributes: true\n        });\n\n        return function nextTick(fn) {\n            if (!queue.length) {\n                hiddenDiv.setAttribute('yes', 'no');\n            }\n            queue.push(fn);\n        };\n    }\n\n    if (canPost) {\n        window.addEventListener('message', function(ev) {\n            var source = ev.source;\n            if ((source === window || source === null) && ev.data === 'process-tick') {\n                ev.stopPropagation();\n                if (queue.length > 0) {\n                    var fn = queue.shift();\n                    fn();\n                }\n            }\n        }, true);\n\n        return function nextTick(fn) {\n            queue.push(fn);\n            window.postMessage('process-tick', '*');\n        };\n    }\n\n    return function nextTick(fn) {\n        setTimeout(fn, 0);\n    };\n})();\n\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function(name) {\n    throw new Error('process.binding is not supported');\n};\n\n// TODO(shtylman)\nprocess.cwd = function() {\n    return '/'\n};\nprocess.chdir = function(dir) {\n    throw new Error('process.chdir is not supported');\n};","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/shim/modules/path.js":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n  /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n    resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n    trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n    root = result[0],\n    dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter(xs, f) {\n  if (xs.filter) return xs.filter(f);\n  var res = [];\n  for (var i = 0; i < xs.length; i++) {\n    if (f(xs[i], i, xs)) res.push(xs[i]);\n  }\n  return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b' ? function(str, start, len) {\n  return str.substr(start, len)\n} : function(str, start, len) {\n  if (start < 0) start = str.length + start;\n  return str.substr(start, len);\n};","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/shim/modules/util.js":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s':\n        return String(args[i++]);\n      case '%d':\n        return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold': [1, 22],\n  'italic': [3, 23],\n  'underline': [4, 24],\n  'inverse': [7, 27],\n  'white': [37, 39],\n  'grey': [90, 39],\n  'black': [30, 39],\n  'blue': [34, 39],\n  'cyan': [36, 39],\n  'green': [32, 39],\n  'magenta': [35, 39],\n  'red': [31, 39],\n  'yellow': [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n      '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n    value &&\n    isFunction(value.inspect) &&\n    // Filter out the util module, it's inspect function is special\n    value.inspect !== exports.inspect &&\n    // Also filter out any prototype objects using the circular check.\n    !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '',\n    array = false,\n    braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n      .replace(/'/g, \"\\\\'\")\n      .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n        String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n        key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || {\n    value: value[key]\n  };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n        .replace(/\\\\\"/g, '\"')\n        .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n      (base === '' ? '' : base + '\\n ') +\n      ' ' +\n      output.join(',\\n  ') +\n      ' ' +\n      braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n    (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n    typeof arg === 'boolean' ||\n    typeof arg === 'number' ||\n    typeof arg === 'string' ||\n    typeof arg === 'symbol' || // ES6 symbol\n    typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n  'Oct', 'Nov', 'Dec'\n];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n    pad(d.getMinutes()),\n    pad(d.getSeconds())\n  ].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('./support/inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/shim/modules/support/isBuffer.js":"module.exports = function isBuffer(arg) {\n\treturn arg && typeof arg === 'object' && typeof arg.copy === 'function' && typeof arg.fill === 'function' && typeof arg.readUInt8 === 'function';\n}","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/shim/modules/support/inherits.js":"if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function() {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/shim/modules/os.js":"exports.endianness = function() {\n    return 'LE'\n};\n\nexports.hostname = function() {\n    if (typeof location !== 'undefined') {\n        return location.hostname\n    } else return '';\n};\n\nexports.loadavg = function() {\n    return []\n};\n\nexports.uptime = function() {\n    return 0\n};\n\nexports.freemem = function() {\n    return Number.MAX_VALUE;\n};\n\nexports.totalmem = function() {\n    return Number.MAX_VALUE;\n};\n\nexports.cpus = function() {\n    return []\n};\n\nexports.type = function() {\n    return 'Browser'\n};\n\nexports.release = function() {\n    if (typeof navigator !== 'undefined') {\n        return navigator.appVersion;\n    }\n    return '';\n};\n\nexports.networkInterfaces = exports.getNetworkInterfaces = function() {\n    return {}\n};\n\nexports.arch = function() {\n    return 'javascript'\n};\n\nexports.platform = function() {\n    return 'browser'\n};\n\nexports.tmpdir = exports.tmpDir = function() {\n    return '/tmp';\n};\n\nexports.EOL = '\\n';","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/shim/object.js":"if (typeof Object.create != 'function') {\n  Object.create = (function() {\n    var Object = function() {};\n    return function(prototype) {\n      if (arguments.length > 1) {\n        // throw Error('Second argument not supported');\n      }\n      if (typeof prototype != 'object') {\n        throw TypeError('Argument must be an object');\n      }\n      Object.prototype = prototype;\n      var result = new Object();\n      Object.prototype = null;\n      return result;\n    };\n  })();\n}\n\nif (typeof String.prototype.trim != 'function') {\n  if (!String.prototype.trim) {\n    (function() {\n      // Make sure we trim BOM and NBSP\n      var rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n      String.prototype.trim = function() {\n        return this.replace(rtrim, '');\n      };\n    })();\n  }\n}","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/bearcat.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat App\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>\n * MIT Licensed\n */\n\nvar logger = require('pomelo-logger').getLogger('bearcat', 'app');\nvar ApplicationContext = require('./context/applicationContext');\nvar EventEmitter = require('events').EventEmitter;\nvar BeanFactory = require('./beans/beanFactory');\nvar Package = require('../package.json');\nvar Utils = require('./util/utils');\n\nvar Root;\n(function() {\n\tRoot = this;\n}());\n\n/*!\n * Application states\n */\nvar STATE_NEW = 1; // app new\nvar STATE_INITED = 2; // app has inited\nvar STATE_START = 3; // app start\nvar STATE_STARTED = 4; // app has started\n\n/**\n * Bearcat app object.\n * @api public\n */\nvar Bearcat = {\n\topts: null,\n\tconfigLocations: null,\n\tapplicationContext: null,\n\tstate: STATE_NEW,\n\tstartTime: null,\n\tversion: Package.version\n};\n\nBearcat['__proto__'] = EventEmitter.prototype;\n\n/**\n * Bearcat createApp constructor function.\n *\n * @param  {Array}  configLocations context path array\n * @param  {Object} opts\n * @param  {String} opts.NODE_ENV                    setup env\n * @param  {String} opts.BEARCAT_ENV                 setup env\n * @param  {String} opts.NODE_CPATH                  setup config path\n * @param  {String} opts.BEARCAT_CPATH               setup config path\n * @param  {String} opts.BEARCAT_HPATH               setup hot reload path(s), usually it is the scan source directory(app by default)\n * @param  {String} opts.BEARCAT_LOGGER              setup 'off' to turn off bearcat logger configuration\n * @param  {String} opts.BEARCAT_HOT                 setup 'on' to turn on bearcat hot code reload\n * @param  {String} opts.BEARCAT_ANNOTATION          setup 'off' to turn off bearcat $ based annotation\n * @param  {String} opts.BEARCAT_GLOBAL  \t         setup bearcat to be global object\n * @param  {String} opts.BEARCAT_FUNCTION_STRING  \t setup bearcat to use func.toString for $ based annotation\n *\n * @return {Object} bearcat object\n * @api public\n */\nBearcat.createApp = function(configLocations, opts) {\n\tif (this.state >= STATE_INITED) {\n\t\tBearcat.stop();\n\t}\n\n\tif (!Utils.checkArray(configLocations) && Utils.checkObject(configLocations)) {\n\t\topts = configLocations;\n\t\tconfigLocations = [];\n\t}\n\n\tthis.opts = opts || {};\n\tthis.configLocations = configLocations || [];\n\n\tif (this.opts['BEARCAT_GLOBAL']) {\n\t\tRoot.bearcat = Bearcat;\n\t}\n\n\tif (!Utils.checkObject(this.opts)) {\n\t\tlogger.warn('Bearcat createApp opts must be object...');\n\t}\n\n\tthis.applicationContext = new ApplicationContext(this.configLocations, this.opts);\n\n\tthis.state = STATE_INITED;\n\treturn Bearcat;\n}\n\n/**\n * Bearcat start app.\n *\n * @param  {Function} cb start callback function\n * @api public\n */\nBearcat.start = function(cb) {\n\tif (!Utils.checkFunction(cb)) {\n\t\tcb = function() {}\n\t}\n\n\tif (this.state > STATE_INITED) {\n\t\tlogger.warn('Bearcat has already start, run bearcat.stop to start again.');\n\t\treturn cb();\n\t}\n\n\tif (this.state < STATE_INITED) {\n\t\tlogger.warn('Bearcat does not inited, run bearcat.createApp to init.');\n\t\treturn cb();\n\t}\n\n\tthis.state = STATE_START;\n\tthis.startTime = Date.now();\n\tvar self = this;\n\n\tvar env = \"\";\n\n\tif (Utils.checkBrowser()) {\n\t\tenv = 'browser';\n\t\tthis.applicationContext.setEnv(env);\n\t}\n\n\tif (Utils.checkCocos2dJsb()) {\n\t\tenv = 'cocos2djsb';\n\t\tthis.applicationContext.setEnv(env);\n\t}\n\n\tthis.applicationContext.on('finishRefresh', function() {\n\t\tself.state = STATE_STARTED;\n\t\tenv = self.applicationContext.getEnv();\n\t\tlogger.info('Bearcat startup in %s with %s ms', env, Date.now() - self.startTime);\n\t\tcb();\n\t});\n\n\tthis.applicationContext.on('reload', function() {\n\t\tself.emit('reload');\n\t});\n\n\tthis.applicationContext.refresh();\n}\n\n/**\n * Bearcat stop app.\n * it will stop internal applicationContext, destroy all singletonBeans\n *\n * @api public\n */\nBearcat.stop = function() {\n\tif (this.applicationContext) {\n\t\tthis.applicationContext.destroy();\n\t}\n\tthis.applicationContext = null;\n\tthis.configLocations = null;\n\tthis.startTime = null;\n\tthis.state = STATE_NEW;\n}\n\n/**\n * Bearcat get beanFactory instance.\n *\n * @return  {Object} beanFactory instance\n * @api public\n */\nBearcat.getBeanFactory = function() {\n\tif (this.state <= STATE_INITED) {\n\t\tlogger.warn('Bearcat application is not running now for %s', \"getBeanFactory\");\n\t\treturn;\n\t}\n\n\treturn this.applicationContext.getBeanFactory();\n}\n\n/**\n * Bearcat get applicationContext.\n *\n * @return  {Object} applicationContext\n * @api public\n */\nBearcat.getApplicationContext = function() {\n\tif (this.state <= STATE_INITED) {\n\t\tlogger.warn('Bearcat application is not running now for %s', \"getApplicationContext\");\n\t\treturn;\n\t}\n\n\treturn this.applicationContext;\n}\n\n/**\n * Bearcat get bean from IoC container through meta argument.\n *\n * Examples:\n *\n *\t  bearcat.getBeanByMeta({\n *\t\t id: \"car\",\n *\t\t func: Car // Car is a function constructor\n *\t  });\n *\n * @param  {Object} meta meta object\n * @api public\n */\nBearcat.getBeanByMeta = function(meta) {\n\tif (this.state <= STATE_INITED) {\n\t\tlogger.warn('Bearcat application is not running now for %s %j', \"getBeanByMeta\", meta);\n\t\treturn;\n\t}\n\n\treturn this.applicationContext.getBeanByMeta(meta);\n}\n\n/**\n * Bearcat get bean from IoC container through $ annotation function.\n *\n * Examples:\n *\n *\t  bearcat.getBeanByFunc(function() {\n *\t\t this.$id = \"car\";\n *\t\t this.$scope = \"prototype\";\n *\t  });\n *\n * @param  {Function} func $ annotation function\n * @api public\n */\nBearcat.getBeanByFunc = function(func) {\n\tif (this.state <= STATE_INITED) {\n\t\tlogger.warn('Bearcat application is not running now for %s', \"getBeanByFunc\");\n\t\treturn;\n\t}\n\n\treturn this.applicationContext.getBeanByFunc(func);\n}\n\n/**\n * Bearcat add async loading beans, this just add beans needed to be loaded to bearcat.\n *\n * Examples:\n *\n *\t  bearcat.use(['car']);\n *\t  bearcat.use('car');\n *\n * @param  {Array|String} async loading beans id\n * @api public\n */\nBearcat.use = function(ids) {\n\tif (Utils.checkArray(ids)) {\n\t\treturn this.applicationContext.use(ids);\n\t}\n\n\tif (Utils.checkString(ids)) {\n\t\treturn this.applicationContext.use([ids]);\n\t}\n}\n\n/**\n * Bearcat async loading beans.\n *\n * Examples:\n *\n *\t  bearcat.async(['car'], function(car) {\n *\t\t  // car is ready\n *\t  });\n *\n * @param  {Array|String} async loading beans id\n * @return {Function}     callback with loaded bean instances\n * @api public\n */\nBearcat.async = function(ids, cb) {\n\tif (Utils.checkArray(ids)) {\n\t\treturn this.applicationContext.async(ids, cb);\n\t}\n\n\tif (Utils.checkString(ids)) {\n\t\treturn this.applicationContext.async([ids], cb);\n\t}\n}\n\n/**\n * Bearcat add module(bean) to IoC container through $ annotation function.\n *\n * Examples:\n *\n *\t  bearcat.module(function() {\n *\t\t this.$id = \"car\";\n *\t\t this.$scope = \"prototype\";\n *\t  });\n *\n * @param  {Function} func $ annotation function\n * @api public\n */\nBearcat.module = function(func, context) {\n\tif (this.state < STATE_STARTED) {\n\t\treturn this.applicationContext.module(func, context);\n\t} else {\n\t\treturn this.getBean(func);\n\t}\n}\n\n/**\n * Bearcat define module(bean).\n *\n * Examples:\n *\n *    bearcat.define('car', function(exports, module) {\n *\t     module.exports = function() {\n *\t         console.log('run car...')\n *       }\n *    }, typeof module !== 'undefined' ? module : {});\n *\n * @param  {String}   id\n * @param  {Function} factory function\n * @param  {object}   context object\n * @api public\n */\nBearcat.define = function(id, factory, context) {\n\treturn this.applicationContext.define(id, factory, context);\n}\n\n/**\n * Bearcat add module(bean) to IoC container through $ annotation function.\n *\n * Examples:\n *\n *\t  var Car = bearcat.require('car');\n *\n * @param  {String} id\n * @api public\n */\nBearcat.require = function(id) {\n\treturn this.applicationContext.require(id);\n}\n\n/**\n * Bearcat get bean from IoC container through beanName or meta argument.\n *\n * Examples:\n *\n *\n *\t  // through beanName\n *\t  var car = bearcat.getBean(\"car\");\n *\n *\t  // through meta\n *\t  var car = bearcat.getBean({\n *\t\t id: \"car\",\n *\t\t func: Car // Car is a function constructor\n *\t  });\n *\n *\t  // through $ annotation func\n *\t  var car = bearcat.getBean(function() {\n *\t\t this.$id = \"car\";\n *\t\t this.$scope = \"prototype\";\n *\t  });\n *\n * @param  {String} beanName\n * @return {Object} bean\n * @api public\n */\nBearcat.getBean = function(beanName) {\n\tif (this.state <= STATE_INITED) {\n\t\tlogger.warn('Bearcat application is not running now for %s %s state: %d', \"getBean\", beanName, this.state);\n\t\treturn;\n\t}\n\n\tvar firstarg = beanName;\n\tvar func = \"\";\n\tif (Utils.checkObject(firstarg)) {\n\t\tfunc = \"getBeanByMeta\";\n\t} else if (Utils.checkFunction(firstarg)) {\n\t\tfunc = \"getBeanByFunc\";\n\t} else if (Utils.checkString(firstarg)) {\n\t\tfunc = \"getBean\";\n\t} else {\n\t\tlogger.error('Bearcat application unsupported getBean arguments for %s', beanName);\n\t\treturn;\n\t}\n\n\treturn this.applicationContext[func].apply(this.applicationContext, arguments);\n}\n\n/**\n * Bearcat get bean constructor function from IoC container through beanName.\n *\n * Examples:\n *\n *\n *\t  // through beanName\n *\t  var Car = bearcat.getFunction(\"car\");\n *\n *\n * @param  {String}   beanName\n * @return {Function} bean constructor function\n * @api public\n */\nBearcat.getFunction = function(beanName) {\n\tif (this.state <= STATE_INITED) {\n\t\tlogger.warn('Bearcat application is not running now for %s %s state: %d', \"getFunction\", beanName, this.state);\n\t\treturn;\n\t}\n\n\treturn this.applicationContext.getBeanFunction(beanName);\n}\n\n/**\n * Bearcat get bean constructor function from IoC container through beanName, the same as bearcat.getFunction.\n *\n * Examples:\n *\n *\n *\t  // through beanName\n *\t  var Car = bearcat.getClass(\"car\");\n *\n *\n * @param  {String}   beanName\n * @return {Function} bean constructor function\n * @api public\n */\nBearcat.getClass = function(beanName) {\n\treturn Bearcat.getFunction(beanName);\n}\n\n/**\n * Bearcat shim to enable function inherits.\n *\n * Examples:\n *\n *\n *\t  bearcat.extend(\"bus\", \"car\");\n *\n *\n * @param  {String}   \t\tbeanName\n * @param  {String|Array}   superBeanName or superBeanName array\n * @api public\n */\nBearcat.extend = function(beanName, superBeanName) {\n\tif (!beanName || !superBeanName) {\n\t\tlogger.error('[bearcat.extend] beanName or superBeanName can not be null');\n\t\treturn;\n\t}\n\n\tthis.applicationContext.extendBean(beanName, superBeanName);\n}\n\n/**\n * Bearcat call function used for inherits to call super constructor function.\n *\n * Examples:\n *\n *\n *\t  bearcat.call(\"car\", this);\n *\n *\n * @param  {String}   beanName\n * @param  {Object}   context\n * @api public\n */\nBearcat.call = function(beanName, context) {\n\tvar beanFunction = Bearcat.getFunction(beanName);\n\n\tif (!beanFunction) {\n\t\tlogger.error('[bearcat.call] bean function %s not exist', beanName);\n\t\treturn;\n\t}\n\n\tvar args = Array.prototype.slice.call(arguments, 2);\n\tbeanFunction.apply(context, args);\n}\n\n/**\n * Bearcat get model from bearcat through modelId.\n *\n * Examples:\n *\n *\n *\t  // through modelId\n *\t  var carModel = bearcat.getModel(\"car\");\n *\n *\n * @param  {String}   modelId\n * @return {Object}   model\n * @api public\n */\nBearcat.getModel = function(modelId) {\n\tif (this.state <= STATE_INITED) {\n\t\tlogger.warn('Bearcat application is not running now for %s %s state: %d', \"getModel\", modelId, this.state);\n\t\treturn;\n\t}\n\n\treturn this.applicationContext.getModel(modelId);\n}\n\n/**\n * Bearcat convenient function for using in MVC route mapping.\n *\n * Examples:\n *\n *\n *\t  // express\n *\t  var app = express();\n *\t  app.get('/', bearcat.getRoute('bearController', 'index'));\n *\n *\n * @param  {String} beanName\n * @param  {String} fnName routeName\n * @api public\n */\nBearcat.getRoute = function(beanName, fnName) {\n\tif (this.state !== STATE_STARTED) {\n\t\treturn;\n\t}\n\n\tvar bean = this.getBean(beanName);\n\treturn bean[fnName].bind(bean);\n}\n\nmodule.exports = Bearcat;","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/context/applicationContext.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat ApplicationContext\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>\n * MIT Licensed\n */\n\nvar logger = require('pomelo-logger').getLogger('bearcat', 'ApplicationContext');\nvar PlaceHolderConfigurer = require('../beans/support/placeHolderConfigurer');\nvar AutoProxyCreator = require('../aop/autoproxy/autoProxyCreator');\nvar ModelKeyMapResolver = require('../model/modelKeyMapResolver');\nvar AsyncScriptLoader = require('../resource/asyncScriptLoader');\nvar BootStrapLoader = require('../resource/bootStrapLoader');\nvar ResourceLoader = require('../resource/resourceLoader');\nvar defaultConstraints = require('../model/constraints');\nvar ModuleFactory = require('../beans/moduleFactory');\nvar BeanFactory = require('../beans/beanFactory');\nvar EventEmitter = require('events').EventEmitter;\nvar RequireUtil = require('../util/requireUtil');\nvar Constant = require('../util/constant');\nvar FileUtil = require('../util/fileUtil');\nvar MetaUtil = require('../util/metaUtil');\nvar Utils = require('../util/utils');\nvar Path = RequireUtil.requirePath();\nvar Util = RequireUtil.requireUtil();\nvar DEFAULT_BASE = \"\";\nvar DEFAULT_LOAD_PATH = \"\";\nvar DEFAULT_HOT_RELOAD_PATH = \"\";\n\nvar Root;\n(function() {\n\tRoot = this;\n}());\n\n/**\n * ApplicationContext constructor function.\n *\n * @param  {Array} configLocations configuration paths\n * @api public\n */\nvar ApplicationContext = function(configLocations, opts) {\n\tthis.opts = opts || {};\n\tthis.configLocations = configLocations;\n\tthis.loadBeans = [];\n\tthis.active = false;\n\tthis.reloadMap = {};\n\tthis.beanFactory = null;\n\tthis.startUpDate = null;\n\tthis.extendBeanMap = {};\n\tthis.extendedBeanMap = {};\n\tthis.extendBeanCurMap = {};\n\tthis.moduleFactory = null;\n\tthis.resourceLoader = null;\n\tthis.bootStrapLoader = null;\n\tthis.asyncScriptLoader = null;\n\tthis.cpath = DEFAULT_LOAD_PATH;\n\tthis.hpath = DEFAULT_HOT_RELOAD_PATH;\n\tthis.env = Constant.DEFAULT_ENV;\n\tthis.base = DEFAULT_BASE;\n\tthis.beanFactoryPostProcessors = [];\n\tEventEmitter.call(this);\n\tthis.init();\n}\n\nmodule.exports = ApplicationContext;\n\nUtil.inherits(ApplicationContext, EventEmitter);\n\n/**\n * ApplicationContext init.\n *\n * @api public\n */\nApplicationContext.prototype.init = function() {\n\tif (this.hasBeanFactory()) {\n\t\tthis.destroyBeans();\n\t\tthis.closeBeanFactory();\n\t}\n\n\tDEFAULT_BASE = process.cwd();\n\n\tif (this.configLocations.length) {\n\t\tvar contextPath = this.configLocations[0];\n\t\tDEFAULT_BASE = Path.dirname(contextPath);\n\t}\n\n\tDEFAULT_LOAD_PATH = DEFAULT_BASE + \"/config\";\n\tDEFAULT_HOT_RELOAD_PATH = DEFAULT_BASE + \"/app\"; // equal to scan path\n\n\tthis.cpath = DEFAULT_LOAD_PATH;\n\tthis.hpath = DEFAULT_HOT_RELOAD_PATH;\n\tthis.base = DEFAULT_BASE;\n\n\tthis.createBeanFactory();\n}\n\n/**\n * ApplicationContext set container startUpDate.\n *\n * @param  {Number} startUpDate\n * @api public\n */\nApplicationContext.prototype.setStartupDate = function(startUpDate) {\n\tthis.startUpDate = startUpDate;\n}\n\n/**\n * ApplicationContext get container startUpDate.\n *\n * @return  {Number} startUpDate\n * @api public\n */\nApplicationContext.prototype.getStartupDate = function() {\n\treturn this.startUpDate;\n}\n\n/**\n * ApplicationContext get resourceLoader.\n *\n * @return  {Object} resourceLoader\n * @api public\n */\nApplicationContext.prototype.getResourceLoader = function() {\n\tthis.resourceLoader = new ResourceLoader();\n\treturn this.resourceLoader;\n}\n\n/**\n * ApplicationContext get asyncScriptLoader.\n *\n * @return  {Object} asyncScriptLoader\n * @api public\n */\nApplicationContext.prototype.getAsyncScriptLoader = function() {\n\tif (this.asyncScriptLoader) {\n\t\treturn this.asyncScriptLoader;\n\t}\n\n\tthis.asyncScriptLoader = new AsyncScriptLoader();\n\tthis.asyncScriptLoader.setApplicationContext(this);\n\treturn this.asyncScriptLoader;\n}\n\n/**\n * ApplicationContext get bootStrapLoader.\n *\n * @return  {Object} bootStrapLoader\n * @api public\n */\nApplicationContext.prototype.getBootStrapLoader = function() {\n\tif (this.bootStrapLoader) {\n\t\treturn this.bootStrapLoader;\n\t}\n\n\tthis.bootStrapLoader = new BootStrapLoader();\n\treturn this.bootStrapLoader;\n}\n\n/**\n * ApplicationContext get metaObjects resource from contextPath.\n *\n * @param   {String} cpath contextPath\n * @return  {Object} metaObjects\n * @api public\n */\nApplicationContext.prototype.getResource = function(cpath) {\n\tif (Root.__bearcatData__ && Root.__bearcatData__.metas) {\n\t\treturn Root.__bearcatData__.metas;\n\t}\n\n\treturn this.resourceLoader.load(cpath);\n}\n\n/**\n * ApplicationContext get contextPath locations.\n *\n * @return  {Array} contextPath locations\n * @api public\n */\nApplicationContext.prototype.getConfigLocations = function() {\n\treturn this.configLocations;\n}\n\n/**\n * ApplicationContext add beanFactoryPostProcessor.\n *\n * @param  {Object} beanFactoryPostProcessor\n * @api public\n */\nApplicationContext.prototype.addBeanFactoryPostProcessor = function(beanFactoryPostProcessor) {\n\tthis.beanFactoryPostProcessors.push(beanFactoryPostProcessor);\n}\n\n/**\n * ApplicationContext get beanFactoryPostProcessors.\n *\n * @return  {Array} beanFactoryPostProcessors\n * @api public\n */\nApplicationContext.prototype.getBeanFactoryProcessors = function() {\n\treturn this.beanFactoryPostProcessors;\n}\n\n/**\n * ApplicationContext do refresh actions.\n * refresh beanFactory, preIntialize singleton Beans\n *\n * @param  {Function} cb callback function\n * @api public\n */\nApplicationContext.prototype.refresh = function(cb) {\n\tvar self = this;\n\tcb = cb || function() {};\n\n\t// Prepare context for refresh\n\tself.prepareRefresh();\n\n\t// Refresh internal beanFactory\n\tself.refreshBeanFactory();\n\n\t// Extend beans\n\tself.doExtendBeans();\n\n\t// Try Async loading for dependencies\n\tself.tryAsyncLoading(function() {\n\n\t\t// Try loading from bearcat-bootstrap.js for dependencies\n\t\tself.tryBootStrapLoading();\n\n\t\t// Prepare beanFactory for this context\n\t\tself.prepareBeanFactory();\n\n\t\tself.postProcessBeanFactory();\n\n\t\t// Invoke factory processors registered as beans in the context.\n\t\tself.invokeBeanFactoryPostProcessors();\n\n\t\t// Register bean processors that intercept bean creation.\n\t\tself.registerBeanPostProcessors();\n\n\t\t// Instantiate all remaining (non-lazy-init) singletons\n\t\tself.finishBeanFactoryIntialization(function() {\n\n\t\t\t// Last step: publish corresponding event.\n\t\t\tself.finishRefresh();\n\t\t\tcb();\n\t\t});\n\t});\n}\n\n/**\n * ApplicationContext prepareRefresh.\n * init startUpDate, active status\n * get resourceLoader and load context paths\n *\n * @api private\n */\nApplicationContext.prototype.prepareRefresh = function() {\n\tthis.startUpDate = Date.now();\n\n\tthis.active = true;\n\n\tvar opts = this.opts;\n\n\tif (opts['NODE_ENV']) {\n\t\tprocess.env.NODE_ENV = opts['NODE_ENV'];\n\t}\n\n\tif (opts['BEARCAT_ENV']) {\n\t\tprocess.env.BEARCAT_ENV = opts['BEARCAT_ENV'];\n\t}\n\n\tif (opts['NODE_CPATH']) {\n\t\tprocess.env.NODE_CPATH = opts['NODE_CPATH'];\n\t}\n\n\tif (opts['BEARCAT_CPATH']) {\n\t\tprocess.env.BEARCAT_CPATH = opts['BEARCAT_CPATH'];\n\t}\n\n\tif (opts['BEARCAT_LOGGER'] && opts['BEARCAT_LOGGER'] === 'off') {\n\t\tprocess.env.BEARCAT_LOGGER = 'off';\n\t}\n\n\tif (opts['BEARCAT_HOT'] && opts['BEARCAT_HOT'] === 'on') {\n\t\tprocess.env.BEARCAT_HOT = 'on';\n\t}\n\n\tif (opts['BEARCAT_ANNOTATION'] && opts['BEARCAT_ANNOTATION'] === 'off') {\n\t\tprocess.env.BEARCAT_ANNOTATION = 'off';\n\t}\n\n\tif (opts['BEARCAT_FUNCTION_STRING']) {\n\t\tprocess.env.BEARCAT_FUNCTION_STRING = true;\n\t}\n\n\tthis.getResourceLoader();\n\n\tthis.beanFactoryPostProcessors = [];\n\n\tvar args = Utils.parseArgs(process.argv);\n\tvar env = this.getEnv();\n\tenv = args.env || args['--env'] || process.env.NODE_ENV || process.env.BEARCAT_ENV || env || Constant.DEFAULT_ENV;\n\n\tthis.setEnv(env);\n\n\tvar cpath = this.getConfigPath();\n\tcpath = args.cpath || args['--cpath'] || process.env.NODE_CPATH || process.env.BEARCAT_CPATH || cpath;\n\n\tthis.setConfigPath(cpath);\n\n\tif (Utils.checkBrowser()) {\n\t\treturn;\n\t}\n\n\tMetaUtil.cleanUp();\n\tvar base = this.getBase();\n\n\tif (process.env.BEARCAT_LOGGER !== 'off') {\n\t\tvar originLoggerConfigPath = Path.join(cpath, Constant.LOGPATH);\n\t\tvar presentLoggerConfigPath = Path.join(cpath, env, Constant.LOGPATH);\n\t\tif (FileUtil.existsSync(originLoggerConfigPath)) {\n\t\t\trequire('pomelo-logger').configure(originLoggerConfigPath, {\n\t\t\t\tbase: base\n\t\t\t});\n\t\t} else if (FileUtil.existsSync(presentLoggerConfigPath)) {\n\t\t\trequire('pomelo-logger').configure(presentLoggerConfigPath, {\n\t\t\t\tbase: base\n\t\t\t});\n\t\t} else {\n\t\t\t// logger.error('logger file path configuration is error.');\n\t\t}\n\t}\n\n\tvar hpath = this.getHotPath();\n\t// BEARCAT_HPATH can be array\n\t// process.env.BEARCAT_HPATH will JSON.stringify this value\n\t// so do not use process.env.BEARCAT_HPATH\n\thpath = args.hpath || args['--hpath'] || opts['BEARCAT_HPATH'] || hpath;\n\tthis.setHotPath(hpath);\n\n\tif (process.env.BEARCAT_HOT === 'on') {\n\t\tthis.hotReloadFileWatch(hpath);\n\t}\n}\n\n/**\n * ApplicationContext refreshBeanFactory.\n * reload beanFactory with refresh metaObjects\n *\n * @api private\n */\nApplicationContext.prototype.refreshBeanFactory = function() {\n\tthis.configLocations = this.getConfigLocations();\n\n\tthis.loadDefaultConstraints();\n\n\tvar len = this.configLocations.length;\n\tfor (var i = 0; i < len; i++) {\n\t\tthis.beanFactory.registerBeans(this.getResource(this.configLocations[i]));\n\t}\n\n\tif (!len) {\n\t\tthis.beanFactory.registerBeans(this.getResource());\n\t}\n}\n\n/**\n * ApplicationContext try async loading script files when in the frontend.\n *\n * @api private\n */\nApplicationContext.prototype.tryAsyncLoading = function(cb) {\n\tif (!Utils.checkBrowser() || Utils.checkCocos2dJsb()) {\n\t\treturn cb();\n\t}\n\n\tvar loadBeans = this.loadBeans;\n\tif (!loadBeans || !loadBeans.length) {\n\t\treturn cb();\n\t}\n\n\treturn this.doAsyncLoading(cb);\n}\n\n/**\n * ApplicationContext internal do async loading script files when in the frontend.\n *\n * @api private\n */\nApplicationContext.prototype.doAsyncLoading = function(cb) {\n\tvar loadBeans = this.loadBeans;\n\n\tvar asyncScriptLoader = this.getAsyncScriptLoader();\n\n\treturn asyncScriptLoader.load(loadBeans, cb);\n}\n\n/**\n * ApplicationContext try loading script files from bearcat-bootstrap.js when in cocos2d-js jsb env.\n *\n * @api private\n */\nApplicationContext.prototype.tryBootStrapLoading = function() {\n\tif (!Utils.checkCocos2dJsb()) {\n\t\treturn;\n\t}\n\n\tif (Root.__bearcatData__ && Root.__bearcatData__.idPaths) {\n\t\tidPaths = Root.__bearcatData__.idPaths;\n\t\tvar bootStrapLoader = this.getBootStrapLoader();\n\n\t\treturn bootStrapLoader.load(idPaths);\n\t}\n}\n\n/**\n * ApplicationContext prepareBeanFactory.\n * register default beans into beanFactory\n *\n * @api private\n */\nApplicationContext.prototype.prepareBeanFactory = function() {\n\tvar placeHolderConfigurer = new PlaceHolderConfigurer();\n\tif (Utils.isNotNull(this.env)) {\n\t\tplaceHolderConfigurer.setEnv(this.env);\n\t}\n\n\tif (Utils.isNotNull(this.cpath)) {\n\t\tplaceHolderConfigurer.setConfigPath(this.cpath);\n\t}\n\n\tvar modelKeyMapResolver = new ModelKeyMapResolver();\n\n\tthis.addBeanFactoryPostProcessor(placeHolderConfigurer);\n\tthis.addBeanFactoryPostProcessor(modelKeyMapResolver);\n\n}\n\n/**\n * ApplicationContext registerBeanMeta.\n * register metaObject\n *\n * @param  {Object} metaObject\n * @api private\n */\nApplicationContext.prototype.registerBeanMeta = function(meta) {\n\tvar id = meta['id'];\n\tif (!id) {\n\t\tlogger.error('ApplicationContext registerBean error meta no id.');\n\t\treturn;\n\t}\n\n\tvar metaObject = {};\n\tmetaObject[id] = meta;\n\n\tthis.beanFactory.registerBeans(metaObject);\n}\n\n/**\n * ApplicationContext load default constraints.\n *\n * @api private\n */\nApplicationContext.prototype.loadDefaultConstraints = function() {\n\tfor (var key in defaultConstraints) {\n\t\tthis.getBeanByFunc(defaultConstraints[key]);\n\t}\n}\n\n/**\n * ApplicationContext hotReloadFileWatch.\n *\n * @param  {String} hpath hot reload path\n * @api private\n */\nApplicationContext.prototype.hotReloadFileWatch = function(hpath) {\n\tvar self = this;\n\tvar watcher = require('chokidar').watch(hpath, {\n\t\tignored: /[\\/\\\\]\\./,\n\t\tignoreInitial: true\n\t});\n\n\tif (!watcher) {\n\t\treturn;\n\t}\n\n\tlogger.info('bearcat hot reload watch %j', hpath);\n\twatcher.on('all', function(event, path) {\n\t\tif (event != 'change' && event != 'add') {\n\t\t\treturn;\n\t\t}\n\n\t\tvar filename = path;\n\t\tif (!Utils.checkString(filename)) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar id = Utils.getFileName(filename, '.js'.length);\n\n\t\tif (!Utils.checkFileType(filename, '.js') || !Utils.isFile(filename)) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar pid = process.pid;\n\t\tvar s = Math.floor(Math.random(0, 1) * 5);\n\t\tvar m = Math.floor(Math.random(0, 1) * 10);\n\t\tvar p = Math.floor(Math.random(0, 1) * 100);\n\t\tvar t = s * 1000 + p * (pid % 100) + p + s * m;\n\n\t\tvar doHotReload = function() {\n\t\t\tlogger.info('%s changed, bearcat start hot reloading %d ...', filename, t);\n\t\t\tvar meta = Utils.myRequireHot(filename);\n\t\t\tif (!meta) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (Utils.checkFunction(meta)) {\n\t\t\t\tmeta = MetaUtil.resolveFuncAnnotation(meta, null, true);\n\t\t\t}\n\n\t\t\tif (Utils.checkObject(meta)) {\n\t\t\t\tid = meta['id'];\n\t\t\t\tvar func = meta['func'];\n\n\t\t\t\tif (event == 'add') {\n\t\t\t\t\t// dynamic add file\n\t\t\t\t\tlogger.info('bearcat reload add bean %s', id);\n\t\t\t\t\tself.registerBeanMeta(meta);\n\t\t\t\t} else {\n\t\t\t\t\tif (id && Utils.checkFunction(func)) {\n\t\t\t\t\t\tvar beanFactory = self.getBeanFactory();\n\t\t\t\t\t\tvar beanFunc = beanFactory.getBeanFunction(id);\n\n\t\t\t\t\t\tself.doHotAddAttributes(meta, id);\n\t\t\t\t\t\tif (beanFunc) {\n\t\t\t\t\t\t\tvar proto = func.prototype;\n\n\t\t\t\t\t\t\tlogger.info('bearcat reload update bean %s', id);\n\t\t\t\t\t\t\tfor (var key in proto) {\n\t\t\t\t\t\t\t\t// logger.info('bearcat reload update prototype %s:%s', id, key);\n\t\t\t\t\t\t\t\tbeanFunc.prototype[key] = proto[key];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tself.emit('reload');\n\t\t\tlogger.info('bearcat hot reloading done ...');\n\t\t}\n\n\t\tsetTimeout(doHotReload, t);\n\t});\n}\n\n/**\n * ApplicationContext do hot add attributes.\n *\n * @param  {Object} hot reload new metaObject\n * @param  {String} hot reload bean name\n * @api private\n */\nApplicationContext.prototype.doHotAddAttributes = function(metaObject, beanName) {\n\tvar beanFactory = this.getBeanFactory();\n\tvar beanFunc = beanFactory.getBeanFunction(beanName);\n\tvar beanDefinition = beanFactory.getBeanDefinition(beanName);\n\n\tif (!beanDefinition) {\n\t\treturn;\n\t}\n\n\tvar beanPrototype = beanFunc.prototype;\n\tvar propsOn = beanDefinition.getPropsOn();\n\tvar props = metaObject.props;\n\n\tif (!Utils.checkArray(props)) {\n\t\treturn;\n\t}\n\n\tfor (var i = 0; i < props.length; i++) {\n\t\t(function(w) {\n\t\t\tvar name = w.name;\n\t\t\tvar flag = 1;\n\n\t\t\tfor (j = 0; j < propsOn.length; j++) {\n\t\t\t\tvar p = propsOn[j];\n\t\t\t\tif (name === p.getName()) {\n\t\t\t\t\tflag = 0;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// new prop attribute\n\t\t\tif (flag) {\n\t\t\t\tvar value = w.value;\n\t\t\t\tvar ref = w.ref;\n\t\t\t\tvar key = \"\";\n\t\t\t\tif (ref) {\n\t\t\t\t\tkey = Constant.DEFINE_GETTER_PREFIX + name;\n\t\t\t\t}\n\n\t\t\t\tlogger.info('hot reload add attribute %s to %s', name, beanName);\n\t\t\t\tbeanPrototype.__defineGetter__(name, function() {\n\t\t\t\t\tif (value) {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (ref) {\n\t\t\t\t\t\tif (!this[key]) {\n\t\t\t\t\t\t\tthis[key] = beanFactory.getBean(ref);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn this[key];\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t})(props[i]);\n\t}\n}\n\nApplicationContext.prototype.postProcessBeanFactory = function() {\n\n}\n\n/**\n * ApplicationContext register bean post processors.\n *\n * @api private\n */\nApplicationContext.prototype.registerBeanPostProcessors = function() {\n\tvar autoProxyCreator = new AutoProxyCreator();\n\tautoProxyCreator.setBeanFactory(this.getBeanFactory());\n\tthis.beanFactory.addBeanPostProcessor(autoProxyCreator);\n}\n\n/**\n * ApplicationContext invoke bean factory post processors.\n *\n * @api private\n */\nApplicationContext.prototype.invokeBeanFactoryPostProcessors = function() {\n\tvar beanFactory = this.getBeanFactory();\n\tvar postProcessors = this.getBeanFactoryProcessors();\n\tfor (var i = 0; i < postProcessors.length; i++) {\n\t\tvar postProcessor = postProcessors[i];\n\t\tpostProcessor.postProcessBeanFactory(beanFactory);\n\t}\n}\n\n/**\n * ApplicationContext finish beanFactory singleton beans intialization.\n *\n * @param  {Function} cb callback function\n * @api private\n */\nApplicationContext.prototype.finishBeanFactoryIntialization = function(cb) {\n\tthis.beanFactory.preInstantiateSingletons(cb);\n}\n\n/**\n * ApplicationContext finish refresh event emit.\n *\n * @api private\n */\nApplicationContext.prototype.finishRefresh = function() {\n\tvar self = this;\n\tthis.emit('finishRefresh');\n\n\tif (process.browser) {\n\t\treturn;\n\t}\n\n\tvar listeners = process.listeners('SIGTERM');\n\tif (listeners && listeners.length) {\n\t\treturn;\n\t}\n\n\tvar destroyFlag = false;\n\tvar doDestroy = function() {\n\t\tif (destroyFlag) {\n\t\t\treturn;\n\t\t}\n\n\t\tdestroyFlag = true;\n\t\tlogger.info('Bearcat starts destroying...');\n\t\tself.destroy();\n\t\tprocess.exit();\n\t}\n\n\tprocess.on('SIGINT', doDestroy);\n\tprocess.on('SIGTERM', doDestroy);\n\tprocess.on('SIGHUP', doDestroy);\n}\n\n/**\n * ApplicationContext cancel refresh.\n *\n * @api publish\n */\nApplicationContext.prototype.cancelRefresh = function() {\n\tthis.active = false;\n}\n\nApplicationContext.prototype.registerShutdownHook = function() {\n\n}\n\n/**\n * ApplicationContext destroy.\n *\n * @api public\n */\nApplicationContext.prototype.destroy = function() {\n\tthis.close();\n}\n\n/**\n * ApplicationContext close.\n *\n * @api private\n */\nApplicationContext.prototype.close = function() {\n\tthis.doClose();\n}\n\n/**\n * ApplicationContext do close.\n *\n * destroyBeans, closeBeanFactory, free resourceLoader, etc..\n * @api private\n */\nApplicationContext.prototype.doClose = function() {\n\tthis.configLocations = null;\n\tthis.startUpDate = null;\n\tthis.active = false;\n\tif (this.hasBeanFactory()) {\n\t\tthis.destroyBeans();\n\t\tthis.closeBeanFactory();\n\t}\n\n\tMetaUtil.cleanUp();\n\tthis.beanFactory = null;\n\tthis.resourceLoader = null;\n\tthis.beanFactoryPostProcessors = [];\n\tthis.cpath = DEFAULT_LOAD_PATH;\n\tthis.env = Constant.DEFAULT_ENV;\n\tthis.emit('destroyed');\n}\n\n/**\n * ApplicationContext destroyBeans.\n *\n * @api private\n */\nApplicationContext.prototype.destroyBeans = function() {\n\tthis.getBeanFactory().destroySingletons();\n}\n\n/**\n * ApplicationContext check whether applicationContext is active or not.\n *\n * @api public\n */\nApplicationContext.prototype.isActive = function() {\n\treturn this.active;\n}\n\n/**\n * ApplicationContext getBean through beanName from applicationContext.\n *\n * @param   {String} beanName\n * @return  {Object} beanObject\n * @api public\n */\nApplicationContext.prototype.getBean = function(beanName) {\n\tvar beanFactory = this.getBeanFactory();\n\treturn beanFactory.getBean.apply(beanFactory, arguments);\n}\n\n/**\n * ApplicationContext getBean through metaObject from applicationContext.\n *\n * @param   {Object} meta metaObject\n * @return  {Object} beanObject\n * @api public\n */\nApplicationContext.prototype.getBeanByMeta = function(meta) {\n\tvar id = meta['id'];\n\tif (!id) {\n\t\tlogger.error('ApplicationContext getBeanByMeta error meta no id.');\n\t\treturn;\n\t}\n\n\tif (!this.getBeanDefinition(id)) {\n\t\tthis.registerBeanMeta(meta);\n\n\t\tthis.invokeBeanFactoryPostProcessors();\n\t}\n\n\targuments[0] = id;\n\n\treturn this.beanFactory.getBeanProxy.apply(this.beanFactory, arguments);\n}\n\n/**\n * ApplicationContext getBean through $ annotation function from applicationContext.\n *\n * @param   {Function} func $ annotation function\n * @return  {Object}   beanObject\n * @api public\n */\nApplicationContext.prototype.getBeanByFunc = function(func) {\n\tvar meta = MetaUtil.resolveFuncAnnotation(func);\n\n\tvar id = meta['id'];\n\tif (!id) {\n\t\tlogger.error('ApplicationContext getBeanByFunc error meta no id, add this.$id = \"yourId\" to your func.');\n\t\treturn;\n\t}\n\n\tif (!this.getBeanDefinition(id)) {\n\t\tmeta['lazy'] = true;\n\t\tthis.registerBeanMeta(meta);\n\n\t\tthis.invokeBeanFactoryPostProcessors();\n\t}\n\n\targuments[0] = id;\n\n\treturn this.beanFactory.getBeanProxy.apply(this.beanFactory, arguments);\n}\n\n/**\n * ApplicationContext getModel through modelId.\n *\n * @param   {String}   modelId\n * @return  {Object}   model\n * @api public\n */\nApplicationContext.prototype.getModel = function(modelId) {\n\tif (!modelId) {\n\t\tlogger.error('ApplicationContext getModel error no modelId.');\n\t\treturn;\n\t}\n\n\treturn this.beanFactory.getModelProxy(modelId);\n}\n\n/**\n * ApplicationContext getModelDefinition through modelId.\n *\n * @param   {String}   modelId\n * @return  {Object}   modelDefinition\n * @api public\n */\nApplicationContext.prototype.getModelDefinition = function(modelId) {\n\tif (!modelId) {\n\t\tlogger.error('ApplicationContext getModelDefinition error no modelId.');\n\t\treturn;\n\t}\n\n\treturn this.beanFactory.getModelDefinition(modelId);\n}\n\n/**\n * ApplicationContext get bean contructor function.\n *\n * @param  {String}   beanName\n * @return {Function} bean constructor function\n * @api public\n */\nApplicationContext.prototype.getBeanFunction = function(beanName) {\n\treturn this.beanFactory.getBeanFunction(beanName);\n}\n\n/**\n * ApplicationContext extend bean.\n *\n * @param  {String}   \t\tbeanName\n * @param  {String|Array}   superBeanName or superBeanName array\n * @api public\n */\nApplicationContext.prototype.extendBean = function(beanName, superBeanName) {\n\tif (!this.extendBeanMap[beanName]) {\n\t\tthis.extendBeanMap[beanName] = [];\n\t}\n\n\tthis.extendBeanMap[beanName] = this.extendBeanMap[beanName].concat(superBeanName);\n}\n\n/**\n * ApplicationContext do extend beans.\n *\n * @api private\n */\nApplicationContext.prototype.doExtendBeans = function() {\n\tvar extendBeanMap = this.extendBeanMap;\n\n\tfor (var beanName in extendBeanMap) {\n\t\tvar superNames = extendBeanMap[beanName];\n\n\t\tfor (var i = 0; i < superNames.length; i++) {\n\t\t\tvar superBeanName = superNames[i];\n\t\t\tthis.doExtendBean(beanName, superBeanName);\n\t\t}\n\t}\n}\n\n/**\n * ApplicationContext do extend bean.\n *\n * @param  {String}   beanName\n * @param  {String}   superBeanName\n * @api public\n */\nApplicationContext.prototype.doExtendBean = function(beanName, superBeanName) {\n\tvar cacheKey = beanName + '_' + superBeanName;\n\tif (this.extendBeanCurMap[superBeanName]) {\n\t\tlogger.error(\"[bearcat.extend] error circle beanName %s extend %s is not allowed\", beanName, superBeanName);\n\t\treturn;\n\t}\n\n\tif (this.extendedBeanMap[cacheKey]) {\n\t\treturn;\n\t}\n\n\tvar beanFunction = this.getBeanFunction(beanName);\n\tif (!beanFunction) {\n\t\tlogger.error('[bearcat.extend] %s from super %s, %s null', beanName, superBeanName, beanName);\n\t\treturn;\n\t}\n\n\tvar superFunction = this.getBeanFunction(superBeanName);\n\tif (!superFunction) {\n\t\tlogger.error('[bearcat.extend] %s from super %s, %s null', beanName, superBeanName, superBeanName);\n\t\treturn;\n\t}\n\n\tthis.extendBeanCurMap[beanName] = true;\n\n\tvar _superBeans = this.extendBeanMap[superBeanName];\n\tif (_superBeans && _superBeans.length) {\n\t\tfor (var i = 0; i < _superBeans.length; i++) {\n\t\t\tthis.doExtendBean(superBeanName, _superBeans[i]);\n\t\t}\n\t}\n\n\tvar _super = superFunction.prototype;\n\tvar props = beanFunction.prototype;\n\tfor (var name in _super) {\n\t\tif (!props[name]) {\n\t\t\tprops[name] = _super[name];\n\t\t} else {\n\t\t\tif (Utils.checkFunction(props[name]) && Utils.checkFunction(_super[name])) {\n\t\t\t\tprops[name] = (function(super_fn, fn) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tvar tmp = this._super;\n\n\t\t\t\t\t\tthis._super = super_fn;\n\n\t\t\t\t\t\tvar ret = fn.apply(this, arguments);\n\n\t\t\t\t\t\tthis._super = tmp;\n\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t}\n\t\t\t\t})(_super[name], props[name]);\n\t\t\t}\n\t\t}\n\t}\n\n\tdelete this.extendBeanCurMap[beanName];\n\tthis.extendedBeanMap[cacheKey] = true;\n}\n\n/**\n * ApplicationContext add module(bean) to IoC container through $ annotation function from applicationContext.\n *\n * @param   {Function} func $ annotation function\n * @api public\n */\nApplicationContext.prototype.module = function(func, context) {\n\tvar meta = MetaUtil.resolveFuncAnnotation(func);\n\tvar id = meta['id'];\n\tif (!id) {\n\t\tlogger.error('ApplicationContext module error meta no id, add this.$id = \"yourId\" to your func.');\n\t\treturn;\n\t}\n\n\tif (this.getBeanDefinition(id)) {\n\t\treturn;\n\t}\n\n\t// node.js env\n\tif (!Utils.checkBrowser() && Utils.isNotNull(context) && context['exports']) {\n\t\treturn context['exports'] = func;\n\t}\n\n\t// browser async load depended script files\n\tif (Utils.checkBrowser()) {\n\t\tvar loader = this.getAsyncScriptLoader();\n\t\tloader.module(id, meta);\n\t}\n\n\t// register current bean meta\n\treturn this.registerBeanMeta(meta);\n}\n\n/**\n * ApplicationContext service locator pattern define module.\n *\n * @param   {String}   id\n * @param   {Function} factory factory function\n * @api public\n */\nApplicationContext.prototype.define = function(id, factory, context) {\n\t// loader env\n\tif (process.env.LOADER_BIN && Utils.isNotNull(context) && context['exports']) {\n\t\treturn context['exports'] = {\n\t\t\tid: id,\n\t\t\tfunc: factory\n\t\t};\n\t}\n\n\treturn this.getModuleFactory().define(id, factory);\n}\n\n/**\n * ApplicationContext service locator pattern define module.\n *\n * @param   {String}   id\n * @param   {Function} factory factory function\n * @api public\n */\nApplicationContext.prototype.require = function(id) {\n\treturn this.getModuleFactory().require(id);\n}\n\n/**\n * ApplicationContext add startup loaded bean ids.\n *\n * @param   {Array} startup loaded bean ids\n * @api public\n */\nApplicationContext.prototype.use = function(ids) {\n\tthis.loadBeans = this.loadBeans.concat(ids);\n}\n\n/**\n * ApplicationContext async load bean with bean ids.\n *\n * @param   {Array}    loaded bean ids\n * @param   {Function} callback function\n * @api public\n */\nApplicationContext.prototype.async = function(ids, cb) {\n\tvar asyncScriptLoader = new AsyncScriptLoader();\n\treturn asyncScriptLoader.load(loadBeans, cb);\n}\n\n/**\n * ApplicationContext check ApplicationContext contains bean or not.\n *\n * @param  {String} beanName\n * @return {Boolean}\n * @api public\n */\nApplicationContext.prototype.containsBean = function(beanName) {\n\treturn this.getBeanFactory().containsBean(beanName);\n}\n\n/**\n * ApplicationContext check bean is a singleton or not.\n *\n * @param  {String} beanName\n * @return {Boolean}\n * @api public\n */\nApplicationContext.prototype.isSingleton = function(beanName) {\n\treturn this.getBeanFactory().isSingleton(beanName);\n}\n\n/**\n * ApplicationContext check bean is a prototype or not.\n *\n * @param  {String} beanName\n * @return {Boolean}\n * @api public\n */\nApplicationContext.prototype.isPrototype = function(beanName) {\n\treturn this.getBeanFactory().isPrototype(beanName);\n}\n\n/**\n * ApplicationContext check ApplicationContext contains beanName beanDefinition or not.\n *\n * @param  {String} beanName\n * @return {Boolean}\n * @api public\n */\nApplicationContext.prototype.containsBeanDefinition = function(beanName) {\n\treturn this.getBeanFactory().containsBeanDefinition(beanName);\n}\n\n/**\n * ApplicationContext check whether applicationContext is running or not.\n *\n * @return {Boolean} true|false\n * @api public\n */\nApplicationContext.prototype.isRunning = function() {\n\treturn this.active;\n}\n\n/**\n * ApplicationContext close beanFactory.\n *\n * @api public\n */\nApplicationContext.prototype.closeBeanFactory = function() {\n\tthis.getBeanFactory().destroyBeanFactory();\n\tthis.beanFactory = null;\n}\n\n/**\n * ApplicationContext check whether applicationContext has beanFactory or not.\n *\n * @return {Boolean} true|false\n * @api public\n */\nApplicationContext.prototype.hasBeanFactory = function() {\n\treturn this.beanFactory != null;\n}\n\n/**\n * ApplicationContext getBeanFactory.\n *\n * @return {Object} beanFactory\n * @api public\n */\nApplicationContext.prototype.getBeanFactory = function() {\n\treturn this.beanFactory;\n}\n\nApplicationContext.prototype.getModuleFactory = function() {\n\tif (!this.moduleFactory) {\n\t\tthis.moduleFactory = new ModuleFactory();\n\t}\n\n\treturn this.moduleFactory;\n}\n\n/**\n * ApplicationContext createBeanFactory.\n *\n * @api private\n */\nApplicationContext.prototype.createBeanFactory = function() {\n\tthis.beanFactory = new BeanFactory();\n}\n\n/**\n * ApplicationContext get beanDefinition.\n *\n * @param  {String} beanName\n * @return {Object} beanDefinition\n * @api public\n */\nApplicationContext.prototype.getBeanDefinition = function(beanName) {\n\treturn this.getBeanFactory().getBeanDefinition(beanName);\n}\n\n/**\n * ApplicationContext remove beanDefinition from ApplicationContext.\n *\n * @param  {String} beanName\n * @api public\n */\nApplicationContext.prototype.removeBeanDefinition = function(beanName) {\n\treturn this.getBeanFactory().removeBeanDefinition(beanName);\n}\n\n/**\n * ApplicationContext set env.\n *\n * @param {String} env\n * @api public\n */\nApplicationContext.prototype.setEnv = function(env) {\n\tthis.env = env;\n}\n\n/**\n * ApplicationContext get env.\n *\n * @return {String} env\n * @api public\n */\nApplicationContext.prototype.getEnv = function() {\n\treturn this.env;\n}\n\n/**\n * ApplicationContext set config path.\n *\n * @param {String} cpath config path\n * @api public\n */\nApplicationContext.prototype.setConfigPath = function(cpath) {\n\tthis.cpath = cpath;\n}\n\n/**\n * ApplicationContext get config path.\n *\n * @return {String} config path\n * @api public\n */\nApplicationContext.prototype.getConfigPath = function() {\n\treturn this.cpath;\n}\n\n/**\n * ApplicationContext set hot reload path.\n *\n * @param {String} hpath hot reload path\n * @api public\n */\nApplicationContext.prototype.setHotPath = function(hpath) {\n\tthis.hpath = hpath;\n}\n\n/**\n * ApplicationContext get hot reload path.\n *\n * @return {String} hpath hot reload path\n * @api public\n */\nApplicationContext.prototype.getHotPath = function() {\n\treturn this.hpath;\n}\n\n/**\n * ApplicationContext get base path.\n *\n * @return {String} base path\n * @api public\n */\nApplicationContext.prototype.getBase = function() {\n\treturn this.base;\n}","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/beans/support/placeHolderConfigurer.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat PlaceHolderConfigurer\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>\n * MIT Licensed\n */\n\nvar PropertiesLoader = require('../../resource/propertiesLoader');\nvar BeanDefinitionVisitor = require('./beanDefinitionVisitor');\nvar PlaceHolderResolver = require('./placeHolderResolver');\nvar Constant = require('../../util/constant');\nvar Utils = require('../../util/utils');\n\nvar DEFAULT_LOAD_PATH = process.cwd() + \"/config\";\n\nvar Root;\n(function() {\n\tRoot = this;\n}());\n\n/**\n * PlaceHolderConfigurer constructor function.\n *\n * @api public\n */\nvar PlaceHolderConfigurer = function() {\n\tthis.beanName = null;\n\tthis.env = Constant.DEFAULT_ENV;\n\tthis.cpath = DEFAULT_LOAD_PATH;\n\tthis.properties = {};\n}\n\n/**\n * PlaceHolderConfigurer post process beanFactory.\n *\n * @param  {Object} beanFactory\n * @api public\n */\nPlaceHolderConfigurer.prototype.postProcessBeanFactory = function(beanFactory) {\n\tthis.loadProperties();\n\n\tthis.processProperties(beanFactory);\n}\n\n/**\n * PlaceHolderConfigurer load properties by env.\n *\n * @api public\n */\nPlaceHolderConfigurer.prototype.loadProperties = function() {\n\tvar properties = null;\n\n\tif (Root.__bearcatData__ && Root.__bearcatData__.configData) {\n\t\tproperties = Root.__bearcatData__.configData;\n\t} else {\n\t\tproperties = this.getPropertiesLoader().loadProperties(this.getConfigPath(), this.getEnv());\n\t}\n\n\tthis.mergeProperties(properties);\n}\n\n/**\n * PlaceHolderConfigurer merge properties.\n *\n * @param  {Object} properties\n * @api public\n */\nPlaceHolderConfigurer.prototype.mergeProperties = function(properties) {\n\tfor (var key in properties) {\n\t\tif (Utils.isNotNull(properties[key])) {\n\t\t\tthis.properties[key] = properties[key];\n\t\t}\n\t}\n}\n\n/**\n * PlaceHolderConfigurer process properties.\n *\n * @param  {Object} beanFactory\n * @api public\n */\nPlaceHolderConfigurer.prototype.processProperties = function(beanFactory) {\n\tvar properties = this.getProperties();\n\tif (Utils.checkObjectEmpty(properties)) {\n\t\treturn;\n\t}\n\n\tvar valueResolver = new PlaceHolderResolver(properties);\n\tthis.doProcessProperties(beanFactory, valueResolver);\n}\n\n/**\n * PlaceHolderConfigurer do process properties.\n *\n * @param  {Object} beanFactory\n * @param  {Object} valueResolver\n * @api private\n */\nPlaceHolderConfigurer.prototype.doProcessProperties = function(beanFactory, valueResolver) {\n\tvar visitor = new BeanDefinitionVisitor(valueResolver);\n\tvar beanDefinitions = beanFactory.getBeanDefinitions();\n\n\tfor (var beanName in beanDefinitions) {\n\t\tvar bd = beanDefinitions[beanName];\n\n\t\tvisitor.visitBeanDefinition(bd);\n\t}\n}\n\n/**\n * PlaceHolderConfigurer get properties loader.\n *\n * @return  {Object} properties loader\n * @api public\n */\nPlaceHolderConfigurer.prototype.getPropertiesLoader = function() {\n\treturn new PropertiesLoader();\n}\n\n/**\n * PlaceHolderConfigurer set beanName.\n *\n * @param  {String} beanName\n * @api public\n */\nPlaceHolderConfigurer.prototype.setBeanName = function(beanName) {\n\tthis.beanName = beanName;\n}\n\n/**\n * PlaceHolderConfigurer get beanName.\n *\n * @return  {String} beanName\n * @api public\n */\nPlaceHolderConfigurer.prototype.getBeanName = function() {\n\treturn this.beanName;\n}\n\n/**\n * PlaceHolderConfigurer set env.\n *\n * @param  {String} env\n * @api public\n */\nPlaceHolderConfigurer.prototype.setEnv = function(env) {\n\tthis.env = env;\n}\n\n/**\n * PlaceHolderConfigurer get env.\n *\n * @return  {String} env\n * @api public\n */\nPlaceHolderConfigurer.prototype.getEnv = function() {\n\treturn this.env;\n}\n\n/**\n * PlaceHolderConfigurer set configuration path.\n *\n * @param  {String} cpath configuration path\n * @api public\n */\nPlaceHolderConfigurer.prototype.setConfigPath = function(cpath) {\n\tthis.cpath = cpath;\n}\n\n/**\n * PlaceHolderConfigurer get configuration path.\n *\n * @return  {String} cpath configuration path\n * @api public\n */\nPlaceHolderConfigurer.prototype.getConfigPath = function() {\n\treturn this.cpath;\n}\n\n/**\n * PlaceHolderConfigurer set properties.\n *\n * @param  {Array} properties\n * @api public\n */\nPlaceHolderConfigurer.prototype.setProperties = function(properties) {\n\tthis.properties = properties;\n}\n\n/**\n * PlaceHolderConfigurer get properties.\n *\n * @return  {Array} properties\n * @api public\n */\nPlaceHolderConfigurer.prototype.getProperties = function() {\n\treturn this.properties;\n}\n\nmodule.exports = PlaceHolderConfigurer;","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/resource/propertiesLoader.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat PropertiesLoader\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>\n * MIT Licensed\n */\n\nvar logger = require('pomelo-logger').getLogger('bearcat', 'PropertiesLoader');\nvar FileUtil = require('../util/fileUtil');\nvar Utils = require('../util/utils');\n\n/**\n * PropertiesLoader constructor function.\n *\n * @api public\n */\nvar PropertiesLoader = function() {\n\n}\n\nmodule.exports = PropertiesLoader;\n\n/**\n * PropertiesLoader load properties from load path with env.\n *\n * @param    {String} lpath load path\n * @param    {String} env environment\n * @return   {Object} properties\n * @api public\n */\nPropertiesLoader.prototype.loadProperties = function(lpath, env) {\n\tvar meta = {};\n\n\tthis.loadDir(meta, lpath, true);\n\tthis.loadDir(meta, lpath + '/' + env);\n\n\treturn meta;\n}\n\n/**\n * PropertiesLoader load properties from directory.\n *\n * @param    {Object}  meta properties\n * @param    {String}  lpath load path\n * @param    {Boolean} lflag if not load subdirectory or not, true not\n * @api private\n */\nPropertiesLoader.prototype.loadDir = function(meta, lpath, lflag) {\n\tif (!FileUtil.existsSync(lpath)) {\n\t\treturn;\n\t}\n\n\tif (!Utils.isDir(lpath)) {\n\t\treturn;\n\t}\n\n\tvar files = FileUtil.readdirSync(lpath);\n\n\tif (lpath.charAt(lpath.length - 1) !== '/') {\n\t\tlpath += '/';\n\t}\n\n\tvar fp, fn, m;\n\tfor (var i = 0, l = files.length; i < l; i++) {\n\t\tfn = files[i];\n\t\tfp = lpath + fn;\n\n\t\tif (!lflag && Utils.isDir(fp)) {\n\t\t\tthis.loadDir(meta, fp);\n\t\t}\n\n\t\tif (!Utils.isFile(fp) || !Utils.checkFileType(fp, 'json')) {\n\t\t\t// only load json properties files\n\t\t\tcontinue;\n\t\t}\n\n\t\tm = Utils.myRequire(fp);\n\t\tif (!Utils.isNotNull(m) || !Utils.checkObject(m)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tfor (var key in m) {\n\t\t\tif (Utils.isNotNull(m[key])) {\n\t\t\t\tmeta[key] = m[key];\n\t\t\t}\n\t\t}\n\t}\n}","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/util/fileUtil.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat FileUtil\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>\n * MIT Licensed\n */\n\nvar fs = require('fs');\n\nvar FileUtil = {};\n\n/**\n * FileUtil existsSync.\n *\n * @api public\n */\nFileUtil.existsSync = function() {\n\treturn false;\n}\n\n/**\n * FileUtil watch shim.\n *\n * @api public\n */\nFileUtil.watch = function() {\n\n}\n\n/**\n * FileUtil realpathSync shim.\n *\n * @api public\n */\nFileUtil.realpathSync = function() {\n\n}\n\n/**\n * FileUtil readdirSync shim.\n *\n * @api public\n */\nFileUtil.readdirSync = function() {\n\n}\n\nif (fs) {\n\tfor (var method in fs) {\n\t\tFileUtil[method] = fs[method];\n\t}\n}\n\nmodule.exports = FileUtil;","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/util/utils.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat Utils\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>\n * MIT Licensed\n */\n\nvar logger = require('pomelo-logger').getLogger('bearcat', 'Utils');\nvar RequireUtil = require('./requireUtil');\nvar Constant = require('./constant');\nvar FileUtil = require('./fileUtil');\nvar Path = RequireUtil.requirePath();\n\nvar Utils = {};\n\n/**\n * Utils normalize type\n *\n * @param  {String}   type\n * @return {String}   normalized type\n * @api public\n */\nUtils.normalizeType = function(type) {\n\tif (!Utils.checkString(type)) {\n\t\treturn;\n\t}\n\n\ttype = type.toLowerCase();\n\tvar Type = type[0].toUpperCase() + type.substr(1);\n\treturn Type;\n}\n\n/**\n * Utils check type array\n *\n * @param  {String}    type\n * @return {Boolean}   true|false\n * @api public\n */\nUtils.checkTypeArray = function(type) {\n\tvar type = this.normalizeType(type);\n\treturn type === Constant.MODEL_ATTRIBUTE_TYPE_ARRAY;\n}\n\n/**\n * Utils check type object\n *\n * @param  {String}    type\n * @return {Boolean}   true|false\n * @api public\n */\nUtils.checkTypeObject = function(type) {\n\tvar type = this.normalizeType(type);\n\treturn type === Constant.MODEL_ATTRIBUTE_TYPE_OBJECT;\n}\n\n/**\n * Utils check type\n *\n * @param  {String}   type\n * @return {Function} high order function\n * @api public\n */\nUtils.isType = function(type) {\n\treturn function(obj) {\n\t\treturn {}.toString.call(obj) == \"[object \" + type + \"]\";\n\t}\n}\n\n/**\n * Utils check array\n *\n * @param  {Array}   array\n * @return {Boolean} true|false\n * @api public\n */\nUtils.checkArray = Array.isArray || Utils.isType(\"Array\");\n\n/**\n * Utils check number\n *\n * @param  {Number}  number\n * @return {Boolean} true|false\n * @api public\n */\nUtils.checkNumber = Utils.isType(\"Number\");\n\n/**\n * Utils check function\n *\n * @param  {Function}   func function\n * @return {Boolean}    true|false\n * @api public\n */\nUtils.checkFunction = Utils.isType(\"Function\");\n/**\n * Utils check object\n *\n * @param  {Object}   obj object\n * @return {Boolean}  true|false\n * @api public\n */\nUtils.checkObject = Utils.isType(\"Object\");\n\n/**\n * Utils check string\n *\n * @param  {String}   string\n * @return {Boolean}  true|false\n * @api public\n */\nUtils.checkString = Utils.isType(\"String\");\n\n/**\n * Utils check boolean\n *\n * @param  {Object}   obj object\n * @return {Boolean}  true|false\n * @api public\n */\nUtils.checkBoolean = Utils.isType(\"Boolean\");\n\n/**\n * Utils check object not empty\n *\n * @param  {Object}   obj object\n * @return {Boolean}  true|false\n * @api public\n */\nUtils.checkObjectEmpty = function(obj) {\n\tvar flag = true;\n\n\tfor (var key in obj) {\n\t\tflag = false;\n\t}\n\n\treturn flag;\n}\n\n/**\n * Utils check type\n *\n * @param  {String}   type\n * @return {Boolean}  true|false\n * @api public\n */\nUtils.checkType = function(type) {\n\tif (type === 'Object')\n\t\treturn true;\n\tif (type === 'Number')\n\t\treturn true;\n\tif (type === 'Array')\n\t\treturn true;\n\tif (type === 'Boolean')\n\t\treturn true;\n\tif (type === 'Function')\n\t\treturn true;\n\tif (type === 'String')\n\t\treturn true;\n\treturn false;\n}\n\n/**\n * Utils check is not null\n *\n * @param  {Object}   value\n * @return {Boolean}  true|false\n * @api public\n */\nUtils.isNotNull = function(value) {\n\tif (typeof value !== 'undefined' && value !== null)\n\t\treturn true;\n\treturn false;\n}\n\n/**\n * Utils myRequire require handle error\n *\n * @param  {String}   cpath require path\n * @return {Object}   require result\n * @api public\n */\nUtils.myRequire = function(cpath) {\n\tif (!Utils.checkString(cpath)) {\n\t\treturn;\n\t}\n\n\tvar context = null;\n\ttry {\n\t\tcontext = require(cpath);\n\t\treturn context;\n\t} catch (err) {\n\t\tlogger.error('myRequire path %s error %s', cpath, err.stack);\n\t\t// logger.debug('myRequire error file pid %d %s %s', process.pid, cpath, FileUtil.readFileSync(cpath).toString());\n\t\treturn context;\n\t}\n}\n\n/**\n * Utils myRequireHot require handle error\n *\n * @param  {String}   cpath require path\n * @return {Object}   require result\n * @api public\n */\nUtils.myRequireHot = function(cpath) {\n\tvar context = null;\n\ttry {\n\t\tcontext = Utils.requireUncached(cpath);\n\t\treturn context;\n\t} catch (err) {\n\t\tlogger.error('myRequireHot error %s', err.stack);\n\t\t// logger.debug('myRequireHot error file pid %d %s %s', process.pid, cpath, FileUtil.readFileSync(cpath).toString());\n\t\treturn context;\n\t}\n}\n\n/**\n * Utils get load path\n *\n * @param  {String}   spath scan path\n * @param  {String}   cpath context path\n * @return {String}   load path\n * @api public\n */\nUtils.getLoadPath = function(spath, cpath) {\n\tif (!Utils.checkString(spath)) {\n\t\treturn null;\n\t}\n\tspath = spath.replace(/\\./g, \"/\");\n\n\tcpath = require.resolve(cpath);\n\n\tvar dpath = Path.dirname(cpath);\n\n\treturn dpath + \"/\" + spath;\n}\n\n/**\n * Utils get load path\n *\n * @param  {String}   spath scan path\n * @param  {String}   cpath context path\n * @return {String}   load path\n * @api public\n */\nUtils.getLoadPath2 = function(spath, cpath) {\n\tif (!Utils.checkString(spath)) {\n\t\treturn null;\n\t}\n\n\tcpath = require.resolve(cpath);\n\n\tvar dpath = Path.dirname(cpath);\n\n\tvar rpath = Path.resolve(dpath, spath);\n\treturn rpath;\n}\n\n/**\n * Utils require new\n *\n * @param  {String}   module require module\n * @return {object}   require result\n * @api public\n */\nUtils.requireUncached = function(module) {\n\tif (!Utils.checkString(module)) {\n\t\treturn;\n\t}\n\n\tvar modulePath = require.resolve(module);\n\tif (require.cache[modulePath]) {\n\t\tdelete require.cache[modulePath];\n\t}\n\n\treturn require(modulePath)\n}\n\n/**\n * Utils Check file suffix\n \n * @param {String} fn file name\n * @param {String} suffix suffix string, such as .js, etc.\n */\nUtils.checkFileType = function(fn, suffix) {\n\tif (suffix.charAt(0) !== '.') {\n\t\tsuffix = '.' + suffix;\n\t}\n\n\tif (fn.length <= suffix.length) {\n\t\treturn false;\n\t}\n\n\tvar str = fn.substring(fn.length - suffix.length).toLowerCase();\n\tsuffix = suffix.toLowerCase();\n\treturn str === suffix;\n};\n\n/**\n * Utils Check isFile\n \n * @param  {String}  path \n * @return {Boolean} true|false.\n */\nUtils.isFile = function(path) {\n\tif (FileUtil.existsSync(path)) {\n\t\treturn FileUtil.statSync(path).isFile();\n\t}\n};\n\n/**\n * Utils Check isDir\n \n * @param  {String}  path \n * @return {Boolean} true|false.\n */\nUtils.isDir = function(path) {\n\tif (FileUtil.existsSync(path)) {\n\t\treturn FileUtil.statSync(path).isDirectory();\n\t}\n};\n\n/**\n * Utils get file name\n \n * @param  {String}  fp \n * @param  {Number}  suffixLength\n * @return {String}  file name\n */\nUtils.getFileName = function(fp, suffixLength) {\n\tvar fn = Path.basename(fp);\n\tif (fn.length > suffixLength) {\n\t\treturn fn.substring(0, fn.length - suffixLength);\n\t}\n\n\treturn fn;\n};\n\n/**\n * Utils compare by order\n \n * @param  {Object}  a\n * @param  {Object}  b\n * @return {Number}  \n */\nUtils.compareByOrder = function(a, b) {\n\tif (!a.getOrder())\n\t\treturn 1;\n\tif (!b.getOrder())\n\t\treturn -1;\n\treturn a.getOrder() - b.getOrder();\n}\n\n/**\n * Utils compare beans, aspect first, order low first\n \n * @param  {Object}  a\n * @param  {Object}  b\n * @return {Number}  \n */\nUtils.compareBeans = function(a, b) {\n\tif (a.isAspect()) {\n\t\treturn -1;\n\t}\n\n\tif (b.isAspect()) {\n\t\treturn 1;\n\t}\n\n\tif (!a.getOrder())\n\t\treturn 1;\n\tif (!b.getOrder())\n\t\treturn -1;\n\treturn a.getOrder() - b.getOrder();\n}\n\n/**\n * Utils parseArgs\n \n * @param  {Array}  args\n * @return {Object} argsMap \n */\nUtils.parseArgs = function(args) {\n\tvar argsMap = {};\n\tvar mainPos = 1;\n\n\targsMap.main = args[mainPos];\n\n\tfor (var i = (mainPos + 1); i < args.length; i++) {\n\t\tvar arg = args[i];\n\t\tvar sep = arg.indexOf('=');\n\t\tvar key = arg.slice(0, sep);\n\t\tvar value = arg.slice(sep + 1);\n\t\targsMap[key] = value;\n\t}\n\n\treturn argsMap;\n}\n\n/**\n * Utils check browser\n *\n * @return {Boolean}  true|false\n * @api public\n */\nUtils.checkBrowser = function() {\n\treturn typeof window !== 'undefined';\n}\n\n/**\n * Utils check web worker\n *\n * @return {Boolean}  true|false\n * @api public\n */\nUtils.checkWebWorker = function() {\n\treturn this.checkBrowser() && typeof importScripts !== 'undefined' && this.checkFunction(importScripts);\n}\n\n/**\n * Utils check model filter error\n *\n * @return {Boolean}  true|false\n * @api public\n */\nUtils.checkModelFilterError = function(r) {\n\treturn r !== true && this.isNotNull(r);\n}\n\n/**\n * Utils check cocos2d-js jsb env\n *\n * @return {Boolean}  true|false\n * @api public\n */\nUtils.checkCocos2dJsb = function() {\n\tif (typeof cc !== 'undefined' && cc && cc.sys && cc.sys.isNative) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\nmodule.exports = Utils;","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/util/constant.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat Constant\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>\n * MIT Licensed\n */\n\nmodule.exports = {\n\tSCOPE_DEFAULT: \"singleton\",\n\tSCOPE_SINGLETON: \"singleton\",\n\tSCOPE_PROTOTYPE: \"prototype\",\n\n\tDEPENDS_ARGS: \"args\",\n\tDEPENDS_PROPS: \"props\",\n\n\tSETTINGS_ARGS_ON: \"argsOn\",\n\tSETTINGS_PROPS_ON: \"propsOn\",\n\tSETTINGS_FACTORY_ARGS_ON: \"factoryArgsOn\",\n\n\tDEPEND_TYPE_BEAN: \"d_bean\",\n\tDEPEND_TYPE_VALUE: \"d_value\",\n\tDEPEND_TYPE_VAR: \"d_var\",\n\tDEPEND_TYPE_ERROR: \"d_error\",\n\n\tPROPS_DEFAULT: [],\n\tARGS_DEFAULT: [],\n\n\tASYNC_INIT_DEFAULT: false,\n\tLAZY_INIT_DEFAULT: false,\n\tABSTRACT_DEFAULT: false,\n\n\tINIT_CB_DEFAULT: function() {},\n\n\tAOP_ADVICE_BEFORE: \"before\",\n\tAOP_ADVICE_AFTER: \"after\",\n\tAOP_ADVICE_AROUND: \"around\",\n\n\tPROXY_DEFAULT: true,\n\n\tDEFAULT_ENV: \"dev\",\n\n\tLOGPATH: \"log4js.json\",\n\n\tNAMESPACE_SEPERATOR: \":\",\n\n\tFUNC_ARGS_REGEXP: /function.*?\\((.*?)\\)\\s*\\{/,\n\n\tFUNC_PROPS_REGEXP: /\\s*this\\.\\$\\w+\\s*=(.|\\s)*?;/g,\n\n\tFUNC_PROPS_REGEXP_ATTR: /\\s*this\\.\\w+\\s*=\\s*[\\\"\\']\\$(.|\\s)*?[\\\"\\'];/g,\n\n\tFUNC_COMMENT_LINE: /\\/\\/.*?\\n/g,\n\n\tFUNC_COMMENT_STAR: /\\/\\*(.|\\s)*?\\*\\//g,\n\n\tFUNC_ANNOTATION: \"$\",\n\n\tPROTO_FUNC_PROPS_REGEXP: /\\w+\\s*\\$\\w+\\s*=(.|\\s)*?;/g,\n\n\tMETA_PROPS: [\"id\", \"order\", \"init\", \"destroy\", \"factoryBean\",\n\t\t\"factoryMethod\", \"scope\", \"async\", \"abstract\", \"parent\",\n\t\t\"lazy\", \"factoryArgs\", \"proxy\", \"aop\", \"mid\", \"table\",\n\t\t\"cid\", \"constraint\", \"prefix\"\n\t],\n\n\tAOP_META_PROPS: [\"pointcut\", \"advice\", \"order\", \"runtime\"],\n\n\tMETA_AOP: \"aop\",\n\n\tMETA_ID: \"id\",\n\n\tMETA_AOP_ADVICE: \"advice\",\n\n\tFILTER_BUILTIN: \"builtin\",\n\tFILTER_MODEL: \"model\",\n\tFILTER_BUILTIN_METHOD: \"filter\",\n\n\tCONSTRAINT_ANNOTATION: \"$\",\n\tCONSTRAINT_SPLIT: \";\",\n\tCONSTRAINT_METHOD: \"validate\",\n\n\tMODEL_ATTRIBUTES: [\"type\", \"primary\", \"default\", \"ref\", \"prefix\"],\n\tMODEL_ATTRIBUTE_PRIMARY: \"primary\",\n\tMODEL_ATTRIBUTE_BALANCE: \"balance\",\n\tMODEL_ATTRIBUTE_TYPE_ARRAY: \"Array\",\n\tMODEL_ATTRIBUTE_TYPE_OBJECT: \"Object\",\n\tMODEL_FILTER_BEFORE: 'before',\n\tMODEL_FILTER_AFTER: 'after',\n\n\tBEAN_SPECIAL_MODEL: \"_$model\",\n\tBEAN_SPECIAL_CONSTRAINT: \"_$constraint\",\n\n\tTYPE_NUMBER: \"Number\",\n\n\tDEFINE_GETTER_PREFIX: \"__\"\n}","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/beans/support/beanDefinitionVisitor.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat BeanDefinitionVisitor\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>\n * MIT Licensed\n */\nvar logger = require('pomelo-logger').getLogger('bearcat', 'BeanDefinitionVisitor');\nvar Constant = require('../../util/constant');\nvar Utils = require('../../util/utils');\n\n/**\n * BeanDefinitionVisitor constructor function.\n *\n * @api public\n */\nvar BeanDefinitionVisitor = function(valueResolver) {\n\tthis.valueResolver = valueResolver;\n}\n\n/**\n * BeanDefinitionVisitor set valueResolver.\n *\n * @param  {Object} valueResolver\n * @api public\n */\nBeanDefinitionVisitor.prototype.setValueResolver = function(valueResolver) {\n\tthis.valueResolver = valueResolver;\n}\n\n/**\n * BeanDefinitionVisitor get valueResolver.\n *\n * @return  {Object} valueResolver\n * @api public\n */\nBeanDefinitionVisitor.prototype.getValueResolver = function() {\n\treturn this.valueResolver;\n}\n\n/**\n * BeanDefinitionVisitor resolve string value.\n *\n * @param  {String} strVal string value\n * @api public\n */\nBeanDefinitionVisitor.prototype.resolveStringValue = function(strVal) {\n\tif (!this.valueResolver) {\n\t\tlogger.error('No StringValueResolver specified');\n\t\treturn;\n\t}\n\n\tvar resolvedValue = this.getValueResolver().resolveStringValue(strVal);\n\n\treturn resolvedValue;\n}\n\n/**\n * BeanDefinitionVisitor visit beanDefinition.\n *\n * @param  {Object} beanDefinition\n * @api public\n */\nBeanDefinitionVisitor.prototype.visitBeanDefinition = function(beanDefinition) {\n\tthis.visitParentName(beanDefinition);\n\tthis.visitPropertyValues(beanDefinition);\n\tthis.visitArgumentsValues(beanDefinition);\n}\n\n/**\n * BeanDefinitionVisitor visit parentName in beanDefinition.\n *\n * @param  {Object} beanDefinition\n * @api private\n */\nBeanDefinitionVisitor.prototype.visitParentName = function(beanDefinition) {\n\tvar parentName = beanDefinition.getParentName();\n\n\tif (Utils.isNotNull(parentName)) {\n\t\tvar resolvedName = this.resolveStringValue(parentName);\n\t\tif (parentName !== resolvedName && Utils.isNotNull(resolvedName)) {\n\t\t\tbeanDefinition.setParentName(resolvedName);\n\t\t}\n\t}\n}\n\n/**\n * BeanDefinitionVisitor visit properties values in beanDefinition.\n *\n * @param  {Object} beanDefinition\n * @api private\n */\nBeanDefinitionVisitor.prototype.visitPropertyValues = function(beanDefinition) {\n\tvar props = beanDefinition.getProps();\n\tfor (var i = 0; i < props.length; i++) {\n\t\tvar wbean = props[i];\n\t\tif (wbean.getDependType() === Constant.DEPEND_TYPE_VALUE) {\n\t\t\tvar value = wbean.getValue();\n\t\t\tvar resolvedValue = this.resolveStringValue(value);\n\t\t\tif (value !== resolvedValue && Utils.isNotNull(resolvedValue)) {\n\t\t\t\twbean.setValue(resolvedValue);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * BeanDefinitionVisitor visit argument values in beanDefinition.\n *\n * @param  {Object} beanDefinition\n * @api private\n */\nBeanDefinitionVisitor.prototype.visitArgumentsValues = function(beanDefinition) {\n\tvar args = beanDefinition.getArgs();\n\tfor (var i = 0; i < args.length; i++) {\n\t\tvar wbean = args[i];\n\t\tif (wbean.getDependType() === Constant.DEPEND_TYPE_VALUE) {\n\t\t\tvar value = wbean.getValue();\n\t\t\tvar resolvedValue = this.resolveStringValue(value);\n\t\t\tif (value !== resolvedValue && Utils.isNotNull(resolvedValue)) {\n\t\t\t\twbean.setValue(resolvedValue);\n\t\t\t}\n\t\t}\n\t}\n}\n\nmodule.exports = BeanDefinitionVisitor;","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/beans/support/placeHolderResolver.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat PlaceHolderResolver\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>\n * MIT Licensed\n */\nvar Utils = require('../../util/utils');\n\nvar DEFAULT_PLACEHOLDER_PREFIX = \"${\";\nvar DEFAULT_PLACEHOLDER_SUFFIX = \"}\";\nvar DEFAULT_VALUE_SEPARATOR = \":\";\n\n/**\n * PlaceHolderResolver constructor function.\n *\n * @param  {Array} properties\n * @api public\n */\nvar PlaceHolderResolver = function(properties) {\n\tthis.placeholderPrefix = DEFAULT_PLACEHOLDER_PREFIX;\n\tthis.placeholderSuffix = DEFAULT_PLACEHOLDER_SUFFIX;\n\tthis.valueSeparator = DEFAULT_VALUE_SEPARATOR;\n\tthis.properties = properties;\n}\n\n/**\n * PlaceHolderResolver resolve string value.\n *\n * @param  {String} strVal string value\n * @api public\n */\nPlaceHolderResolver.prototype.resolveStringValue = function(strVal) {\n\tif (!Utils.checkString(strVal)) {\n\t\treturn null;\n\t}\n\n\tvar resolvedValue = this.doReplace(strVal);\n\n\tif (!Utils.isNotNull(resolvedValue)) {\n\t\tresolvedValue = strVal;\n\t}\n\n\treturn resolvedValue;\n}\n\n/**\n * PlaceHolderResolver set properties.\n *\n * @param  {Array} properties\n * @api public\n */\nPlaceHolderResolver.prototype.setProperties = function(properties) {\n\tthis.properties = properties;\n}\n\n/**\n * PlaceHolderResolver get properties.\n *\n * @return  {Array} properties\n * @api public\n */\nPlaceHolderResolver.prototype.getProperties = function() {\n\treturn this.properties;\n}\n\n/**\n * PlaceHolderResolver replace string value.\n *\n * @param  {String} strVal string value\n * @api private\n */\nPlaceHolderResolver.prototype.doReplace = function(strVal) {\n\tvar properties = this.getProperties();\n\tif (!strVal || !properties) {\n\t\treturn null;\n\t}\n\n\tvar ptn = /\\$\\{(.*?)\\}/g;\n\tvar m, placeHolder, res = '',\n\t\tlastIndex = 0,\n\t\thead;\n\tvar flag = true;\n\tvar count = 0;\n\twhile ((m = ptn.exec(strVal))) {\n\t\tplaceHolder = m[1];\n\n\t\thead = strVal.substring(lastIndex, m.index);\n\t\tif (head.length) {\n\t\t\tres += head;\n\t\t}\n\t\tlastIndex = ptn.lastIndex;\n\t\tif (count == 0 && !head.length) {\n\t\t\tres = properties[placeHolder];\n\t\t} else {\n\t\t\tres += properties[placeHolder];\n\t\t}\n\t\tflag = false;\n\t}\n\n\tif (lastIndex < strVal.length) {\n\t\tres += strVal.substring(lastIndex);\n\t}\n\n\tif (flag) {\n\t\treturn null;\n\t}\n\treturn res;\n}\n\nmodule.exports = PlaceHolderResolver;","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/aop/autoproxy/autoProxyCreator.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat AutoProxyCreator\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>\n * MIT Licensed\n */\n\nvar ProxyFactory = require('../framework/proxyFactory');\nvar TargetSource = require('../targetSource');\nvar AopUtil = require('../../util/aopUtil');\nvar Utils = require('../../util/utils');\n\n/**\n * AutoProxyCreator constructor function.\n * it is a beanPostProcessor\n * @api public\n */\nvar AutoProxyCreator = function() {\n\tthis.beanFactory = null;\n}\n\n/**\n * AutoProxyCreator beanPostProcessor before filter wrap bean if necessary.\n *\n * @param  {Object} beanObject bean object\n * @param  {String} beanName\n * @return {Object} bean object\n * @api public\n */\nAutoProxyCreator.prototype.before = function(beanObject, beanName) {\n\treturn beanObject;\n}\n\n/**\n * AutoProxyCreator beanPostProcessor after filter wrap bean if necessary.\n * it may return target proxy object if necessary\n *\n * @param  {Object} beanObject bean object\n * @param  {String} beanName\n * @return {Object} bean object\n * @api public\n */\nAutoProxyCreator.prototype.after = function(beanObject, beanName) {\n\treturn this.wrapIfNecessary(beanObject, beanName);\n}\n\n/**\n * AutoProxyCreator set beanFactory.\n *\n * @param  {Object} beanFactory beanFactory object\n * @api public\n */\nAutoProxyCreator.prototype.setBeanFactory = function(beanFactory) {\n\tthis.beanFactory = beanFactory;\n}\n\n/**\n * AutoProxyCreator get beanFactory.\n *\n * @return  {Object} beanFactory object\n * @api public\n */\nAutoProxyCreator.prototype.getBeanFactory = function() {\n\treturn this.beanFactory;\n}\n\n/**\n * AutoProxyCreator wrap bean if necessary.\n *\n * @param  {Object} beanObject bean object\n * @param  {String} beanName\n * @return {Object} bean object\n * @api private\n */\nAutoProxyCreator.prototype.wrapIfNecessary = function(beanObject, beanName) {\n\tvar beanDefinition = this.beanFactory.getBeanDefinition(beanName);\n\t// class do not need to be proxied\n\tif (!beanDefinition.needProxy()) {\n\t\treturn beanObject;\n\t}\n\n\t// aspect beanObject do not need to proxy\n\tif (beanDefinition.isAspect()) {\n\t\treturn beanObject;\n\t}\n\n\tvar advisors = this.getAdvisorsForBean(beanObject, beanName);\n\n\tif (Utils.checkArray(advisors) && advisors.length) {\n\t\tvar proxy = this.createProxy(beanObject, beanName, advisors, new TargetSource(beanName, beanObject));\n\t\treturn proxy;\n\t}\n\n\treturn beanObject;\n}\n\n/**\n * AutoProxyCreator create proxy object with specific advisors and targetSource.\n *\n * @param  {Object} beanObject bean object\n * @param  {String} beanName\n * @param  {Array}  advisors advisors list\n * @param  {Object} targetSource targetSource object\n * @return {Object} bean proxy object\n * @api private\n */\nAutoProxyCreator.prototype.createProxy = function(beanObject, beanName, advisors, targetSource) {\n\tvar proxyFactory = new ProxyFactory();\n\tproxyFactory.setBeanFactory(this.getBeanFactory());\n\tproxyFactory.setTarget(targetSource);\n\tvar methods = AopUtil.getMethodsFromObject(beanObject);\n\tproxyFactory.setInterfaces(methods);\n\n\tfor (var i = 0; i < advisors.length; i++) {\n\t\tproxyFactory.addAdvisor(advisors[i]);\n\t}\n\n\treturn proxyFactory.getProxy();\n}\n\n/**\n * AutoProxyCreator get advisors for bean.\n *\n * @param  {Object} beanObject bean object\n * @param  {String} beanName\n * @return {Array}  advisors list\n * @api private\n */\nAutoProxyCreator.prototype.getAdvisorsForBean = function(beanObject, beanName) {\n\treturn this.findEligibleAdvisors(beanObject, beanName);\n}\n\n/**\n * AutoProxyCreator find eligible advisors.\n *\n * @param  {Object} beanObject bean object\n * @param  {String} beanName\n * @return {Array}  advisors list\n * @api private\n */\nAutoProxyCreator.prototype.findEligibleAdvisors = function(beanObject, beanName) {\n\tvar candidateAdvisors = this.findCandidateAdvisors(beanObject, beanName);\n\treturn this.findAdvisorsThatCanApply(beanObject, beanName, candidateAdvisors);\n}\n\n/**\n * AutoProxyCreator find all candidate advisors for bean.\n *\n * @param  {Object} beanObject bean object\n * @param  {String} beanName\n * @return {Array}  advisors list\n * @api private\n */\nAutoProxyCreator.prototype.findCandidateAdvisors = function(beanObject, beanName) {\n\tvar aspects = this.beanFactory.getAspects();\n\n\tvar candidateAdvisors = [];\n\n\tfor (var i = 0; i < aspects.length; i++) {\n\t\tvar aspect = aspects[i];\n\t\tvar beanName = aspect.getBeanName();\n\t\tvar aspectBean = this.beanFactory.getBean(beanName);\n\t\taspect.setBean(aspectBean);\n\t\tvar advisors = aspect.getAdvisors();\n\t\tfor (var j = 0; j < advisors.length; j++) {\n\t\t\tvar advisor = advisors[j];\n\t\t\tadvisor.setBean(aspectBean);\n\t\t\tcandidateAdvisors.push(advisor);\n\t\t}\n\t}\n\n\treturn candidateAdvisors;\n}\n\n/**\n * AutoProxyCreator find all candidate advisors appliable for bean.\n *\n * @param  {Object} beanObject bean object\n * @param  {String} beanName\n * @param  {Array}  candidateAdvisors\n * @return {Array}  advisors list\n * @api private\n */\nAutoProxyCreator.prototype.findAdvisorsThatCanApply = function(beanObject, beanName, candidateAdvisors) {\n\tvar advisors = [];\n\n\tfor (var i = 0; i < candidateAdvisors.length; i++) {\n\t\tvar advisor = candidateAdvisors[i];\n\t\tif (this.canApply(advisor, beanObject, beanName)) {\n\t\t\tadvisors.push(advisor);\n\t\t}\n\t}\n\n\tadvisors = AopUtil.sortAdvisorsByOrder(advisors);\n\n\treturn advisors;\n}\n\n/**\n * AutoProxyCreator check whether an advisor can be applied to the specific bean.\n *\n * @param  {Object}  advisor\n * @param  {Object}  beanObject\n * @param  {String}  beanName\n * @return {Boolean} true|false\n * @api private\n */\nAutoProxyCreator.prototype.canApply = function(advisor, beanObject, beanName) {\n\tvar methods = AopUtil.getMethodsFromObject(beanObject);\n\n\tvar pointcut = advisor.getPointcut();\n\n\tfor (var i = 0; i < methods.length; i++) {\n\t\tvar targetMethod = beanName + '.' + methods[i];\n\n\t\tif (pointcut.match(targetMethod)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\nmodule.exports = AutoProxyCreator;","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/aop/framework/proxyFactory.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat DynamicAopProxy\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>\n * MIT Licensed\n */\n\nvar RequireUtil = require('../../util/requireUtil');\nvar DynamicAopProxy = require('./dynamicAopProxy');\nvar AdvisedSupport = require('./advisedSupport');\nvar Utils = require('../../util/utils');\nvar Util = RequireUtil.requireUtil();\n\n/**\n * ProxyFactory constructor function.\n *\n * @param  {Object} target target object\n * @param  {Array}  interfaces proxy interfaces\n * @api public\n */\nvar ProxyFactory = function(target, interfaces) {\n\tthis.beanFactory = null;\n\tAdvisedSupport.call(this);\n\n\tif (target) {\n\t\tthis.setTarget(target);\n\t}\n\n\tif (Utils.checkArray(interfaces)) {\n\t\tthis.setInterfaces(interfaces);\n\t}\n}\n\nUtil.inherits(ProxyFactory, AdvisedSupport);\n\n/**\n * ProxyFactory get dynamic proxy.\n *\n * @return  {Object} dynamic proxy object\n * @api public\n */\nProxyFactory.prototype.getProxy = function() {\n\tvar beanFactory = this.getBeanFactory();\n\tvar proxyObject = new DynamicAopProxy(this);\n\treturn proxyObject;\n}\n\nmodule.exports = ProxyFactory;","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/aop/framework/dynamicAopProxy.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat DynamicAopProxy\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>\n * MIT Licensed\n */\n\nvar logger = require('pomelo-logger').getLogger('bearcat', 'DynamicAopProxy');\nvar Constant = require('../../util/constant');\nvar Utils = require('../../util/utils');\n\n/**\n * DynamicAopProxy constructor function.\n *\n * @param  {Object} advised advisedSupport object\n * @api public\n */\nvar DynamicAopProxy = function(advised) {\n\tthis.advised = advised;\n\tthis.dyInit();\n}\n\n/**\n * DynamicAopProxy init function.\n * it will add proxy interfaces to DynamicAopProxy prototype, and proxy to invoke function\n *\n * @api public\n */\nDynamicAopProxy.prototype.dyInit = function() {\n\tif (!this.advised) {\n\t\tlogger.error('DynamicAopProxy init error no advised');\n\t\treturn;\n\t}\n\n\tvar interfaces = this.advised.getInterfaces();\n\tvar self = this;\n\tfor (var i = 0; i < interfaces.length; i++) {\n\t\t(function(interface) {\n\t\t\tif (checkFuncName(interface)) {\n\t\t\t\tlogger.error('init error proxy method interface %j the same as DynamicAopProxy, rename this name to another.', interface)\n\t\t\t\treturn;\n\t\t\t};\n\n\t\t\tself[interface] = function() {\n\t\t\t\targuments = Array.prototype.slice.apply(arguments);\n\t\t\t\treturn self.dyInvoke(interface, arguments);\n\t\t\t}\n\t\t})(interfaces[i]);\n\t}\n}\n\n/**\n * DynamicAopProxy proxy invoke function.\n * all target proxy function invoke will delegate to this function\n *\n * @param  {String} method proxy method name\n * @param  {Array}  args proxy method invoke arguments\n *\n * @api private\n */\nDynamicAopProxy.prototype.dyInvoke = function(method, args) {\n\tvar self = this;\n\tvar invokeCb = args.pop();\n\tvar flag = false;\n\tif (!Utils.checkFunction(invokeCb)) {\n\t\t// aop target args last must be next function\n\t\t// if (invokeCb) {\n\t\targs.push(invokeCb);\n\t\t// }\n\t\tinvokeCb = function() {};\n\t\tflag = true;\n\t}\n\n\tvar targetSource = this.advised.getTargetSource();\n\tvar beanName = targetSource.getBeanName();\n\tvar target = targetSource.getTarget();\n\n\tvar adviseType = Constant.AOP_ADVICE_BEFORE;\n\tvar beforeAdvisors = this.advised.getInterceptionAdvice(method, beanName, adviseType);\n\n\tadviseType = Constant.AOP_ADVICE_AROUND;\n\tvar aroundAdvisors = this.advised.getInterceptionAdvice(method, beanName, adviseType);\n\n\tvar needAround = false;\n\tif (Utils.checkArray(aroundAdvisors) && aroundAdvisors.length) {\n\t\tneedAround = true;\n\t}\n\n\tadviseType = Constant.AOP_ADVICE_AFTER;\n\tvar afterAdvisors = this.advised.getInterceptionAdvice(method, beanName, adviseType);\n\n\tvar needAfter = false;\n\tif (Utils.checkArray(afterAdvisors) && afterAdvisors.length) {\n\t\tneedAfter = true;\n\t}\n\n\treturn this.doInvokeAdvisorsBefore(method, args, beforeAdvisors, function(err) {\n\t\tif (err) {\n\t\t\treturn invokeCb(err);\n\t\t}\n\n\t\tif (needAround) {\n\t\t\treturn self.doInvokeAdvisorsAround(target, method, args, aroundAdvisors, function() {\n\t\t\t\targuments = Array.prototype.slice.apply(arguments);\n\t\t\t\tinvokeCb.apply(null, arguments);\n\t\t\t\tself.doInvokeAdvisorsAfter(method, arguments, afterAdvisors, function() {});\n\t\t\t});\n\t\t} else {\n\t\t\tvar next = function() {\n\t\t\t\targuments = Array.prototype.slice.apply(arguments);\n\t\t\t\tinvokeCb.apply(null, arguments);\n\t\t\t\tself.doInvokeAdvisorsAfter(method, arguments, afterAdvisors, function() {});\n\t\t\t}\n\n\t\t\tif (!flag) {\n\t\t\t\targs.push(next);\n\t\t\t\treturn target[method].apply(target, args);\n\t\t\t} else {\n\t\t\t\tvar r = target[method].apply(target, args);\n\t\t\t\tif (needAfter) {\n\t\t\t\t\tself.doInvokeAdvisorsAfter(method, r, afterAdvisors, function() {});\n\t\t\t\t}\n\n\t\t\t\treturn r;\n\t\t\t}\n\t\t}\n\t});\n}\n\n/**\n * DynamicAopProxy do invoke before advisors chain.\n *\n * @param  {String}   method proxy method name\n * @param  {Array}    args proxy method invoke arguments\n * @param  {Object}   advisors target advisors\n * @param  {Function} cb callback function\n *\n * @api private\n */\nDynamicAopProxy.prototype.doInvokeAdvisorsBefore = function(method, args, advisors, cb) {\n\tvar index = 0;\n\n\targs = Array.prototype.slice.apply(args);\n\n\tif (!advisors || !Utils.checkArray(advisors) || !advisors.length) {\n\t\treturn cb();\n\t}\n\n\tvar next = function(err) {\n\t\tif (err || index >= advisors.length) {\n\t\t\treturn cb(err);\n\t\t}\n\n\t\tvar advisor = advisors[index++];\n\t\tvar advise = advisor.getAdvice();\n\t\tvar aspectBean = advisor.getBean();\n\n\t\tvar _next = function(err) {\n\t\t\tnext(err);\n\t\t};\n\n\t\tif (advisor.isRuntime()) {\n\t\t\targs.push(_next);\n\t\t\taspectBean[advise].apply(aspectBean, args);\n\t\t} else {\n\t\t\taspectBean[advise](_next);\n\t\t}\n\t}\n\n\tnext();\n}\n\n/**\n * DynamicAopProxy do invoke around advisors chain.\n *\n * @param  {Object}   target target object\n * @param  {String}   method proxy method name\n * @param  {Array}    args proxy method invoke arguments\n * @param  {Object}   advisors target advisors\n * @param  {Function} cb callback function\n *\n * @api private\n */\nDynamicAopProxy.prototype.doInvokeAdvisorsAround = function(target, method, args, advisors, cb) {\n\tvar advisor = advisors[0];\n\tvar advise = advisor.getAdvice();\n\tvar aspectBean = advisor.getBean();\n\n\t// if (Utils.checkObject(args)) {\n\t// \targs = Array.prototype.slice.apply(args);\n\t// }\n\n\tif (advisor.isRuntime()) {\n\t\targs.unshift(method);\n\t\targs.unshift(target);\n\t\targs.push(cb);\n\t\treturn aspectBean[advise].apply(aspectBean, args);\n\t} else {\n\t\treturn aspectBean[advise](target, method, cb);\n\t}\n}\n\n/**\n * DynamicAopProxy do invoke after advisors chain.\n *\n * @param  {String}   method proxy method name\n * @param  {Array}    args proxy method invoke arguments\n * @param  {Object}   advisors target advisors\n * @param  {Function} cb callback function\n *\n * @api private\n */\nDynamicAopProxy.prototype.doInvokeAdvisorsAfter = function(method, args, advisors, cb) {\n\tvar index = 0;\n\n\tif (!advisors || !Utils.checkArray(advisors) || !advisors.length) {\n\t\treturn cb();\n\t}\n\n\t// if (Utils.checkObject(args)) {\n\t// \targs = Array.prototype.slice.apply(args);\n\t// } else \n\tif (!Utils.checkArray(args)) {\n\t\targs = [args];\n\t}\n\n\tvar next = function(err) {\n\t\tif (err || index >= advisors.length) {\n\t\t\treturn cb(err);\n\t\t}\n\n\t\tvar advisor = advisors[index++];\n\t\tvar advise = advisor.getAdvice();\n\t\tvar aspectBean = advisor.getBean();\n\n\t\tvar _next = function(err) {\n\t\t\tnext(err);\n\t\t};\n\n\t\targs.push(_next);\n\t\taspectBean[advise].apply(aspectBean, args);\n\t}\n\n\tnext();\n}\n\nvar names = [\"dyInit\", \"dyInvoke\", \"doInvokeAdvisorsBefore\",\n\t\"doInvokeAdvisorsAround\", \"doInvokeAdvisorsAfter\"\n];\n\nvar checkFuncName = function(name) {\n\tfor (var i = 0; i < names.length; i++) {\n\t\tif (name === names[i]) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\nmodule.exports = DynamicAopProxy;","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/aop/framework/advisedSupport.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat AdvisedSupport\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>\n * MIT Licensed\n */\nvar Utils = require('../../util/utils');\n\n/**\n * AdvisedSupport constructor function.\n * @api public\n */\nvar AdvisedSupport = function() {\n\tthis.advisors = [];\n\tthis.interfaces = [];\n\tthis.methodCache = {};\n\tthis.beanFactory = null;\n\tthis.targetSource = null;\n\tthis.advisorChainFactory = null;\n}\n\n/**\n * set target.\n *\n * @param  {Object} target target object\n * @api public\n */\nAdvisedSupport.prototype.setTarget = function(target) {\n\tthis.setTargetSource(target);\n}\n\n/**\n * set target source.\n *\n * @param  {Object} targetSource object\n * @api public\n */\nAdvisedSupport.prototype.setTargetSource = function(targetSource) {\n\tthis.targetSource = targetSource;\n}\n\n/**\n * get target source.\n *\n * @return  {Object} targetSource object\n * @api public\n */\nAdvisedSupport.prototype.getTargetSource = function() {\n\treturn this.targetSource;\n}\n\n/**\n * set proxy interfaces.\n *\n * @param  {Array} interfaces proxy interfaces\n * @api public\n */\nAdvisedSupport.prototype.setInterfaces = function(interfaces) {\n\tfor (var i = 0; i < interfaces.length; i++) {\n\t\tthis.addInterface(interfaces[i]);\n\t}\n}\n\n/**\n * add proxy interface.\n *\n * @param  {String} interface proxy interface\n * @api public\n */\nAdvisedSupport.prototype.addInterface = function(interface) {\n\tthis.interfaces.push(interface);\n}\n\n/**\n * get proxy interfaces.\n *\n * @return  {Array} proxy interfaces\n * @api public\n */\nAdvisedSupport.prototype.getInterfaces = function() {\n\treturn this.interfaces;\n}\n\n/**\n * get advisors.\n *\n * @return  {Array} advisors\n * @api public\n */\nAdvisedSupport.prototype.getAdvisors = function() {\n\treturn this.advisors;\n}\n\n/**\n * add advisor.\n *\n * @param  {Object} advisor\n * @api public\n */\nAdvisedSupport.prototype.addAdvisor = function(advisor) {\n\tthis.advisors.push(advisor);\n}\n\n/**\n * get beanFactory.\n *\n * @return  {Object} beanFactory object\n * @api public\n */\nAdvisedSupport.prototype.getBeanFactory = function() {\n\treturn this.beanFactory;\n}\n\n/**\n * set beanFactory.\n *\n * @param  {Object} beanFactory beanFactory object\n * @api public\n */\nAdvisedSupport.prototype.setBeanFactory = function(beanFactory) {\n\tthis.beanFactory = beanFactory;\n}\n\n/**\n * get interception advisors for bean.\n *\n * @param   {String} method\n * @param   {String} beanName\n * @param   {String} adviceType\n * @return  {Object} interception advisors\n * @api public\n */\nAdvisedSupport.prototype.getInterceptionAdvice = function(method, beanName, adviceType) {\n\tvar cacheKey = method + \"_\" + adviceType;\n\tvar cached = this.methodCache[cacheKey];\n\n\tif (!cached) {\n\t\tcached = this.doGetInterceptionAdvice(method, beanName, adviceType);\n\t\tthis.methodCache[cacheKey] = cached;\n\t}\n\n\treturn cached;\n}\n\n/**\n * do get interception advisors for bean.\n *\n * @param   {String} method\n * @param   {String} beanName\n * @param   {String} adviceType\n * @return  {Object} interception advisors\n * @api private\n */\nAdvisedSupport.prototype.doGetInterceptionAdvice = function(method, beanName, adviceType) {\n\tvar interceptorList = [];\n\tvar advisors = this.getAdvisors();\n\tvar targetMethod = beanName + '.' + method;\n\n\tfor (var i = 0; i < advisors.length; i++) {\n\t\tvar advisor = advisors[i];\n\t\tvar pointcut = advisor.getPointcut();\n\t\tif (pointcut.getAdviceType() !== adviceType) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (pointcut.match(targetMethod)) {\n\t\t\tinterceptorList.push(advisor);\n\t\t}\n\t}\n\n\tinterceptorList.sort(Utils.compareByOrder);\n\n\treturn interceptorList;\n}\n\nmodule.exports = AdvisedSupport;","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/aop/targetSource.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat TargetSource\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>\n * MIT Licensed\n */\n\n/**\n * TargetSource constructor function.\n *\n * @param  {String} beanName\n * @param  {Object} target target object\n * @api public\n */\nvar TargetSource = function(beanName, target) {\n\tthis.beanName = beanName;\n\tthis.target = target;\n}\n\n/**\n * TargetSource set beanName.\n *\n * @param  {String} beanName\n * @api public\n */\nTargetSource.prototype.setBeanName = function(beanName) {\n\tthis.beanName = beanName;\n}\n\n/**\n * TargetSource get beanName.\n *\n * @return  {String} beanName\n * @api public\n */\nTargetSource.prototype.getBeanName = function() {\n\treturn this.beanName;\n}\n\n/**\n * TargetSource set target.\n *\n * @param  {Object} target target object\n * @api public\n */\nTargetSource.prototype.setTarget = function(target) {\n\tthis.target = target;\n}\n\n/**\n * TargetSource get target.\n *\n * @return  {Object} target object\n * @api public\n */\nTargetSource.prototype.getTarget = function() {\n\treturn this.target;\n}\n\nTargetSource.prototype.releaseTarget = function() {\n\n}\n\nmodule.exports = TargetSource;","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/util/aopUtil.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat AopUtil\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>\n * MIT Licensed\n */\n\nvar Advisor = require('../aop/advisor');\nvar Aspect = require('../aop/aspect');\nvar Utils = require('./utils');\nvar AopUtil = {};\n\n/**\n * AopUtil build aspects from metaList and beanDefinition.\n *\n * @param   {Array}  metaList\n * @param   {Object} beanDefinition\n * @param   {Array}  aspects\n * @api public\n */\nAopUtil.buildAspect = function(metaList, beanDefinition) {\n\tvar aspect = new Aspect();\n\tvar beanName = beanDefinition.getBeanName();\n\taspect.setBeanDefinition(beanDefinition);\n\taspect.setBeanName(beanName);\n\n\tfor (var i = 0; i < metaList.length; i++) {\n\t\tvar meta = metaList[i];\n\t\tvar pointcut = meta['pointcut'];\n\t\tvar advice = meta['advice'];\n\t\tvar order = meta['order'];\n\t\tvar runtime = meta['runtime'] || false;\n\n\t\tif (!pointcut || !advice) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tvar advisor = new Advisor();\n\t\tadvisor.setPointcut(pointcut);\n\t\tadvisor.setAdvice(advice);\n\t\tadvisor.setBeanName(beanName);\n\t\tadvisor.setOrder(order);\n\t\tadvisor.setRuntime(runtime);\n\t\tadvisor.parse();\n\n\t\taspect.addAdvisor(advisor);\n\t}\n\n\treturn aspect;\n}\n\n/**\n * AopUtil reflect methods from object.\n *\n * @param    {Object} object\n * @return   {Array}  method names\n * @api public\n */\nAopUtil.getMethodsFromObject = function(object) {\n\tvar proto = object;\n\tvar methods = [];\n\n\tfor (var key in proto) {\n\t\tvar method = proto[key];\n\t\tif (Utils.checkFunction(method)) {\n\t\t\tmethods.push(key);\n\t\t}\n\t}\n\n\treturn methods;\n}\n\n/**\n * AopUtil sort advisors by order.\n *\n * @param    {Array} advisors\n * @return   {Array} sorted advisors\n * @api public\n */\nAopUtil.sortAdvisorsByOrder = function(advisors) {\n\tadvisors.sort(Utils.compareByOrder);\n\n\treturn advisors;\n}\n\nmodule.exports = AopUtil;","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/aop/advisor.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat Advisor\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>\n * MIT Licensed\n */\n\nvar Pointcut = require('./pointcut');\n\n/**\n * Advisor constructor function.\n *\n * @api public\n */\nvar Advisor = function() {\n\tthis.pointcut = null;\n\tthis.beanName = null;\n\tthis.runtime = null;\n\tthis.advice = null;\n\tthis.order = null;\n\tthis.bean = null;\n}\n\n/**\n * Advisor set pointcut.\n *\n * @param  {Object} pointcut pointcut object\n * @api public\n */\nAdvisor.prototype.setPointcut = function(pointcut) {\n\tif (!pointcut) {\n\t\treturn;\n\t}\n\n\tvar p = new Pointcut();\n\tp.setExpression(pointcut);\n\n\tthis.pointcut = p;\n}\n\n/**\n * Advisor get pointcut.\n *\n * @return  {Object} pointcut object\n * @api public\n */\nAdvisor.prototype.getPointcut = function() {\n\treturn this.pointcut;\n}\n\n/**\n * Advisor set advice function name.\n *\n * @param  {String} advice advice function name\n * @api public\n */\nAdvisor.prototype.setAdvice = function(advice) {\n\tthis.advice = advice;\n}\n\n/**\n * Advisor get advice function name.\n *\n * @return  {String} advice function name\n * @api public\n */\nAdvisor.prototype.getAdvice = function() {\n\treturn this.advice;\n}\n\n/**\n * Advisor set bean name.\n *\n * @param  {String} beanName bean name\n * @api public\n */\nAdvisor.prototype.setBeanName = function(beanName) {\n\tthis.beanName = beanName;\n}\n\n/**\n * Advisor get bean name.\n *\n * @return  {String} bean name\n * @api public\n */\nAdvisor.prototype.getBeanName = function() {\n\treturn this.beanName;\n}\n\n/**\n * Advisor set aspect bean.\n *\n * @param  {Object} bean aspect bean\n * @api public\n */\nAdvisor.prototype.setBean = function(bean) {\n\tthis.bean = bean;\n}\n\n/**\n * Advisor get aspect bean.\n *\n * @return  {Object} aspect bean\n * @api public\n */\nAdvisor.prototype.getBean = function() {\n\treturn this.bean;\n}\n\n/**\n * Advisor set advisor chain order.\n *\n * @param  {Number} order order number\n * @api public\n */\nAdvisor.prototype.setOrder = function(order) {\n\tthis.order = order;\n}\n\n/**\n * Advisor get advisor chain order.\n *\n * @return  {Number} order number\n * @api public\n */\nAdvisor.prototype.getOrder = function() {\n\treturn this.order;\n}\n\n/**\n * Advisor set if advisor is runtime.\n *\n * @param  {Boolean} runtime runtime true|false\n * @api public\n */\nAdvisor.prototype.setRuntime = function(runtime) {\n\tthis.runtime = runtime;\n}\n\n/**\n * Advisor get if advisor is runtime.\n *\n * @return  {Boolean} runtime true|false\n * @api public\n */\nAdvisor.prototype.isRuntime = function() {\n\treturn this.runtime;\n}\n\n/**\n * Advisor do parse pointcut,advice.\n *\n * @api public\n */\nAdvisor.prototype.parse = function() {\n\tthis.pointcut.parse();\n}\n\nmodule.exports = Advisor;","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/aop/pointcut.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat Pointcut\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>\n * MIT Licensed\n */\n\nvar Utils = require('../util/utils');\n\n/**\n * Pointcut constructor function.\n *\n * @api public\n */\nvar Pointcut = function() {\n\tthis.expression = null;\n\tthis.adviceType = null;\n\tthis.targetExpression = null;\n}\n\n/**\n * Pointcut set expression.\n *\n * @param  {String} expression pointcut expression\n * @api public\n */\nPointcut.prototype.setExpression = function(expression) {\n\tthis.expression = expression;\n}\n\n/**\n * Pointcut get expression.\n *\n * @param  {String} pointcut expression\n * @api public\n */\nPointcut.prototype.getExpression = function() {\n\treturn this.expression;\n}\n\n/**\n * Pointcut set adviceType: before, after, around.\n *\n * @param  {String} adviceType\n * @api public\n */\nPointcut.prototype.setAdviceType = function(adviceType) {\n\tthis.adviceType = adviceType;\n}\n\n/**\n * Pointcut get adviceType: before, after, around.\n *\n * @param  {String} adviceType\n * @api public\n */\nPointcut.prototype.getAdviceType = function() {\n\treturn this.adviceType;\n}\n\n/**\n * Pointcut set target pointcut expression.\n *\n * @param  {String} target pointcut expression\n * @api public\n */\nPointcut.prototype.setTargetExpression = function(targetExpression) {\n\tthis.targetExpression = new RegExp(targetExpression);\n}\n\n/**\n * Pointcut get target pointcut expression.\n *\n * @return  {String} target pointcut expression\n * @api public\n */\nPointcut.prototype.getTargetExpression = function() {\n\treturn this.targetExpression;\n}\n\n/**\n * Pointcut parse pointcut expression.\n *\n * @api public\n */\nPointcut.prototype.parse = function() {\n\tvar expression = this.getExpression();\n\tif (!expression) {\n\t\treturn;\n\t}\n\n\tvar r = expression.split(':');\n\tif (Utils.checkArray(r) && r.length === 2) {\n\t\tthis.setAdviceType(r[0]);\n\t\tthis.setTargetExpression(r[1]);\n\t}\n}\n\n/**\n * Pointcut check whether pointcut match targetMethod.\n *\n * @param  {String} targetMethod target method name\n * @api public\n */\nPointcut.prototype.match = function(targetMethod) {\n\tvar targetExpression = this.getTargetExpression();\n\n\treturn targetMethod.match(targetExpression);\n}\n\nmodule.exports = Pointcut;","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/aop/aspect.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat Aspect\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>\n * MIT Licensed\n */\n\n/**\n * Aspect constructor function.\n *\n * @api public\n */\nvar Aspect = function() {\n\tthis.advisors = [];\n\tthis.beanName = null;\n\tthis.beanDefinition = null;\n\tthis.bean = null;\n}\n\n/**\n * Aspect add advisor.\n *\n * @param  {Object} advisor advisor object\n * @api public\n */\nAspect.prototype.addAdvisor = function(advisor) {\n\tthis.advisors.push(advisor);\n}\n\n/**\n * Aspect get advisors.\n *\n * @return  {Array} advisors\n * @api public\n */\nAspect.prototype.getAdvisors = function() {\n\treturn this.advisors;\n}\n\n/**\n * Aspect set beanDefinition.\n *\n * @param  {Object} beanDefinition beanDefinition object\n * @api public\n */\nAspect.prototype.setBeanDefinition = function(beanDefinition) {\n\tthis.beanDefinition = beanDefinition;\n}\n\n/**\n * Aspect get beanDefinition.\n *\n * @return  {Object} beanDefinition object\n * @api public\n */\nAspect.prototype.getBeanDefinition = function() {\n\treturn this.beanDefinition;\n}\n\n/**\n * Aspect set beanName.\n *\n * @param  {String} beanName\n * @api public\n */\nAspect.prototype.setBeanName = function(beanName) {\n\tthis.beanName = beanName;\n}\n\n/**\n * Aspect get beanName.\n *\n * @return  {String} beanName\n * @api public\n */\nAspect.prototype.getBeanName = function() {\n\treturn this.beanName;\n}\n\n/**\n * Aspect set aspect bean.\n *\n * @param  {Object} bean aspect bean object\n * @api public\n */\nAspect.prototype.setBean = function(bean) {\n\tthis.bean = bean;\n}\n\n/**\n * Aspect get aspect bean.\n *\n * @return  {Object} aspect bean object\n * @api public\n */\nAspect.prototype.getBean = function() {\n\treturn this.bean;\n}\n\nmodule.exports = Aspect;","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/model/modelKeyMapResolver.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat ModelKeyMapResolver\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>\n * MIT Licensed\n */\n\nvar logger = require('pomelo-logger').getLogger('bearcat', 'ModelKeyMapResolver');\n\n/**\n * ModelKeyMapResolver constructor function.\n *\n * @api public\n */\nvar ModelKeyMapResolver = function() {\n\n}\n\n/**\n * ModelKeyMapResolver post process beanFactory.\n *\n * @param  {Object} beanFactory\n * @api public\n */\nModelKeyMapResolver.prototype.postProcessBeanFactory = function(beanFactory) {\n\tthis.processModelKeyMap(beanFactory);\n}\n\n/**\n * ModelKeyMapResolver process model key map.\n *\n * @param  {Object} beanFactory\n * @api public\n */\nModelKeyMapResolver.prototype.processModelKeyMap = function(beanFactory) {\n\tvar models = beanFactory.getModelDefinitions();\n\n\tfor (var modelId in models) {\n\t\tvar modelDefinition = models[modelId];\n\t\tvar modelKeyMap = {};\n\t\tthis.processModelDefinition(beanFactory, modelDefinition, modelKeyMap, {});\n\t\tmodelDefinition.setModelKeyMap(modelKeyMap);\n\t}\n}\n\n/**\n * ModelKeyMapResolver post model definition.\n *\n * @param  {Object} beanFactory\n * @param  {Object} modelDefinition\n * @param  {Object} modelKeyMap\n * @param  {Object} option\n * @api public\n */\nModelKeyMapResolver.prototype.processModelDefinition = function(beanFactory, modelDefinition, modelKeyMap, option) {\n\tvar fields = modelDefinition.getFields();\n\n\tvar modelId = modelDefinition.getMid();\n\tvar prefix = modelDefinition.getPrefix();\n\tvar optionPrefix = option['prefix'] || prefix;\n\tvar parentId = option['pid'];\n\tvar parentType = option['ptype'];\n\tvar parentField = option['pfield'];\n\n\tfor (var fieldName in fields) {\n\t\tvar field = fields[fieldName];\n\t\tvar fieldName = field.getName();\n\t\tvar modelRefId = field.getRef();\n\t\tvar fieldPrefix = field.getPrefix();\n\t\tvar fieldType = field.getType();\n\n\t\tvar modelKey = \"\";\n\t\tif (optionPrefix) {\n\t\t\tmodelKey += optionPrefix;\n\t\t}\n\n\t\tmodelKey = modelKey + fieldName;\n\n\t\tif (modelRefId) {\n\t\t\tvar modelRefDefinition = beanFactory.getModelDefinition(modelRefId);\n\n\t\t\tif (!modelRefDefinition) {\n\t\t\t\tlogger.warn('model field ref id %s not exsit', modelRefId);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar option = {\n\t\t\t\tpid: modelId,\n\t\t\t\tptype: fieldType,\n\t\t\t\tpfield: fieldName\n\t\t\t};\n\n\t\t\tif (fieldPrefix) {\n\t\t\t\toption['prefix'] = fieldPrefix;\n\t\t\t}\n\n\t\t\tthis.processModelDefinition(beanFactory, modelRefDefinition, modelKeyMap, option);\n\t\t\tcontinue;\n\t\t}\n\n\t\tmodelKeyMap[modelKey] = {\n\t\t\tid: modelId,\n\t\t\tpid: parentId,\n\t\t\tptype: parentType,\n\t\t\tpfield: parentField,\n\t\t\tfieldName: fieldName,\n\t\t\ttype: fieldType\n\t\t};\n\t}\n}\n\nmodule.exports = ModelKeyMapResolver;","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/resource/asyncScriptLoader.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat AsyncScriptLoader\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>\n * MIT Licensed\n */\n\nvar logger = require('pomelo-logger').getLogger('bearcat', 'AsyncScriptLoader');\nvar BeanModule = require('../beans/support/beanModule');\nvar Path = require('../util/requireUtil').requirePath();\nvar ScriptUtil = require('../util/scriptUtil');\nvar Utils = require('../util/utils');\nvar cid = 1;\n\nvar Root;\n(function() {\n\tRoot = this;\n}());\n\n/**\n * AsyncScriptLoader constructor function.\n *\n * @api public\n */\nvar AsyncScriptLoader = function() {\n\tthis.cacheModules = {};\n\tthis.loaderDir = null;\n\tthis.applicationContext = null;\n}\n\n/**\n * AsyncScriptLoader get loaded beans list.\n *\n * @return  {Array}  loaded beans\n * @api public\n */\nAsyncScriptLoader.prototype.getLoadBeans = function() {\n\treturn this.loadBeans;\n}\n\n/**\n * AsyncScriptLoader load beans asynchronously.\n *\n * @param  {Array}     loaded beans ids\n * @param  {Function}  callback function\n * @api public\n */\nAsyncScriptLoader.prototype.load = function(ids, cb) {\n\tthis.loaderDir = ScriptUtil.getLoaderDir();\n\n\tvar uri = this.loaderDir + '_load_' + cid++;\n\tvar mod = this.get(uri, ids);\n\n\tmod.addEntry(mod);\n\tmod.setRemain(1);\n\n\tmod.callback = function() {\n\t\tif (Utils.checkFunction(cb)) {\n\t\t\tcb();\n\t\t}\n\n\t\tdelete mod.callback\n\t\tdelete mod.history\n\t\tdelete mod.remain\n\t\tdelete mod.entries;\n\t}\n\n\tmod.load();\n}\n\n/**\n * AsyncScriptLoader save load script with uri meta.\n *\n * @param  {String}  uri\n * @param  {Object}  bean meta\n * @api public\n */\nAsyncScriptLoader.prototype.save = function(uri, meta) {\n\tvar mod = this.get(uri)\n\n\t// Do NOT override already saved modules\n\tif (mod.status < BeanModule.STATUS.SAVED) {\n\t\tmod.id = meta.id || uri\n\t\tmod.dependencies = meta.deps || []\n\t\tmod.factory = meta.factory\n\t\tmod.status = BeanModule.STATUS.SAVED\n\t}\n}\n\n/**\n * AsyncScriptLoader register script with id, meta.\n *\n * @param  {String}  id\n * @param  {Object}  bean meta\n * @api public\n */\nAsyncScriptLoader.prototype.module = function(id, beanMeta) {\n\tvar deps = this.resolveDeps(beanMeta);\n\n\tvar meta = {\n\t\tid: id,\n\t\turi: this.resolve(id),\n\t\tdeps: deps\n\t};\n\n\tmeta.uri ? this.save(meta.uri, meta) :\n\t\t// Save information for \"saving\" work in the script onload event\n\t\tBeanModule.anonymousMeta = meta;\n}\n\n/**\n * AsyncScriptLoader resolve uri path with refUri.\n *\n * @param  {String}  id\n * @param  {String}  refUri\n * @return {String}  resolved path\n * @api public\n */\nAsyncScriptLoader.prototype.resolve = function(id, refUri) {\n\t// id path map\n\tvar path = this.getPathById(id);\n\tif (!path) {\n\t\tpath = id;\n\t\tlogger.warn('id: ' + id + ' can not be resolved, try run bearcat generate or use bearcat.module to register it');\n\t}\n\n\treturn path;\n}\n\n/**\n * AsyncScriptLoader resolve deps through bean meta.\n *\n * @param  {Object}  bean meta\n * @param  {Array}   resolved deps\n * @api public\n */\nAsyncScriptLoader.prototype.resolveDeps = function(beanMeta) {\n\tvar propsOn = beanMeta.props;\n\tif (!Utils.isNotNull(propsOn) || !propsOn) {\n\t\treturn;\n\t}\n\n\tvar deps = [];\n\n\tfor (var i = 0; i < propsOn.length; i++) {\n\t\tvar prop = propsOn[i];\n\t\tvar ref = prop['ref'];\n\n\t\tif (ref) {\n\t\t\t// do not load already registered beans\n\t\t\tif (this.applicationContext.getBeanDefinition(ref)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tdeps.push(ref);\n\t\t}\n\t}\n\n\treturn deps;\n}\n\n/**\n * AsyncScriptLoader get bean path through bean id.\n *\n * @param  {String}  id\n * @return {String}  bean path\n * @api public\n */\nAsyncScriptLoader.prototype.getPathById = function(id) {\n\tif (Root.__bearcatData__ && Root.__bearcatData__.idPaths) {\n\t\treturn Root.__bearcatData__.idPaths[id];\n\t}\n}\n\n/**\n * AsyncScriptLoader get script from cache or new.\n *\n * @param  {String}  uri\n * @param  {Array}   deps id\n * @return {Object}  module\n * @api public\n */\nAsyncScriptLoader.prototype.get = function(uri, deps) {\n\treturn this.cacheModules[uri] || (this.cacheModules[uri] = new BeanModule(uri, deps, this));\n}\n\n/**\n * AsyncScriptLoader set applicationContext reference.\n *\n * @param  {Object}  applicationContext\n * @api public\n */\nAsyncScriptLoader.prototype.setApplicationContext = function(applicationContext) {\n\tthis.applicationContext = applicationContext;\n}\n\nmodule.exports = AsyncScriptLoader;","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/beans/support/beanModule.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat BeanModule\n * modified from seajs module.js\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>, http://seajs.org\n * MIT Licensed\n */\n\nvar RequestUtil = require('../../util/requestUtil');\nvar Utils = require('../../util/utils');\n\nvar anonymousMeta;\n\nvar fetchingList = {};\nvar fetchedList = {};\nvar callbackList = {};\n\nvar STATUS = {\n\t// 0 - init\n\tINIT: 0,\n\t// 1 - The `module.uri` is being fetched\n\tFETCHING: 1,\n\t// 2 - The meta data has been saved to cachedMods\n\tSAVED: 2,\n\t// 3 - The `module.dependencies` are being loaded\n\tLOADING: 3,\n\t// 4 - The module are ready to execute\n\tLOADED: 4,\n\t// 5 - 404\n\tERROR: 5\n}\n\n/**\n * BeanModule constructor function.\n *\n * @param  {String}  uri\n * @param  {Array}   dependencies\n * @param  {Object}  loader reference\n * @api public\n */\nvar BeanModule = function(uri, deps, loader) {\n\tthis.uri = uri;\n\tthis.dependencies = deps || [];\n\tthis.deps = {};\n\tthis.remain = 0;\n\tthis.entries = [];\n\tthis.history = {};\n\tthis.loader = loader;\n\tthis.callback = null;\n\tthis.status = STATUS.INIT;\n}\n\n/**\n * BeanModule resolve dependencies uri.\n *\n * @api private\n */\nBeanModule.prototype.resolve = function() {\n\tvar mod = this\n\tvar ids = mod.dependencies\n\tvar uris = []\n\n\tvar loader = this.getLoader();\n\tvar len = ids.length;\n\tfor (var i = 0; i < len; i++) {\n\t\turis[i] = loader.resolve(ids[i], mod.uri);\n\t}\n\n\treturn uris\n}\n\n/**\n * BeanModule pass entry node into dependencies.\n *\n * @api private\n */\nBeanModule.prototype.pass = function() {\n\tvar mod = this\n\n\tvar len = mod.dependencies.length\n\n\t// mod.entries changes dynamiclly\n\tfor (var i = 0; i < mod.entries.length; i++) {\n\t\tvar entry = mod.entries[i];\n\n\t\tvar count = 0\n\t\tfor (var j = 0; j < len; j++) {\n\t\t\tvar m = mod.deps[mod.dependencies[j]]\n\t\t\t\t// If the module is unload and unused in the entry, pass entry to it\n\t\t\tif (m.status < STATUS.LOADED && !entry.history.hasOwnProperty(m.uri)) {\n\t\t\t\tentry.history[m.uri] = true\n\t\t\t\tcount++\n\t\t\t\tm.entries.push(entry)\n\t\t\t\tif (m.status === STATUS.LOADING) {\n\t\t\t\t\tm.pass()\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// If has passed the entry to it's dependencies, modify the entry's count and del it in the module\n\t\tif (count > 0) {\n\t\t\tentry.remain += count - 1\n\t\t\tmod.entries.shift()\n\t\t\ti--\n\t\t}\n\t}\n}\n\n/**\n * BeanModule load script files.\n *\n * @api private\n */\nBeanModule.prototype.load = function() {\n\tvar mod = this;\n\n\tif (this.status >= STATUS.LOADING) {\n\t\treturn;\n\t}\n\n\tvar loader = this.getLoader();\n\tmod.status = STATUS.LOADING;\n\n\tvar uris = mod.resolve();\n\n\tfor (var i = 0, len = uris.length; i < len; i++) {\n\t\tmod.deps[mod.dependencies[i]] = loader.get(uris[i])\n\t}\n\n\t// Pass entry to it's dependencies\n\tmod.pass();\n\n\t// If module has entries not be passed, call onload\n\tif (mod.entries.length) {\n\t\tmod.onload()\n\t\treturn\n\t}\n\n\t// Begin parallel loading\n\tvar requestCache = {};\n\tvar m;\n\n\tfor (i = 0; i < len; i++) {\n\t\tm = loader.get(uris[i]);\n\n\t\tif (m.status < STATUS.FETCHING) {\n\t\t\tm.fetch(requestCache)\n\t\t} else if (m.status === STATUS.SAVED) {\n\t\t\tm.load()\n\t\t}\n\t}\n\n\t// Send all requests at last to avoid cache bug in IE6-9. Issues#808\n\tfor (var requestUri in requestCache) {\n\t\tif (requestCache.hasOwnProperty(requestUri)) {\n\t\t\trequestCache[requestUri]()\n\t\t}\n\t}\n}\n\n/**\n * BeanModule onload script file event callback.\n *\n * @api private\n */\nBeanModule.prototype.onload = function() {\n\tvar mod = this\n\tmod.status = STATUS.LOADED\n\n\t// When sometimes cached in IE, exec will occur before onload, make sure len is an number\n\tvar len = (mod.entries || []).length;\n\tfor (var i = 0; i < len; i++) {\n\t\tvar entry = mod.entries[i]\n\t\tif (--entry.remain === 0) {\n\t\t\tentry.callback()\n\t\t}\n\t}\n\n\tdelete mod.entries\n}\n\n/**\n * BeanModule error callback.\n *\n * @api private\n */\nBeanModule.prototype.error = function() {\n\tvar mod = this\n\tmod.onload()\n\tmod.status = STATUS.ERROR\n}\n\n/**\n * BeanModule fetch script files using async <script> or from webworker.\n *\n * @param  {Object}  request cache\n * @api private\n */\nBeanModule.prototype.fetch = function(requestCache) {\n\tvar mod = this\n\tvar uri = mod.uri\n\tconsole.log('do fetch ' + uri);\n\n\tvar loader = this.getLoader();\n\tmod.status = STATUS.FETCHING\n\n\t// Emit `fetch` event for plugins such as combo plugin\n\tvar emitData = {\n\t\turi: uri\n\t}\n\n\tvar requestUri = emitData.requestUri || uri\n\n\t// Empty uri or have been fetched\n\tif (!requestUri || fetchedList.hasOwnProperty(requestUri)) {\n\t\tmod.load()\n\t\treturn\n\t}\n\n\tif (fetchingList.hasOwnProperty(requestUri)) {\n\t\tcallbackList[requestUri].push(mod)\n\t\treturn\n\t}\n\n\tfetchingList[requestUri] = true\n\tcallbackList[requestUri] = [mod]\n\n\t// Emit `request` event for plugins such as text plugin\n\temitData = {\n\t\turi: uri,\n\t\trequestUri: requestUri,\n\t\tonRequest: onRequest,\n\t\t// charset: Utils.checkFunction(data.charset) ? data.charset(requestUri) || 'utf-8' : data.charset,\n\t\t// crossorigin: Utils.checkFunction(data.crossorigin) ? data.crossorigin(requestUri) : data.crossorigin\n\t\tcharset: 'utf-8',\n\t\tcrossorigin: false\n\t}\n\n\tif (!emitData.requested) {\n\t\trequestCache ?\n\t\t\trequestCache[emitData.requestUri] = sendRequest :\n\t\t\tsendRequest()\n\t}\n\n\tfunction sendRequest() {\n\t\tRequestUtil.request(emitData.requestUri, emitData.onRequest, emitData.charset, emitData.crossorigin)\n\t}\n\n\tfunction onRequest(error) {\n\t\tdelete fetchingList[requestUri]\n\t\tfetchedList[requestUri] = true\n\n\t\t// Save meta data of anonymous module\n\t\tif (anonymousMeta) {\n\t\t\tloader.save(uri, anonymousMeta)\n\t\t\tanonymousMeta = null\n\t\t}\n\n\t\t// Call callbacks\n\t\tvar m, mods = callbackList[requestUri]\n\t\tdelete callbackList[requestUri]\n\t\twhile ((m = mods.shift())) {\n\t\t\t// When 404 occurs, the params error will be true\n\t\t\tif (error === true) {\n\t\t\t\tm.error()\n\t\t\t} else {\n\t\t\t\tm.load()\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * BeanModule add entry.\n *\n * @param  {Object}  entry node\n * @api public\n */\nBeanModule.prototype.addEntry = function(entry) {\n\tthis.entries.push(entry);\n}\n\n/**\n * BeanModule set remain number to be loaded.\n *\n * @param  {Number}  remain number\n * @api public\n */\nBeanModule.prototype.setRemain = function(remain) {\n\tthis.remain = remain;\n}\n\n/**\n * BeanModule set loader.\n *\n * @param  {Object}  loader reference\n * @api public\n */\nBeanModule.prototype.setLoader = function(loader) {\n\tthis.loader = loader;\n}\n\n/**\n * BeanModule get loader.\n *\n * @return  {Object}  loader reference\n * @api public\n */\nBeanModule.prototype.getLoader = function() {\n\treturn this.loader;\n}\n\nBeanModule.STATUS = STATUS;\nBeanModule.anonymousMeta = anonymousMeta;\n\nmodule.exports = BeanModule;","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/util/requestUtil.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat RequestUtil load async script\n * modified from seajs util-request.js\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>, http://seajs.org\n * MIT Licensed\n */\n\nvar Utils = require('./utils');\nvar RequestUtil = {};\nvar currentlyAddingScript;\n\n/**\n * RequestUtil request script file from url.\n *\n * @param  {String}   url\n * @param  {Function} callback function\n * @param  {String}   charset code\n * @param  {Boolean}  crossorigin or not\n * @api public\n */\nRequestUtil.request = function(url, callback, charset, crossorigin) {\n\tif (Utils.checkWebWorker()) {\n\t\treturn this.requestFromWebWorker(url, callback, charset, crossorigin);\n\t} else {\n\t\treturn this.requestFromAsyncScript(url, callback, charset, crossorigin);\n\t}\n}\n\n/**\n * RequestUtil request script file from web worker.\n *\n * @param  {String}   url\n * @param  {Function} callback function\n * @param  {String}   charset code\n * @param  {Boolean}  crossorigin or not\n * @api private\n */\nRequestUtil.requestFromWebWorker = function(url, callback, charset, crossorigin) {\n\t// Load with importScripts\n\tvar error;\n\ttry {\n\t\timportScripts(url);\n\t} catch (e) {\n\t\terror = e;\n\t}\n\tcallback(error);\n}\n\n/**\n * RequestUtil request script file from async <script> tag.\n *\n * @param  {String}   url\n * @param  {Function} callback function\n * @param  {String}   charset code\n * @param  {Boolean}  crossorigin or not\n * @api private\n */\nRequestUtil.requestFromAsyncScript = function(url, callback, charset, crossorigin) {\n\tvar doc = document;\n\tvar head = doc.head || doc.getElementsByTagName(\"head\")[0] || doc.documentElement;\n\tvar baseElement = head.getElementsByTagName(\"base\")[0];\n\n\tvar node = doc.createElement(\"script\");\n\n\tif (charset) {\n\t\tvar cs = Utils.checkFunction(charset) ? charset(url) : charset;\n\t\tif (cs) {\n\t\t\tnode.charset = cs;\n\t\t}\n\t}\n\n\t// crossorigin default value is `false`.\n\tvar cors = Utils.checkFunction(crossorigin) ? crossorigin(url) : crossorigin;\n\tif (cors !== false) {\n\t\tnode.crossorigin = cors;\n\t}\n\n\tthis.addOnload(head, node, callback, url);\n\n\tnode.async = true;\n\tnode.src = url;\n\n\t// For some cache cases in IE 6-8, the script executes IMMEDIATELY after\n\t// the end of the insert execution, so use `currentlyAddingScript` to\n\t// hold current node, for deriving url in `define` call\n\tcurrentlyAddingScript = node;\n\n\t// ref: #185 & http://dev.jquery.com/ticket/2709\n\tbaseElement ?\n\t\thead.insertBefore(node, baseElement) :\n\t\thead.appendChild(node);\n\n\tcurrentlyAddingScript = null;\n}\n\n/**\n * RequestUtil request script file from url.\n *\n * @param  {Object}   head node\n * @param  {Object}   node\n * @param  {Function} callback function\n * @param  {String}   url\n * @api private\n */\nRequestUtil.addOnload = function(head, node, callback, url) {\n\tvar supportOnload = \"onload\" in node;\n\n\tif (supportOnload) {\n\t\tnode.onload = onload\n\t\tnode.onerror = function() {\n\t\t\t// TODO\n\t\t\t// emit(\"error\", {\n\t\t\t// \turi: url,\n\t\t\t// \tnode: node\n\t\t\t// })\n\t\t\tonload(true)\n\t\t}\n\t} else {\n\t\tnode.onreadystatechange = function() {\n\t\t\tif (/loaded|complete/.test(node.readyState)) {\n\t\t\t\tonload()\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction onload(error) {\n\t\t// Ensure only run once and handle memory leak in IE\n\t\tnode.onload = node.onerror = node.onreadystatechange = null\n\n\t\t// Remove the script to reduce memory leak\n\t\t// if (!data.debug) {\n\t\tif (!false) {\n\t\t\thead.removeChild(node)\n\t\t}\n\n\t\t// Dereference the node\n\t\tnode = null\n\n\t\tcallback(error)\n\t}\n}\n\nmodule.exports = RequestUtil;","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/util/scriptUtil.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat ScriptUtil\n * modified from seajs util-path.js\n * The utilities for operating path such as id, uri\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>, http://seajs.org\n * MIT Licensed\n */\n\nvar ScriptUtil = {};\n\nvar DIRNAME_RE = /[^?#]*\\//\n\nvar DOT_RE = /\\/\\.\\//g\nvar DOUBLE_DOT_RE = /\\/[^/]+\\/\\.\\.\\//\nvar MULTI_SLASH_RE = /([^:/])\\/+\\//g\n\n/**\n * ScriptUtil get current loader directory.\n *\n * @api public\n */\nScriptUtil.getLoaderDir = function() {\n  if (typeof location === 'undefined') {\n    location = {};\n  }\n  // Extract the directory portion of a path\n  // dirname(\"a/b/c.js?t=123#xx/zz\") ==> \"a/b/\"\n  // ref: http://jsperf.com/regex-vs-split/2\n  function dirname(path) {\n    return path.match(DIRNAME_RE)[0]\n  }\n\n  // Canonicalize a path\n  // realpath(\"http://test.com/a//./b/../c\") ==> \"http://test.com/a/c\"\n  function realpath(path) {\n    // /a/b/./c/./d ==> /a/b/c/d\n    path = path.replace(DOT_RE, \"/\")\n\n    /*\n      @author wh1100717\n      a//b/c ==> a/b/c\n      a///b/////c ==> a/b/c\n      DOUBLE_DOT_RE matches a/b/c//../d path correctly only if replace // with / first\n    */\n    path = path.replace(MULTI_SLASH_RE, \"$1/\")\n\n    // a/b/c/../../d  ==>  a/b/../d  ==>  a/d\n    while (path.match(DOUBLE_DOT_RE)) {\n      path = path.replace(DOUBLE_DOT_RE, \"/\")\n    }\n\n    return path\n  }\n\n  // Normalize an id\n  // normalize(\"path/to/a\") ==> \"path/to/a.js\"\n  // NOTICE: substring is faster than negative slice and RegExp\n  function normalize(path) {\n    var last = path.length - 1\n    var lastC = path.charCodeAt(last)\n\n    // If the uri ends with `#`, just return it without '#'\n    if (lastC === 35 /* \"#\" */ ) {\n      return path.substring(0, last)\n    }\n\n    return (path.substring(last - 2) === \".js\" ||\n      path.indexOf(\"?\") > 0 ||\n      lastC === 47 /* \"/\" */ ) ? path : path + \".js\"\n  }\n\n\n  var PATHS_RE = /^([^/:]+)(\\/.+)$/\n  var VARS_RE = /{([^{]+)}/g\n\n  function parseAlias(id) {\n    var alias = data.alias\n    return alias && isString(alias[id]) ? alias[id] : id\n  }\n\n  function parsePaths(id) {\n    var paths = data.paths\n    var m\n\n    if (paths && (m = id.match(PATHS_RE)) && isString(paths[m[1]])) {\n      id = paths[m[1]] + m[2]\n    }\n\n    return id\n  }\n\n  function parseVars(id) {\n    var vars = data.vars\n\n    if (vars && id.indexOf(\"{\") > -1) {\n      id = id.replace(VARS_RE, function(m, key) {\n        return isString(vars[key]) ? vars[key] : m\n      })\n    }\n\n    return id\n  }\n\n  function parseMap(uri) {\n    var map = data.map\n    var ret = uri\n\n    if (map) {\n      for (var i = 0, len = map.length; i < len; i++) {\n        var rule = map[i]\n\n        ret = isFunction(rule) ?\n          (rule(uri) || uri) :\n          uri.replace(rule[0], rule[1])\n\n        // Only apply the first matched rule\n        if (ret !== uri) break\n      }\n    }\n\n    return ret\n  }\n\n\n  var ABSOLUTE_RE = /^\\/\\/.|:\\//\n  var ROOT_DIR_RE = /^.*?\\/\\/.*?\\//\n\n  function addBase(id, refUri) {\n    var ret\n    var first = id.charCodeAt(0)\n\n    // Absolute\n    if (ABSOLUTE_RE.test(id)) {\n      ret = id\n    }\n    // Relative\n    else if (first === 46 /* \".\" */ ) {\n      ret = (refUri ? dirname(refUri) : data.cwd) + id\n    }\n    // Root\n    else if (first === 47 /* \"/\" */ ) {\n      var m = data.cwd.match(ROOT_DIR_RE)\n      ret = m ? m[0] + id.substring(1) : id\n    }\n    // Top-level\n    else {\n      ret = data.base + id\n    }\n\n    // Add default protocol when uri begins with \"//\"\n    if (ret.indexOf(\"//\") === 0) {\n      ret = location.protocol + ret\n    }\n\n    return realpath(ret)\n  }\n\n  function id2Uri(id, refUri) {\n    if (!id) return \"\"\n\n    id = parseAlias(id)\n    id = parsePaths(id)\n    id = parseAlias(id)\n    id = parseVars(id)\n    id = parseAlias(id)\n    id = normalize(id)\n    id = parseAlias(id)\n\n    var uri = addBase(id, refUri)\n    uri = parseAlias(uri)\n    uri = parseMap(uri)\n\n    return uri\n  }\n\n  // For Developers\n  // seajs.resolve = id2Uri;\n\n  // Check environment\n  var isWebWorker = typeof window === 'undefined' && typeof importScripts !== 'undefined' && isFunction(importScripts);\n\n  // Ignore about:xxx and blob:xxx\n  var IGNORE_LOCATION_RE = /^(about|blob):/;\n  var loaderDir;\n  // Sea.js's full path\n  var loaderPath;\n  // Location is read-only from web worker, should be ok though\n  var cwd = (!location.href || IGNORE_LOCATION_RE.test(location.href)) ? '' : dirname(location.href);\n\n  if (isWebWorker) {\n    // Web worker doesn't create DOM object when loading scripts\n    // Get sea.js's path by stack trace.\n    var stack;\n    try {\n      var up = new Error();\n      throw up;\n    } catch (e) {\n      // IE won't set Error.stack until thrown\n      stack = e.stack.split('\\n');\n    }\n    // First line is 'Error'\n    stack.shift();\n\n    var m;\n    // Try match `url:row:col` from stack trace line. Known formats:\n    // Chrome:  '    at http://localhost:8000/script/sea-worker-debug.js:294:25'\n    // FireFox: '@http://localhost:8000/script/sea-worker-debug.js:1082:1'\n    // IE11:    '   at Anonymous function (http://localhost:8000/script/sea-worker-debug.js:295:5)'\n    // Don't care about older browsers since web worker is an HTML5 feature\n    var TRACE_RE = /.*?((?:http|https|file)(?::\\/{2}[\\w]+)(?:[\\/|\\.]?)(?:[^\\s\"]*)).*?/i\n      // Try match `url` (Note: in IE there will be a tailing ')')\n    var URL_RE = /(.*?):\\d+:\\d+\\)?$/;\n    // Find url of from stack trace.\n    // Cannot simply read the first one because sometimes we will get:\n    // Error\n    //  at Error (native) <- Here's your problem\n    //  at http://localhost:8000/_site/dist/sea.js:2:4334 <- What we want\n    //  at http://localhost:8000/_site/dist/sea.js:2:8386\n    //  at http://localhost:8000/_site/tests/specs/web-worker/worker.js:3:1\n    while (stack.length > 0) {\n      var top = stack.shift();\n      m = TRACE_RE.exec(top);\n      if (m != null) {\n        break;\n      }\n    }\n    var url;\n    if (m != null) {\n      // Remove line number and column number\n      // No need to check, can't be wrong at this point\n      var url = URL_RE.exec(m[1])[1];\n    }\n    // Set\n    loaderPath = url\n      // Set loaderDir\n    loaderDir = dirname(url || cwd);\n    // This happens with inline worker.\n    // When entrance script's location.href is a blob url,\n    // cwd will not be available.\n    // Fall back to loaderDir.\n    if (cwd === '') {\n      cwd = loaderDir;\n    }\n  } else {\n    var doc = document\n    var scripts = doc.scripts\n\n    // Recommend to add `seajsnode` id for the `sea.js` script element\n    var loaderScript = doc.getElementById(\"seajsnode\") ||\n      scripts[scripts.length - 1]\n\n    function getScriptAbsoluteSrc(node) {\n      return node.hasAttribute ? // non-IE6/7\n        node.src :\n        // see http://msdn.microsoft.com/en-us/library/ms536429(VS.85).aspx\n        node.getAttribute(\"src\", 4)\n    }\n    loaderPath = getScriptAbsoluteSrc(loaderScript)\n      // When `sea.js` is inline, set loaderDir to current working directory\n    loaderDir = dirname(loaderPath || cwd)\n  }\n\n  return loaderDir;\n}\n\nmodule.exports = ScriptUtil;","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/resource/bootStrapLoader.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat BootStrapLoader\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>\n * MIT Licensed\n */\n\n/**\n * BootStrapLoader constructor function.\n *\n * @api public\n */\nvar BootStrapLoader = function() {\n\n}\n\n/**\n * BootStrapLoader load script files.\n *\n * @param  {Array}     bootstrap idPaths\n * @api public\n */\nBootStrapLoader.prototype.load = function(idPaths) {\n\tfor (var id in idPaths) {\n\t\tvar idPath = idPaths[id];\n\t\trequire(idPath);\n\t}\n}\n\nmodule.exports = BootStrapLoader;","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/resource/resourceLoader.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat ResourceLoader\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>\n * MIT Licensed\n */\n\nvar ConfigLoader = require('./configLoader');\n\n/**\n * ResourceLoader constructor function.\n *\n * @api public\n */\nvar ResourceLoader = function() {\n\tthis.loadPathMap = {};\n\tthis.loadPaths = [];\n}\n\nmodule.exports = ResourceLoader;\n\n/**\n * ResourceLoader get config loader.\n *\n * @return  {Object} config loader\n * @api public\n */\nResourceLoader.prototype.getConfigLoader = function() {\n\tvar configLoader = new ConfigLoader();\n\treturn configLoader;\n}\n\n/**\n * ResourceLoader add context load path.\n *\n * @param  {String} cpath context load path\n * @api public\n */\nResourceLoader.prototype.addLoadPath = function(cpath) {\n\tthis.loadPaths.push(cpath);\n}\n\n/**\n * ResourceLoader load metaObjects from context path.\n *\n * @param   {String} cpath context load path\n * @return  {Object} metaObjects\n * @api public\n */\nResourceLoader.prototype.load = function(cpath) {\n\tif (this.loadPathMap[cpath]) {\n\t\treturn this.loadPathMap[cpath];\n\t}\n\n\tvar metaObjects = this.getConfigLoader().getResources(cpath);\n\tthis.loadPathMap[cpath] = metaObjects;\n\tthis.addLoadPath(cpath);\n\n\treturn metaObjects;\n}","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/resource/configLoader.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat ConfigLoader\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>\n * MIT Licensed\n */\n\nvar logger = require('pomelo-logger').getLogger('bearcat', 'ConfigLoader');\nvar RequireUtil = require('../util/requireUtil');\nvar MetaUtil = require('../util/metaUtil');\nvar Constant = require('../util/constant');\nvar MetaLoader = require('./metaLoader');\nvar Utils = require('../util/utils');\nvar Path = RequireUtil.requirePath();\n\n/**\n * ConfigLoader constructor function.\n *\n * @api public\n */\nvar ConfigLoader = function() {}\n\nmodule.exports = ConfigLoader;\n\n/**\n * ConfigLoader get meta loader.\n *\n * @return  {Object} meta loader\n * @api public\n */\nConfigLoader.prototype.getMetaLoader = function() {\n\treturn new MetaLoader();\n}\n\n/**\n * ConfigLoader get meta objects from context path.\n *\n * @param   {String} cpath context path\n * @return  {Object} meta objects\n * @api public\n */\nConfigLoader.prototype.getResources = function(cpath) {\n\tvar scanPaths = [];\n\tvar metaObjects = {};\n\tvar metaLoader = this.getMetaLoader();\n\tthis.getRecursiveScanPath(cpath, scanPaths, metaObjects);\n\n\tfor (var beanName in metaObjects) {\n\t\tmetaLoader.setMetaObject(beanName, metaObjects[beanName]);\n\t}\n\n\tfor (var i = 0; i < scanPaths.length; i++) {\n\t\tmetaLoader.load(scanPaths[i]);\n\t}\n\n\treturn metaLoader.getMetaObjects();\n}\n\n/**\n * ConfigLoader get recursive scan paths and metaObjects in context.json.\n *\n * @param   {String} cpath context path\n * @param   {Array}  scanPaths scan paths\n * @param   {Object} metaObjects\n * @api public\n */\nConfigLoader.prototype.getRecursiveScanPath = function(cpath, scanPaths, metaObjects) {\n\tvar context = Utils.myRequire(cpath);\n\tif (!context) {\n\t\treturn;\n\t}\n\n\tvar scan = context.scan;\n\tvar beans = context.beans;\n\t// var browser = context.browser;\n\tvar imports = context.imports;\n\tvar namespace = context.namespace;\n\tvar dependencies = context.dependencies;\n\n\tvar dpath = Path.dirname(cpath);\n\n\t// if (Utils.checkString(browser)) {\n\t// \treturn this.getRecursiveScanPath(dpath + '/' + browser, scanPaths, metaObjects);\n\t// } else if (Utils.checkArray(browser)) {\n\t// \tfor (var i = 0; i < browser.length; i++) {\n\t// \t\tthis.getRecursiveScanPath(dpath + '/' + browser[i], scanPaths, metaObjects);\n\t// \t}\n\t// \treturn;\n\t// }\n\n\tfor (var dependency in dependencies) {\n\t\tthis.getRecursiveScanPath(dpath + '/node_modules/' + dependency + '/context.json', scanPaths, metaObjects);\n\t}\n\n\tif (Utils.checkArray(imports)) {\n\t\tfor (var j = 0; j < imports.length; j++) {\n\t\t\tthis.getRecursiveScanPath(dpath + '/' + imports[j], scanPaths, metaObjects);\n\t\t}\n\t}\n\n\t// context.json defined bean metadatas\n\tif (beans) {\n\t\tfor (var i = 0; i < beans.length; i++) {\n\t\t\tvar bean = beans[i];\n\t\t\tvar beanName = bean['id'];\n\n\t\t\tif (namespace) {\n\t\t\t\tbeanName = namespace + Constant.NAMESPACE_SEPERATOR + beanName;\n\t\t\t}\n\n\t\t\t// var loadpath = this.loadedContextBeans[beanName];\n\t\t\t// if (beanName && loadpath) {\n\t\t\t// \tlogger.warn(\"bean %j defined in %j has already defined in %j, please check your configuration metadata files\", beanName, cpath, loadpath);\n\t\t\t// \tcontinue;\n\t\t\t// }\n\n\t\t\tvar beanObject = null;\n\t\t\tvar funcPath = \"\";\n\t\t\tif (Utils.checkString(bean['func'])) {\n\t\t\t\t// beans from require, may be cached by require when you do with the same context.json\n\t\t\t\tfuncPath = Utils.getLoadPath(bean['func'], cpath);\n\t\t\t\tbeanObject = Utils.myRequire(funcPath);\n\t\t\t}\n\n\t\t\tif (beanObject) {\n\t\t\t\tif (Utils.checkFunction(beanObject)) {\n\t\t\t\t\tbean['func'] = beanObject;\n\t\t\t\t} else if (Utils.checkObject(beanObject)) {\n\t\t\t\t\tif (beanObject['id'] && beanObject['id'] === beanName) {\n\t\t\t\t\t\t// meta defined in js file override context.json\n\t\t\t\t\t\tbean = MetaUtil.mergeMeta(beanObject, bean);\n\t\t\t\t\t\tbean['ftype'] = 'object';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlogger.error('meta defined in file %j %j mismatch with that defined in context %j', funcPath, beanObject, bean);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (beanName) {\n\t\t\t\tvar originMeta = metaObjects[beanName];\n\t\t\t\tmetaObjects[beanName] = MetaUtil.mergeMeta(bean, originMeta);\n\t\t\t\tif (funcPath) {\n\t\t\t\t\tbean['fpath'] = Path.resolve(process.cwd(), funcPath);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif (Utils.checkString(scan)) {\n\t\tvar scanPath = Utils.getLoadPath2(scan, cpath);\n\t\tscanPaths.push(scanPath);\n\t}\n\n\tif (Utils.checkArray(scan)) {\n\t\tfor (var i = 0; i < scan.length; i++) {\n\t\t\tvar scanPath = Utils.getLoadPath2(scan[i], cpath);\n\t\t\tscanPaths.push(scanPath);\n\t\t}\n\t}\n}","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/util/metaUtil.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat MetaUtil\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>\n * MIT Licensed\n */\n\nvar logger = require('pomelo-logger').getLogger('Bearcat', 'MetaUtil');\nvar RequireUtil = require('./requireUtil');\nvar Constant = require('./constant');\nvar Os = RequireUtil.requireOs();\nvar Utils = require('./utils');\nvar EOL = Os.EOL;\n\nvar MetaUtil = {\n\tmetaCache: {}\n};\n\n/**\n * MetaUtil merge metaObject with originMeta.\n *\n * @param   {Object} meta metaObject\n * @param   {Object} originMeta origin metaObject\n * @param   {Object} merged metaObjects\n * @api public\n */\nMetaUtil.mergeMeta = function(meta, originMeta) {\n\tif (!originMeta) {\n\t\treturn meta;\n\t}\n\n\tfor (var key in meta) {\n\t\toriginMeta[key] = meta[key];\n\t}\n\n\treturn originMeta;\n}\n\n/**\n * MetaUtil resolve function annotation like $id, $scope, $car etc.\n *\n * @param  {Function} func function annotation\n * @param  {String}   func function file path\n * @param  {Boolean}  force resolve func annotation\n * @return {Object}   metaObject resolved metaObject\n * @api private\n */\nMetaUtil.resolveFuncAnnotation = function(func, fp, force) {\n\tvar funcString = func.toString();\n\n\tif (process.env.LOADER_BIN === 'on') {\n\t\tforce = true;\n\t}\n\n\tif (this.metaCache[funcString] && !force) {\n\t\treturn this.metaCache[funcString];\n\t}\n\n\tvar funcArgsString = funcString.match(Constant.FUNC_ARGS_REGEXP);\n\n\tif (funcArgsString) {\n\t\tfuncArgsString = funcArgsString[1];\n\t} else {\n\t\tfuncArgsString = \"\";\n\t}\n\n\tvar funcArgs = [];\n\n\tif (funcArgsString) {\n\t\tfuncArgs = funcArgsString.split(',');\n\t}\n\n\tvar meta = {};\n\tvar props = [];\n\tvar args = [];\n\tvar attributes = [];\n\n\tvar funcProps = null;\n\n\tif (funcArgs.length || process.env.BEARCAT_FUNCTION_STRING) {\n\t\t// if constructor function have arguments or setup BEARCAT_FUNCTION_STRING flag\n\t\t// use funcString to resolve $ props\n\t\tfuncString = MetaUtil.resolveFuncComment(funcString);\n\t\tfuncProps = MetaUtil.resolvePropsFromFuncString(funcString, funcArgsString);\n\t} else {\n\t\t// use new to resolve $ props directly to support dynamic $ prefix attributes\n\t\t// try catch the error, when dependency is not ready when started\n\t\ttry {\n\t\t\tfuncProps = new func();\n\t\t} catch (e) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\tfor (var funcKey in funcProps) {\n\t\t// prototype attribute must be prefixed with $, other attributes will be ignored \n\t\tif (!funcProps.hasOwnProperty(funcKey) && !MetaUtil.checkFuncAnnotation(funcKey)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tvar value = funcProps[funcKey];\n\n\t\t// ignore function value\n\t\tif (Utils.checkFunction(value)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (MetaUtil.checkFuncAnnotation(funcKey)) {\n\t\t\tvar key = funcKey.substr(1);\n\t\t\tif (MetaUtil.checkInMetaProps(funcKey)) {\n\t\t\t\tif (key === Constant.META_AOP && funcProps[funcKey] === true) {\n\t\t\t\t\tmeta[key] = this.resolvePrototypeAnnotation(func);\n\t\t\t\t} else {\n\t\t\t\t\tif (key === Constant.META_ID) {\n\t\t\t\t\t\tif (MetaUtil.checkInMetaProps(value, true)) {\n\t\t\t\t\t\t\tlogger.warn('bean id value must not use bearcat special bean attributes: %s', value);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tmeta[key] = value;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!MetaUtil.checkInFuncArgs(funcKey, funcArgs)) {\n\t\t\t\t\tif (MetaUtil.checkFuncPropsValue(funcKey)) {\n\t\t\t\t\t\tprops.push({\n\t\t\t\t\t\t\tname: funcKey,\n\t\t\t\t\t\t\tvalue: value\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (MetaUtil.checkFuncPropsType(funcKey)) {\n\t\t\t\t\t\tprops.push({\n\t\t\t\t\t\t\tname: funcKey,\n\t\t\t\t\t\t\ttype: value\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (MetaUtil.checkFuncPropsNamespace(funcKey)) {\n\t\t\t\t\t\tprops.push({\n\t\t\t\t\t\t\tname: funcKey,\n\t\t\t\t\t\t\tref: value\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprops.push({\n\t\t\t\t\t\t\tname: funcKey,\n\t\t\t\t\t\t\tref: key\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontinue;\n\t\t} else if (MetaUtil.checkFuncPropsConfigValue(value)) {\n\t\t\t// this.num = \"${car.num}\"; placeholder\n\t\t\tprops.push({\n\t\t\t\tname: funcKey,\n\t\t\t\tvalue: value\n\t\t\t});\n\t\t} else if (MetaUtil.checkFuncValueAnnotation(value)) {\n\t\t\t// this.num = \"$type:Number\"; model attribute\n\t\t\tattributes.push({\n\t\t\t\tname: funcKey,\n\t\t\t\tvalue: value\n\t\t\t});\n\t\t}\n\t}\n\n\tdelete funcProps;\n\n\tif (props.length) {\n\t\tmeta['props'] = props;\n\t}\n\n\tfor (var i = 0; i < funcArgs.length; i++) {\n\t\tvar funcArg = funcArgs[i].trim();\n\t\tif (!funcArg) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tvar key = funcArg.substr(1);\n\t\tif (MetaUtil.checkFuncAnnotation(funcArg)) {\n\t\t\targs.push({\n\t\t\t\tname: funcArg,\n\t\t\t\tref: key\n\t\t\t});\n\t\t} else {\n\t\t\t// not start with $, treat it as a type injection\n\t\t\targs.push({\n\t\t\t\tname: funcArg,\n\t\t\t\ttype: \"Object\"\n\t\t\t});\n\t\t}\n\t}\n\n\tif (args.length) {\n\t\tmeta['args'] = args;\n\t}\n\n\tif (attributes.length) {\n\t\tmeta['attributes'] = attributes;\n\t}\n\n\tmeta['func'] = func;\n\tif (fp) {\n\t\tmeta['fpath'] = require('path').resolve(process.cwd(), fp);\n\t}\n\n\tvar id = meta.id;\n\tif (meta.id) {\n\t\tid = meta.id;\n\t} else if (meta.mid) {\n\t\tid = meta.mid + Constant.BEAN_SPECIAL_MODEL;\n\t} else if (meta.cid) {\n\t\tid = meta.cid + Constant.BEAN_SPECIAL_CONSTRAINT;\n\t} else {\n\t\t// must have id\n\t}\n\n\tif (id) {\n\t\tmeta['id'] = id;\n\t}\n\n\tthis.metaCache[funcString] = meta;\n\treturn meta;\n}\n\n/**\n * MetaUtil props from function string.\n *\n * @param  {String}     function string\n * @return {Object}     resolved props object\n * @api private\n */\nMetaUtil.resolvePropsFromFuncString = function(funcString, funcArgsString) {\n\tvar funcPropsArray = funcString.match(Constant.FUNC_PROPS_REGEXP);\n\tvar funcPropsAttrArray = funcString.match(Constant.FUNC_PROPS_REGEXP_ATTR);\n\n\tvar t = \"var FuncProps = function(\" + funcArgsString + \") {\" + EOL;\n\tif (funcPropsArray && Utils.checkArray(funcPropsArray)) {\n\t\tfor (var i = 0; i < funcPropsArray.length; i++) {\n\t\t\tt += (funcPropsArray[i] + EOL);\n\t\t}\n\t}\n\n\tif (funcPropsAttrArray && Utils.checkArray(funcPropsAttrArray)) {\n\t\tfor (var i = 0; i < funcPropsAttrArray.length; i++) {\n\t\t\tt += (funcPropsAttrArray[i] + EOL);\n\t\t}\n\t}\n\n\tt += \"}\";\n\n\tvar funcProps = MetaUtil.getEvalFuncProps(t);\n\n\treturn funcProps;\n}\n\n/**\n * MetaUtil resolve prototype annotation.\n *\n * @param  {Function}   func function\n * @return {Object}     resolved meta object\n * @api private\n */\nMetaUtil.resolvePrototypeAnnotation = function(func) {\n\tvar proto = func.prototype;\n\tvar meta = [];\n\n\tfor (var funcName in proto) {\n\t\tvar protoFunc = proto[funcName];\n\t\tif (Utils.checkFunction(protoFunc)) {\n\t\t\tvar funcString = protoFunc.toString();\n\t\t\tfuncString = MetaUtil.resolveFuncComment(funcString);\n\n\t\t\tvar funcPropsArray = funcString.match(Constant.PROTO_FUNC_PROPS_REGEXP);\n\t\t\tvar t = \"\";\n\t\t\tif (funcPropsArray && Utils.checkArray(funcPropsArray)) {\n\t\t\t\tt = \"var FuncMetaProps = function() {\" + EOL;\n\t\t\t\tfor (var i = 0; i < funcPropsArray.length; i++) {\n\t\t\t\t\tt += (funcPropsArray[i].replace(/var\\s*/, \"this.\") + EOL);\n\t\t\t\t}\n\t\t\t\tt += \"}\";\n\t\t\t}\n\n\t\t\tvar funcProps = MetaUtil.getEvalFuncMetaProps(t);\n\t\t\tvar aop = {};\n\t\t\tvar flag = false;\n\t\t\taop[Constant.META_AOP_ADVICE] = funcName;\n\t\t\tfor (var funcKey in funcProps) {\n\t\t\t\tif (this.checkInAOPMetaProps(funcKey)) {\n\t\t\t\t\tvar key = funcKey.substr(1);\n\t\t\t\t\tvar value = funcProps[funcKey];\n\t\t\t\t\taop[key] = value;\n\t\t\t\t\tflag = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (flag) {\n\t\t\t\tmeta.push(aop);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn meta;\n}\n\n/**\n * MetaUtil resolve function comments.\n *\n * @param  {String}   t function string\n * @return {String}   resolved function string\n * @api private\n */\nMetaUtil.resolveFuncComment = function(funcString) {\n\tfuncString = funcString.replace(Constant.FUNC_COMMENT_LINE, \"\")\n\tfuncString = funcString.replace(Constant.FUNC_COMMENT_STAR, \"\");\n\treturn funcString;\n}\n\n/**\n * MetaUtil get eval function props.\n *\n * @param  {String}   t function string\n * @return {Object}   eval object result\n * @api private\n */\nMetaUtil.getEvalFuncProps = function(t) {\n\tif (!t) {\n\t\treturn {};\n\t}\n\n\ttry {\n\t\teval(t);\n\t\treturn new FuncProps();\n\t} catch (err) {\n\t\tlogger.error(\"resolveFuncAnnotation error: \" + err.stack);\n\t\treturn {};\n\t}\n}\n\n/**\n * MetaUtil get eval function props.\n *\n * @param  {String}   t function string\n * @return {Object}   eval object result\n * @api private\n */\nMetaUtil.getEvalFuncMetaProps = function(t) {\n\tif (!t) {\n\t\treturn {};\n\t}\n\n\ttry {\n\t\teval(t);\n\t\treturn new FuncMetaProps();\n\t} catch (err) {\n\t\tlogger.error(\"resolvePrototypeAnnotation error: \" + err.stack);\n\t\treturn {};\n\t}\n}\n\n/**\n * MetaUtil check funcKey in metaProps.\n *\n * @param  {String}   funcKey function key\n * @return {Boolean}  true|false\n * @api private\n */\nMetaUtil.checkInMetaProps = function(funcKey, flag) {\n\tvar META_PROPS = Constant.META_PROPS;\n\n\tvar prefix = \"\";\n\tif (!flag) {\n\t\tprefix = Constant.FUNC_ANNOTATION;\n\t}\n\n\tfor (var i = 0; i < META_PROPS.length; i++) {\n\t\tif (prefix + META_PROPS[i] === funcKey) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * MetaUtil check funcKey in aopMetaProps.\n *\n * @param  {String}   funcKey function key\n * @return {Boolean}  true|false\n * @api private\n */\nMetaUtil.checkInAOPMetaProps = function(funcKey) {\n\tvar META_PROPS = Constant.AOP_META_PROPS;\n\n\tfor (var i = 0; i < META_PROPS.length; i++) {\n\t\tif (Constant.FUNC_ANNOTATION + META_PROPS[i] === funcKey) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * MetaUtil check funcKey in function args.\n *\n * @param  {String}   funcKey function key\n * @param  {Array}    function args\n * @return {Boolean}  true|false\n * @api private\n */\nMetaUtil.checkInFuncArgs = function(funcKey, funcArgs) {\n\tfor (var i = 0; i < funcArgs.length; i++) {\n\t\tif (funcKey === funcArgs[i]) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * MetaUtil check function annotation.\n *\n * @param  {String}   funcKey function key\n * @return {Boolean}  true|false\n * @api private\n */\nMetaUtil.checkFuncAnnotation = function(funcKey) {\n\treturn funcKey.match(/^\\$/);\n}\n\n/**\n * MetaUtil check funcValue annotation.\n *\n * @param  {String}   funcValue function value\n * @return {Boolean}  true|false\n * @api private\n */\nMetaUtil.checkFuncValueAnnotation = function(funcValue) {\n\tif (!Utils.checkString(funcValue)) {\n\t\treturn false;\n\t}\n\n\treturn this.checkFuncAnnotation(funcValue);\n}\n\n/**\n * MetaUtil check function props value.\n *\n * @param  {String}   funcKey function key\n * @return {Boolean}  true|false\n * @api private\n */\nMetaUtil.checkFuncPropsValue = function(funcKey) {\n\treturn funcKey.match(/^\\$V/);\n}\n\n/**\n * MetaUtil check function props type.\n *\n * @param  {String}   funcKey function key\n * @return {Boolean}  true|false\n * @api private\n */\nMetaUtil.checkFuncPropsType = function(funcKey) {\n\treturn funcKey.match(/^\\$T/);\n}\n\n/**\n * MetaUtil check function props namespace.\n *\n * @param  {String}   funcKey function key\n * @return {Boolean}  true|false\n * @api private\n */\nMetaUtil.checkFuncPropsNamespace = function(funcKey) {\n\treturn funcKey.match(/^\\$N/);\n}\n\n/**\n * MetaUtil check function props config value.\n *\n * @param  {String}   value\n * @return {Boolean}  true|false\n * @api private\n */\nMetaUtil.checkFuncPropsConfigValue = function(value) {\n\tif (!Utils.checkString(value)) {\n\t\treturn;\n\t}\n\treturn value.match(/^\\$\\{.*?\\}$/);\n}\n\n/**\n * MetaUtil clean up meta cache.\n *\n * @api public\n */\nMetaUtil.cleanUp = function() {\n\tthis.metaCache = {};\n}\n\nmodule.exports = MetaUtil;","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/resource/metaLoader.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat MetaLoader\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>\n * MIT Licensed\n */\n\nvar logger = require('pomelo-logger').getLogger('bearcat', 'MetaLoader');\nvar FileUtil = require('../util/fileUtil');\nvar MetaUtil = require('../util/metaUtil');\nvar Constant = require('../util/constant');\nvar Utils = require('../util/utils');\nvar path = require('path');\n\n/**\n * MetaLoader constructor function.\n *\n * @api public\n */\nvar MetaLoader = function() {\n\tthis.metaObjects = {};\n}\n\nmodule.exports = MetaLoader;\n\n/**\n * MetaLoader load metaObjects from meta path.\n *\n * @param   {String} mpath\n * @return  {Object} meta objects\n * @api public\n */\nMetaLoader.prototype.load = function(mpath) {\n\tif (!mpath) {\n\t\tlogger.error('load path should not be empty.');\n\t\treturn;\n\t}\n\n\tmpath = FileUtil.realpathSync(mpath);\n\n\tif (!Utils.isDir(mpath)) {\n\t\tlogger.error('path should be directory.');\n\t\treturn;\n\t}\n\n\tthis.loadPath(this.metaObjects, mpath);\n\treturn this.metaObjects;\n};\n\n/**\n * MetaLoader set metaObject to beanName.\n *\n * @param   {String} beanName\n * @param   {Object} metaObject\n * @api public\n */\nMetaLoader.prototype.setMetaObject = function(beanName, metaObject) {\n\tvar originMeta = this.metaObjects[beanName];\n\tthis.metaObjects[beanName] = MetaUtil.mergeMeta(metaObject, originMeta);\n}\n\n/**\n * MetaLoader get metaObjects.\n *\n * @return   {Object} metaObjects\n * @api public\n */\nMetaLoader.prototype.getMetaObjects = function() {\n\treturn this.metaObjects;\n}\n\n/**\n * MetaLoader load file, require file.\n *\n * @return   {Object} fp file meta\n * @api private\n */\nMetaLoader.prototype.loadFile = function(fp) {\n\tvar m = Utils.myRequire(fp);\n\tif (process.env.BEARCAT_ANNOTATION !== 'off' && Utils.checkFunction(m)) {\n\t\t// meta may be $ annotations in function\n\t\treturn MetaUtil.resolveFuncAnnotation(m, fp);\n\t}\n\n\tif (!Utils.checkObject(m)) {\n\t\t// meta must be object\t\n\t\treturn;\n\t}\n\n\tif (!m || !m.id || !m.func) {\n\t\t// id, func must have\n\t\treturn;\n\t}\n\n\tif (fp) {\n\t\tm['ftype'] = 'object';\n\t\tm['fpath'] = fp;\n\t}\n\n\treturn m;\n};\n\n/**\n * MetaLoader load meta from path recursively.\n *\n * @param    {Object} meta metaObjects\n * @param    {String} path\n * @return   {Object} metaObjects\n * @api private\n */\nMetaLoader.prototype.loadPath = function(meta, path) {\n\tvar files = FileUtil.readdirSync(path);\n\n\tif (path.charAt(path.length - 1) !== '/') {\n\t\tpath += '/';\n\t}\n\n\tvar fp, fn, m;\n\tfor (var i = 0, l = files.length; i < l; i++) {\n\t\tfn = files[i];\n\t\tfp = path + fn;\n\n\t\tif (Utils.isDir(fp)) {\n\t\t\tthis.loadPath(meta, fp);\n\t\t}\n\n\t\tif (!Utils.isFile(fp) || !Utils.checkFileType(fn, '.js')) {\n\t\t\t// only load js file type\n\t\t\tcontinue;\n\t\t}\n\n\t\tm = this.loadFile(fp);\n\t\tif (!m) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// id by default is the file name\n\t\tvar id = Utils.getFileName(fn, '.js'.length);\n\t\tif (m.id) {\n\t\t\tid = m.id;\n\t\t} else if (m.mid) {\n\t\t\tid = m.mid + Constant.BEAN_SPECIAL_MODEL;\n\t\t} else if (m.cid) {\n\t\t\tid = m.cid + Constant.BEAN_SPECIAL_CONSTRAINT;\n\t\t} else {\n\t\t\t// ignore\n\t\t\tcontinue;\n\t\t}\n\n\t\tvar originMeta = meta[id];\n\t\tmeta[id] = MetaUtil.mergeMeta(m, originMeta);\n\t}\n\n\treturn meta;\n};","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/model/constraints/index.js":"var Utils = require('../../util/utils');\n\nvar Constraints = {};\nif (!Utils.checkBrowser()) {\n\tvar fs = require('fs');\n\tvar path = require('path');\n\n\tfs.readdirSync(__dirname).forEach(function(filename) {\n\t\tif (!/\\.js$/.test(filename)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (filename === 'index.js') {\n\t\t\treturn;\n\t\t}\n\n\t\tvar name = path.basename(filename, '.js');\n\n\t\tfunction load() {\n\t\t\treturn require(__dirname + '/' + name);\n\t\t}\n\n\t\tConstraints.__defineGetter__(name, load);\n\t});\n}\n\nmodule.exports = Constraints;","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/beans/moduleFactory.js":"var logger = require('pomelo-logger').getLogger('bearcat', 'ModuleFactory');\n\nvar ModuleFactory = function() {\n\tthis.factoryMap = {};\n\tthis.moduleMap = {};\n}\n\nModuleFactory.prototype.define = function(id, factory) {\n\tif (this.factoryMap[id]) {\n\t\tlogger.warn('module %s has been registered ...', id);\n\t\treturn;\n\t}\n\n\tthis.factoryMap[id] = factory;\n}\n\nModuleFactory.prototype.require = function(id) {\n\tif (!this.moduleMap[id]) {\n\t\tvar exports = {};\n\t\tvar factory = this.factoryMap[id];\n\n\t\tif (!factory) {\n\t\t\tlogger.warn('require file %s not exists ...', id);\n\t\t\treturn;\n\t\t}\n\n\t\tvar module = {\n\t\t\texports: {}\n\t\t}\n\n\t\tfactory(module.exports, module);\n\t\tthis.moduleMap[id] = module.exports;\n\t}\n\n\treturn this.moduleMap[id];\n}\n\nmodule.exports = ModuleFactory;","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/beans/beanFactory.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat BeanFactory\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>\n * MIT Licensed\n */\n\nvar logger = require('pomelo-logger').getLogger('bearcat', 'BeanFactory');\nvar DynamicMetaProxy = require('../aop/framework/dynamicMetaProxy');\nvar SingletonBeanFactory = require('./singletonBeanFactory');\nvar ModelConstraint = require('../model/modelConstraint');\nvar ModelDefinition = require('../model/modelDefinition');\nvar BeanDefinition = require('./support/beanDefinition');\nvar ValidatorUtil = require('../util/validatorUtil');\nvar ModelFilter = require('../model/modelFilter');\nvar ModelProxy = require('../model/modelProxy');\nvar ModelUtil = require('../util/modelUtil');\nvar Constant = require('../util/constant');\nvar BeanUtil = require('../util/beanUtil');\nvar AopUtil = require('../util/aopUtil');\nvar Aspect = require('../aop/aspect');\nvar Utils = require('../util/utils');\n\n/**\n * BeanFactory constructor function.\n *\n * @api public\n */\nvar BeanFactory = function() {\n\tthis.aspects = [];\n\tthis.modelMap = {};\n\tthis.initCbMap = {};\n\tthis.beanCurMap = {};\n\tthis.constraints = {};\n\tthis.tableModelMap = {};\n\tthis.beanFunctions = {};\n\tthis.beanDefinitions = {};\n\tthis.beanPostProcessors = [];\n\tthis.singletonBeanFactory = new SingletonBeanFactory(this);\n}\n\n/**\n * BeanFactory get bean instance through BeanFactory IoC container.\n *\n * @param  {String} beanName\n * @return {Object} bean object\n * @api public\n */\nBeanFactory.prototype.getBean = function(beanName) {\n\tif (this.beanCurMap[beanName]) {\n\t\tlogger.error(\"circle reference beanName \" + beanName + \" is in creating\");\n\t\treturn;\n\t}\n\n\tthis.beanCurMap[beanName] = true;\n\tvar beanObject = this.doGetBean.apply(this, arguments);\n\tdelete this.beanCurMap[beanName];\n\n\treturn beanObject;\n}\n\n/**\n * BeanFactory get bean proxy through BeanFactory IoC container for lazy init bean.\n * when invoke bean proxy, proxy will invoke getBean to get the target bean\n *\n * @param  {String} beanName\n * @return {Object} bean proxy object\n * @api public\n */\nBeanFactory.prototype.getBeanProxy = function(beanName) {\n\treturn this.doGetBeanProxy.apply(this, arguments);\n}\n\n/**\n * BeanFactory get model through BeanFactory IoC container.\n *\n * @param  {String} modelId\n * @return {Object} model proxy object\n * @api public\n */\nBeanFactory.prototype.getModelProxy = function(modelId) {\n\treturn this.doGetModelProxy(modelId);\n}\n\n/**\n * BeanFactory get constraint through BeanFactory IoC container.\n *\n * @param  {String} cid\n * @return {Object} constraint bean object\n * @api public\n */\nBeanFactory.prototype.getConstraint = function(cid) {\n\treturn this.doGetConstraint(cid);\n}\n\n/**\n * BeanFactory do get bean instance through BeanFactory IoC container.\n *\n * @param  {String} beanName\n * @return {Object} bean object\n * @api private\n */\nBeanFactory.prototype.doGetBean = function(beanName) {\n\tvar beanDefinition = this.getBeanDefinition(beanName);\n\n\tif (!beanDefinition) {\n\t\tlogger.error('BeanFactory beanDefinition null for %j', beanName);\n\t\treturn null;\n\t}\n\n\tif (beanDefinition.isAbstract()) {\n\t\tlogger.warn('abstract bean can not get bean instance, you can use bearcat.getFunction to get constructor function of the bean');\n\t\treturn this.getBeanFunction(beanName);\n\t}\n\n\tif (beanDefinition.hasParentBean()) {\n\t\tbeanDefinition = this.setParentBean(beanName);\n\t}\n\n\t// if (beanDefinition.isLazyInit()) {\n\t// \treturn this.getBeanProxy.apply(this, arguments);\n\t// }\n\n\tif (beanDefinition.isSingleton()) {\n\t\treturn this.singletonBeanFactory.getSingleton.apply(this.singletonBeanFactory, arguments);\n\t} else if (beanDefinition.isPrototype()) {\n\t\treturn this.createBean.apply(this, arguments);\n\t}\n}\n\n/**\n * BeanFactory do get bean proxy through BeanFactory IoC container.\n *\n * @param  {String} beanName\n * @return {Object} bean proxy object\n * @api private\n */\nBeanFactory.prototype.doGetBeanProxy = function(beanName) {\n\tvar beanDefinition = this.getBeanDefinition(beanName);\n\n\tif (!beanDefinition) {\n\t\tlogger.error('BeanFactory beanDefinition null for %j', beanName);\n\t\treturn null;\n\t}\n\n\tvar dynamicMetaProxy = new DynamicMetaProxy();\n\tdynamicMetaProxy['beanDefinition'] = beanDefinition;\n\tdynamicMetaProxy['beanFactory'] = this;\n\tdynamicMetaProxy['args'] = arguments;\n\tdynamicMetaProxy._dyInit();\n\n\treturn dynamicMetaProxy;\n}\n\n/**\n * BeanFactory do get model through BeanFactory IoC container.\n *\n * @param  {String} modelId\n * @return {Object} model proxy\n * @api private\n */\nBeanFactory.prototype.doGetModelProxy = function(modelId) {\n\tvar modelDefinition = this.getModelDefinition(modelId);\n\n\tif (!modelDefinition) {\n\t\tlogger.error('BeanFactory modelDefinition null for %j', modelId);\n\t\treturn null;\n\t}\n\n\tvar beanName = modelDefinition.getId();\n\tvar beanDefinition = this.getBeanDefinition(beanName);\n\n\tif (!beanDefinition) {\n\t\tlogger.error('BeanFactory beanDefinition null for %j', modelId);\n\t\treturn null;\n\t}\n\n\tvar modelFilter = new ModelFilter();\n\tmodelFilter.setModelDefinition(modelDefinition);\n\n\tvar modelProxy = new ModelProxy();\n\tvar modelBean = this.getBean(beanName);\n\tvar modelFields = modelDefinition.getFields();\n\n\tfor (var key in modelFields) {\n\t\tvar modelField = modelFields[key];\n\t\tvar modelDefault = modelField.getDefault();\n\t\tvar modelFieldType = modelField.getType();\n\t\tif (Utils.isNotNull(modelDefault)) {\n\t\t\tif (modelFieldType === Constant.TYPE_NUMBER) {\n\t\t\t\tmodelDefault = parseInt(modelDefault);\n\t\t\t}\n\t\t\tmodelBean[key] = modelDefault;\n\t\t}\n\t}\n\n\tmodelFilter.setModel(modelBean);\n\tmodelProxy['model'] = modelBean;\n\tmodelProxy['beanFactory'] = this;\n\tmodelProxy['modelFilter'] = modelFilter;\n\tmodelProxy['beanDefinition'] = beanDefinition;\n\tmodelProxy['modelDefinition'] = modelDefinition;\n\n\tmodelProxy._modelInit();\n\n\treturn modelProxy;\n}\n\n/**\n * BeanFactory do get constraint through BeanFactory IoC container.\n *\n * @param  {String} cid\n * @return {Object} constraint bean object\n * @api private\n */\nBeanFactory.prototype.doGetConstraint = function(cid) {\n\tvar constraintDefinition = this.getConstraintDefinition(cid);\n\n\tif (!constraintDefinition) {\n\t\tlogger.error('BeanFactory constraintDefinition null for %j', cid);\n\t\treturn null;\n\t}\n\n\tvar beanName = constraintDefinition.getId();\n\treturn this.getBean(beanName);\n}\n\n/**\n * BeanFactory create bean instance through BeanFactory IoC container.\n *\n * @param  {String} beanName\n * @return {Object} bean object\n * @api private\n */\nBeanFactory.prototype.createBean = function(beanName) {\n\tvar beanObject = this.doCreateBean.apply(this, arguments);\n\tbeanObject = this.initBean(beanObject, beanName, this.getInitCb(beanName));\n\n\treturn beanObject;\n}\n\n/**\n * BeanFactory do create bean instance through BeanFactory IoC container.\n *\n * @param  {String} beanName\n * @return {Object} bean object\n * @api private\n */\nBeanFactory.prototype.doCreateBean = function(beanName) {\n\tvar beanDefinition = this.getBeanDefinition(beanName);\n\n\tif (!beanDefinition) {\n\t\treturn null;\n\t}\n\n\tif (beanDefinition.hasFactoryBean()) {\n\t\treturn this.getBeanFromFactoryBean.apply(this, arguments);\n\t}\n\n\tvar argsOn = beanDefinition.getArgsOn();\n\tvar propsOn = beanDefinition.getPropsOn();\n\tvar func = this.getBeanFunction(beanName);\n\tif (!func) {\n\t\treturn null;\n\t}\n\n\tvar dependsBeans = this.getDependsBeanValues(argsOn, arguments);\n\tvar dependsApplyArgs = this.getDependsApplyArgs(dependsBeans);\n\n\tvar beanObject = Object.create(func.prototype);\n\n\tfunc.apply(beanObject, dependsApplyArgs);\n\n\tdependsBeans = this.getDependsBeanValues(propsOn);\n\tif (Utils.checkArray(dependsBeans)) {\n\t\tfor (var i = 0; i < dependsBeans.length; i++) {\n\t\t\tvar wbean = dependsBeans[i];\n\t\t\tvar name = wbean.getName();\n\t\t\tif (wbean.getDependType() === Constant.DEPEND_TYPE_BEAN) {\n\t\t\t\tbeanObject[name] = wbean.getBean();\n\t\t\t} else if (wbean.getDependType() === Constant.DEPEND_TYPE_VALUE) {\n\t\t\t\tbeanObject[name] = wbean.getValue();\n\t\t\t}\n\t\t\t// no this case\n\t\t\t// else if (wbean.getDependType() === Constant.DEPEND_TYPE_VAR) {\n\t\t\t// beanObject[name] = wbean.getValueOnce();\n\t\t\t// } \n\t\t\telse {\n\t\t\t\t// Constant.DEPEND_TYPE_ERROR\n\t\t\t}\n\t\t}\n\t}\n\n\treturn beanObject;\n}\n\n/**\n * BeanFactory init bean with init method.\n *\n * @param  {Object}   beanObject\n * @param  {String}   beanName\n * @param  {Function} cb async init callback function\n * @api private\n */\nBeanFactory.prototype.initBean = function(beanObject, beanName, cb) {\n\tvar beanDefinition = this.getBeanDefinition(beanName);\n\tif (!beanDefinition) {\n\t\treturn;\n\t}\n\n\tbeanObject = this.applyBeanPostProcessorsBeforeInitialization(beanObject, beanName);\n\n\tthis.invokeInitMethods(beanObject, beanName, cb);\n\n\tbeanObject = this.applyBeanPostProcessorsAfterInitialization(beanObject, beanName);\n\n\treturn beanObject;\n}\n\n/**\n * BeanFactory invoke init method.\n *\n * @param  {Object}   beanObject\n * @param  {String}   beanName\n * @param  {Function} cb async init callback function\n * @api private\n */\nBeanFactory.prototype.invokeInitMethods = function(beanObject, beanName, cb) {\n\tvar beanDefinition = this.getBeanDefinition(beanName);\n\tif (!beanDefinition) {\n\t\treturn;\n\t}\n\n\tif (beanDefinition.hasInitMethod()) {\n\t\tvar initMethodName = beanDefinition.getInitMethodName();\n\n\t\t// run init method\n\t\tvar initMethod = beanObject[initMethodName];\n\t\tif (Utils.checkFunction(initMethod)) {\n\t\t\tinitMethod.call(beanObject, cb);\n\t\t}\n\t}\n}\n\n/**\n * BeanFactory get bean instance from factoryBean's factory method.\n *\n * @param  {String} beanName\n * @return {Object} bean object\n * @api private\n */\nBeanFactory.prototype.getBeanFromFactoryBean = function(beanName) {\n\tvar beanDefinition = this.getBeanDefinition(beanName);\n\n\tvar factoryBeanName = beanDefinition.getFactoryBeanName();\n\tvar factoryMethodName = beanDefinition.getFactoryMethodName();\n\tvar factoryArgsOn = beanDefinition.getFactoryArgsOn();\n\n\tvar factoryBean = this.getBean(factoryBeanName);\n\n\tif (!factoryBean) {\n\t\treturn null;\n\t}\n\n\tvar factoryMethod = factoryBean[factoryMethodName];\n\n\tvar dependsBeans = this.getDependsBeanValues(factoryArgsOn, arguments);\n\n\tvar dependsApplyArgs = this.getDependsApplyArgs(dependsBeans);\n\n\tvar beanObject = factoryMethod.apply(factoryBean, dependsApplyArgs);\n\n\treturn beanObject;\n}\n\n/**\n * BeanFactory get denpended beans or values.\n *\n * @param  {Array} dependsOn\n * @param  {Array} args arguments\n * @return {Array} depended bean value list\n * @api private\n */\nBeanFactory.prototype.getDependsBeanValues = function(dependsOn, args) {\n\tvar r = [];\n\tif (!Utils.checkArray(dependsOn)) {\n\t\treturn r;\n\t}\n\n\tvar s = 1;\n\tfor (var i = 0; i < dependsOn.length; i++) {\n\t\tvar wbean = dependsOn[i];\n\t\tvar beanName = wbean.getRef();\n\n\t\tif (wbean.getDependType() === Constant.DEPEND_TYPE_BEAN) {\n\t\t\tvar bean = this.getBean(beanName);\n\t\t\tif (bean) {\n\t\t\t\twbean.setBean(bean);\n\t\t\t}\n\t\t}\n\n\t\tif (wbean.getDependType() === Constant.DEPEND_TYPE_VAR) {\n\t\t\tvar value = args[s++];\n\t\t\twbean.setValue(value);\n\t\t}\n\n\t\tr.push(wbean);\n\t}\n\n\treturn r;\n}\n\n/**\n * BeanFactory get depended apply arguments.\n *\n * @param  {Array} dependsOn\n * @return {Array} depended bean apply list\n * @api private\n */\nBeanFactory.prototype.getDependsApplyArgs = function(dependsOn) {\n\tvar r = [];\n\n\tif (!Utils.checkArray(dependsOn)) {\n\t\treturn r;\n\t}\n\n\tfor (var i = 0; i < dependsOn.length; i++) {\n\t\tvar wbean = dependsOn[i];\n\t\tif (wbean.getDependType() === Constant.DEPEND_TYPE_BEAN) {\n\t\t\tr.push(wbean.getBean());\n\t\t} else if (wbean.getDependType() === Constant.DEPEND_TYPE_VALUE) {\n\t\t\tr.push(wbean.getValue());\n\t\t} else if (wbean.getDependType() === Constant.DEPEND_TYPE_VAR) {\n\t\t\tr.push(wbean.getValueOnce());\n\t\t} else {\n\t\t\t// DEPEND_TYPE_ERROR\n\t\t\tlogger.error(\"getDependsApplyArgs depends args type error %j\", wbean);\n\t\t}\n\t}\n\n\treturn r;\n}\n\n/**\n * BeanFactory set parent bean.\n *\n * @param  {String} beanName\n * @return {Object} beanDefinition\n * @api public\n */\nBeanFactory.prototype.setParentBean = function(beanName) {\n\tvar beanDefinition = this.getBeanDefinition(beanName);\n\tif (!beanDefinition) {\n\t\treturn null;\n\t}\n\n\tvar parentName = beanDefinition.getParentName();\n\tvar parentBeanDefintion = this.getBeanDefinition(parentName);\n\n\tvar func = this.getBeanFunction(beanName);\n\n\tvar parentFunc = this.getBeanFunction(parentName);\n\n\tif (parentFunc) {\n\t\tvar proto = parentFunc.prototype;\n\t\tfor (var key in proto) {\n\t\t\tif (!func.prototype[key]) {\n\t\t\t\tfunc.prototype[key] = proto[key];\n\t\t\t}\n\t\t}\n\t}\n\n\tif (parentBeanDefintion) {\n\t\tbeanDefinition.setParentBean(parentBeanDefintion);\n\t\tbeanDefinition.setArgsOn(parentBeanDefintion.getArgs());\n\t\tbeanDefinition.setPropsOn(parentBeanDefintion.getProps());\n\t\tbeanDefinition.setFactoryArgsOn(parentBeanDefintion.getFactoryArgs());\n\t}\n\n\treturn beanDefinition;\n}\n\n/**\n * BeanFactory register beans through metaObjects into BeanFactory.\n *\n * @param  {Object} metaObjects\n * @api public\n */\nBeanFactory.prototype.registerBeans = function(metaObjects) {\n\tfor (var beanName in metaObjects) {\n\t\tthis.registerBean(beanName, metaObjects[beanName]);\n\t}\n}\n\n/**\n * BeanFactory register bean through metaObject into BeanFactory.\n *\n * @param  {String} beanName\n * @param  {Object} metaObjects\n * @api public\n */\nBeanFactory.prototype.registerBean = function(beanName, metaObject) {\n\tvar func = metaObject.func;\n\n\tvar validateResult = ValidatorUtil.metaValidator(metaObject);\n\tif (validateResult !== true) {\n\t\tlogger.error(\"registryBean %j metaObject %j validate error %s\", beanName, metaObject, validateResult.stack);\n\t\treturn;\n\t}\n\n\tvar mid = metaObject.mid;\n\tif (mid) {\n\t\t// register bearcat model\n\t\tthis.registerModel(beanName, mid, metaObject);\n\t}\n\n\tvar cid = metaObject.cid;\n\tif (cid) {\n\t\t// register bearcat constraint\n\t\tthis.registerConstraint(beanName, cid, metaObject);\n\t}\n\n\tif (func && Utils.checkFunction(func) && !this.getBeanFunction(beanName)) {\n\t\tthis.setBeanFunction(beanName, func);\n\t}\n\n\tvar order = metaObject.order;\n\tvar parentName = metaObject.parent;\n\tvar initMethodName = metaObject.init;\n\tvar destroyMethodName = metaObject.destroy;\n\tvar factoryBeanName = metaObject.factoryBean;\n\tvar factoryMethodName = metaObject.factoryMethod;\n\tvar scope = metaObject.scope || Constant.SCOPE_DEFAULT;\n\tvar args = metaObject.args || Constant.ARGS_DEFAULT;\n\tvar props = metaObject.props || Constant.PROPS_DEFAULT;\n\tvar factoryArgsOn = metaObject.factoryArgs || Constant.ARGS_DEFAULT;\n\tvar asyncInit = metaObject.async || Constant.ASYNC_INIT_DEFAULT;\n\tvar lazyInit = metaObject.lazy || Constant.LAZY_INIT_DEFAULT;\n\tvar abstract = metaObject.abstract || Constant.ABSTRACT_DEFAULT;\n\tvar proxy = metaObject.proxy;\n\tif (!Utils.isNotNull(proxy)) {\n\t\tproxy = Constant.PROXY_DEFAULT;\n\t}\n\n\tvar aop = metaObject.aop;\n\n\tvar beanDefinition = null;\n\tbeanDefinition = this.getBeanDefinition(beanName);\n\tif (!beanDefinition) {\n\t\tbeanDefinition = new BeanDefinition();\n\t}\n\n\t// model scope should be prototype\n\tif (mid) {\n\t\tscope = Constant.SCOPE_PROTOTYPE;\n\t}\n\n\tbeanDefinition.setFunc(func);\n\tbeanDefinition.setOrder(order);\n\tbeanDefinition.setScope(scope);\n\tbeanDefinition.setProxy(proxy);\n\tbeanDefinition.setBeanName(beanName);\n\tbeanDefinition.setLazyInit(lazyInit);\n\tbeanDefinition.setAbstract(abstract);\n\tbeanDefinition.setAsyncInit(asyncInit);\n\tbeanDefinition.setParentName(parentName);\n\tbeanDefinition.setInitMethodName(initMethodName);\n\tbeanDefinition.setFactoryBeanName(factoryBeanName);\n\tbeanDefinition.setFactoryMethodName(factoryMethodName);\n\tbeanDefinition.setDestroyMethodName(destroyMethodName);\n\tbeanDefinition.setArgsOn(BeanUtil.buildBeanWrapper(args));\n\tbeanDefinition.setPropsOn(BeanUtil.buildBeanWrapper(props));\n\tbeanDefinition.setFactoryArgsOn(BeanUtil.buildBeanWrapper(factoryArgsOn));\n\n\tif (aop && Utils.checkArray(aop)) {\n\t\tvar aspect = AopUtil.buildAspect(aop, beanDefinition);\n\t\tthis.aspects.push(aspect);\n\t\tbeanDefinition.setAspect(true);\n\t}\n\n\tthis.beanDefinitions[beanName] = beanDefinition;\n}\n\n/**\n * BeanFactory register model through metaObject into BeanFactory.\n *\n * @param  {String} beanName bean id\n * @param  {String} modelId  model id\n * @param  {Object} metaObject\n * @api public\n */\nBeanFactory.prototype.registerModel = function(beanName, modelId, metaObject) {\n\tvar modelDefinition = null;\n\tmodelDefinition = this.getModelDefinition(modelId);\n\tif (!modelDefinition) {\n\t\tmodelDefinition = new ModelDefinition();\n\t}\n\n\tvar table = metaObject.table;\n\tvar prefix = metaObject.prefix;\n\tvar attributes = metaObject.attributes;\n\n\tvar resolvedAttributes = ModelUtil.buildModelAttribute(attributes, this);\n\n\tmodelDefinition.setId(beanName);\n\tmodelDefinition.setMid(modelId);\n\tmodelDefinition.setTable(table);\n\tmodelDefinition.setPrefix(prefix);\n\tmodelDefinition.setFields(resolvedAttributes['fields']);\n\tmodelDefinition.setBalance(resolvedAttributes['balance']);\n\tmodelDefinition.setRefFields(resolvedAttributes['refFields']);\n\tmodelDefinition.setOneToMany(resolvedAttributes['oneToMany']);\n\n\tif (Utils.isNotNull(table)) {\n\t\tthis.setTableModelMap(table, modelDefinition);\n\t}\n\n\tthis.modelMap[modelId] = modelDefinition;\n}\n\n/**\n * BeanFactory register constraint through metaObject into BeanFactory.\n *\n * @param  {String} beanName bean id\n * @param  {String} cid      constraint id\n * @param  {Object} metaObject\n * @api public\n */\nBeanFactory.prototype.registerConstraint = function(beanName, cid, metaObject) {\n\tvar constraintDefinition = null;\n\tconstraintDefinition = this.getConstraintDefinition(cid);\n\tif (!constraintDefinition) {\n\t\tconstraintDefinition = new ModelConstraint();\n\t}\n\n\tvar message = metaObject.message;\n\tvar constraint = metaObject.constraint;\n\n\tconstraintDefinition.setId(beanName);\n\tconstraintDefinition.setCid(cid);\n\tconstraintDefinition.setConstraint(constraint);\n\n\tthis.constraints[cid] = constraintDefinition;\n}\n\n/**\n * BeanFactory instantiating singletion beans in advance.\n *\n * @param  {Function} cb callback function\n * @api public\n */\nBeanFactory.prototype.preInstantiateSingletons = function(cb) {\n\tvar beanDefinitionOrderList = BeanUtil.sortBeanDefinitions(this.beanDefinitions, this);\n\tvar self = this;\n\n\tvar index = 0;\n\tvar next = function(err) {\n\t\tif (err || index >= beanDefinitionOrderList.length) {\n\t\t\treturn cb(err);\n\t\t}\n\n\t\tvar beanDefinition = beanDefinitionOrderList[index++];\n\t\tvar beanName = beanDefinition.getBeanName();\n\n\t\tif (beanDefinition.isAsyncInit()) {\n\t\t\tif (!self.singletonBeanFactory.containsSingleton(beanName)) {\n\t\t\t\tvar initCb = function() {\n\t\t\t\t\tnext();\n\t\t\t\t}\n\t\t\t\tself.setInitCb(beanName, initCb);\n\t\t\t\tself.getBean(beanName);\n\t\t\t} else {\n\t\t\t\tself.getBean(beanName);\n\t\t\t\tnext()\n\t\t\t}\n\t\t} else {\n\t\t\tvar initCb = function() {}\n\t\t\tself.setInitCb(beanName, initCb);\n\t\t\tself.getBean(beanName);\n\t\t\tnext();\n\t\t}\n\t}\n\n\tnext();\n}\n\n/**\n * BeanFactory add beanPostProcessor to BeanFactory.\n * @param  {Object} beanPostProcessor\n * @api public\n */\nBeanFactory.prototype.addBeanPostProcessor = function(beanPostProcessor) {\n\tthis.beanPostProcessors.push(beanPostProcessor);\n}\n\n/**\n * BeanFactory get beanPostProcessors.\n * @return {Object} beanPostProcessors\n * @api public\n */\nBeanFactory.prototype.getBeanPostProcessors = function() {\n\treturn this.beanPostProcessors;\n}\n\n/**\n * BeanFactory apply beanPostBeforeProcessors.\n * @param  {Object} beanObject\n * @param  {String} beanName\n * @return {Object} beanObject\n * @api private\n */\nBeanFactory.prototype.applyBeanPostProcessorsBeforeInitialization = function(beanObject, beanName) {\n\tvar result = beanObject;\n\n\tvar beanPostProcessors = this.getBeanPostProcessors();\n\tfor (var i = 0; i < beanPostProcessors.length; i++) {\n\t\tvar beanProcessor = beanPostProcessors[i];\n\t\tresult = beanProcessor.before(result, beanName);\n\t\tif (!result) {\n\t\t\treturn result;\n\t\t}\n\t}\n\n\treturn result;\n}\n\n/**\n * BeanFactory apply beanPostAfterProcessors.\n * @param  {Object} beanObject\n * @param  {String} beanName\n * @return {Object} beanObject\n * @api private\n */\nBeanFactory.prototype.applyBeanPostProcessorsAfterInitialization = function(beanObject, beanName) {\n\tvar result = beanObject;\n\n\tvar beanPostProcessors = this.getBeanPostProcessors();\n\tfor (var i = 0; i < beanPostProcessors.length; i++) {\n\t\tvar beanProcessor = beanPostProcessors[i];\n\t\tresult = beanProcessor.after(result, beanName);\n\t\tif (!result) {\n\t\t\treturn result;\n\t\t}\n\t}\n\n\treturn result;\n}\n\n/**\n * BeanFactory destroy singletons.\n *\n * @api public\n */\nBeanFactory.prototype.destroySingletons = function() {\n\tvar singletonNames = this.singletonBeanFactory.getSingletonNames();\n\n\tfor (var i = 0; i < singletonNames.length; i++) {\n\t\tthis.destroySingleton(singletonNames[i]);\n\t}\n}\n\n/**\n * BeanFactory destroy BeanFactory.\n *\n * @api public\n */\nBeanFactory.prototype.destroyBeanFactory = function() {\n\tthis.initCbMap = null;\n\tthis.beanCurMap = null;\n\tthis.beanFunctions = null;\n\tthis.beanDefinitions = null;\n\tthis.singletonBeanFactory = null;\n}\n\n/**\n * BeanFactory destroy singleton.\n *\n * @param  {String} beanName\n * @api public\n */\nBeanFactory.prototype.destroySingleton = function(beanName) {\n\tvar beanDefinition = this.getBeanDefinition(beanName);\n\tif (!beanDefinition) {\n\t\treturn;\n\t}\n\n\tvar beanObject = this.getBean(beanName);\n\n\tthis.destroyBean(beanName, beanObject);\n\n\tthis.singletonBeanFactory.removeSingleton(beanName);\n}\n\n/**\n * BeanFactory destroy bean.\n *\n * @param  {String} beanName\n * @param  {Object} beanObject\n * @api public\n */\nBeanFactory.prototype.destroyBean = function(beanName, beanObject) {\n\tvar beanDefinition = this.getBeanDefinition(beanName);\n\tif (!beanDefinition) {\n\t\treturn;\n\t}\n\n\tvar destroyMethodName = beanDefinition.getDestroyMethodName();\n\n\tvar destroyMethod = beanObject[destroyMethodName];\n\tif (Utils.checkFunction(destroyMethod)) {\n\t\tdestroyMethod.call(beanObject);\n\t}\n\n\tthis.removeFunction(beanName);\n\tthis.removeBeanDefinition(beanName);\n}\n\n/**\n * BeanFactory check bean is a singleton or not.\n *\n * @param  {String} beanName\n * @return {Boolean}\n * @api public\n */\nBeanFactory.prototype.isSingleton = function(beanName) {\n\tvar beanDefinition = this.getBeanDefinition(beanName);\n\tif (beanDefinition) {\n\t\treturn beanDefinition.isSingleton();\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/**\n * BeanFactory check bean is a prototype or not.\n *\n * @param  {String} beanName\n * @return {Boolean}\n * @api public\n */\nBeanFactory.prototype.isPrototype = function(beanName) {\n\tvar beanDefinition = this.getBeanDefinition(beanName);\n\tif (beanDefinition) {\n\t\treturn beanDefinition.isPrototype();\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/**\n * BeanFactory check BeanFactory contains bean or not.\n *\n * @param  {String} beanName\n * @return {Boolean}\n * @api public\n */\nBeanFactory.prototype.containsBean = function(beanName) {\n\treturn !!this.getBeanFunction(beanName) && !!this.getBeanDefinition(beanName);\n}\n\n/**\n * BeanFactory get bean contructor function.\n *\n * @param  {String} beanName\n * @return {Function} bean constructor function\n * @api public\n */\nBeanFactory.prototype.getBeanFunction = function(beanName) {\n\treturn this.beanFunctions[beanName];\n}\n\n/**\n * BeanFactory set bean contructor function.\n *\n * @param  {String}   beanName\n * @param  {Function} func bean constructor function\n * @api public\n */\nBeanFactory.prototype.setBeanFunction = function(beanName, func) {\n\tthis.beanFunctions[beanName] = func;\n}\n\n/**\n * BeanFactory remove bean contructor function from BeanFactory.\n *\n * @param  {String} beanName\n * @api public\n */\nBeanFactory.prototype.removeFunction = function(beanName) {\n\tdelete this.beanFunctions[beanName];\n}\n\n/**\n * BeanFactory get init method.\n *\n * @param  {String}   beanName\n * @return {Function} bean init method\n * @api public\n */\nBeanFactory.prototype.getInitCb = function(beanName) {\n\tif (!this.initCbMap[beanName]) {\n\t\tthis.initCbMap[beanName] = Constant.INIT_CB_DEFAULT;\n\t}\n\n\treturn this.initCbMap[beanName];\n}\n\n/**\n * BeanFactory set init method.\n *\n * @param  {String}   beanName\n * @param  {Function} initCb bean init method\n * @api public\n */\nBeanFactory.prototype.setInitCb = function(beanName, initCb) {\n\tthis.initCbMap[beanName] = initCb;\n}\n\n/**\n * BeanFactory get beanDefinition.\n *\n * @param  {String} beanName\n * @return {Object} beanDefinition\n * @api public\n */\nBeanFactory.prototype.getBeanDefinition = function(beanName) {\n\treturn this.beanDefinitions[beanName];\n}\n\n/**\n * BeanFactory get beanDefinitions.\n *\n * @return {Object} beanDefinitions\n * @api public\n */\nBeanFactory.prototype.getBeanDefinitions = function() {\n\treturn this.beanDefinitions;\n}\n\n/**\n * BeanFactory remove beanDefinition from BeanFactory.\n *\n * @param  {String} beanName\n * @api public\n */\nBeanFactory.prototype.removeBeanDefinition = function(beanName) {\n\tdelete this.beanDefinitions[beanName];\n}\n\n/**\n * BeanFactory check BeanFactory contains beanName beanDefinition or not.\n *\n * @param  {String} beanName\n * @return {Boolean}\n * @api public\n */\nBeanFactory.prototype.containsBeanDefinition = function(beanName) {\n\treturn !!this.getBeanDefinition(beanName);\n}\n\n/**\n * BeanFactory get aspects.\n *\n * @return {Array} aspects\n * @api public\n */\nBeanFactory.prototype.getAspects = function() {\n\treturn this.aspects;\n}\n\n/**\n * BeanFactory get modelDefinition.\n *\n * @param  {String} modelId\n * @return {Object} modelDefinition\n * @api public\n */\nBeanFactory.prototype.getModelDefinition = function(modelId) {\n\treturn this.modelMap[modelId];\n}\n\n/**\n * BeanFactory get modelDefinitions.\n *\n * @return {Object} modelDefinition map\n * @api public\n */\nBeanFactory.prototype.getModelDefinitions = function() {\n\treturn this.modelMap;\n}\n\n/**\n * BeanFactory get getConstraintDefinition.\n *\n * @param  {String} cid\n * @return {Object} getConstraintDefinition\n * @api public\n */\nBeanFactory.prototype.getConstraintDefinition = function(cid) {\n\treturn this.constraints[cid];\n}\n\n/**\n * BeanFactory set table model map.\n *\n * @param  {String} table name\n * @param  {Object} modelDefinition\n * @api public\n */\nBeanFactory.prototype.setTableModelMap = function(table, modelDefinition) {\n\tthis.tableModelMap[table] = modelDefinition;\n}\n\n/**\n * BeanFactory get modelDefinition by table.\n *\n * @param   {String} table name\n * @return  {Object} modelDefinition\n * @api public\n */\nBeanFactory.prototype.getModelDefinitionByTable = function(table) {\n\treturn this.tableModelMap[table];\n}\n\nmodule.exports = BeanFactory;","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/aop/framework/dynamicMetaProxy.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat DynamicMetaProxy\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>\n * MIT Licensed\n */\n\nvar logger = require('pomelo-logger').getLogger('bearcat', 'DynamicMetaProxy');\nvar Utils = require('../../util/utils');\n\n/**\n * DynamicMetaProxy constructor function.\n * this proxy will be used in bearcat.getBeanByMeta()\n * getBeanByMeta will first return a dynamicMetaProxy,\n * when target bean invoked, it will call getBean to get the target object\n *\n * @api public\n */\nvar DynamicMetaProxy = function() {\n\tthis.args = null;\n\tthis.target = null;\n\tthis.beanFactory = null;\n\tthis.beanDefinition = null;\n}\n\n/**\n * DynamicMetaProxy init function.\n *\n * @api public\n */\nDynamicMetaProxy.prototype._dyInit = function() {\n\tvar beanDefinition = this.beanDefinition;\n\tif (!beanDefinition) {\n\t\tlogger.error('init error no beanDefinition.');\n\t\treturn;\n\t}\n\n\tvar self = this;\n\n\tvar func = beanDefinition.getFunc();\n\n\tif (Utils.checkFunction(func)) {\n\t\tvar proto = func.prototype;\n\t\tfor (interface in proto) {\n\t\t\tif (Utils.checkFunction(proto[interface])) {\n\t\t\t\t(function(method) {\n\t\t\t\t\tif (checkFuncName(method)) {\n\t\t\t\t\t\tlogger.error('init error proxy method interface %j the same as DynamicMetaProxy, rename this name to another.', method)\n\t\t\t\t\t\treturn;\n\t\t\t\t\t};\n\n\t\t\t\t\tself[method] = function() {\n\t\t\t\t\t\treturn self._dyInvoke(method, arguments);\n\t\t\t\t\t};\n\t\t\t\t})(interface);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * DynamicMetaProxy proxy invoke function.\n *\n * @param  {String} method proxy method name\n * @param  {Array}  args target invoke arguments\n * @api private\n */\nDynamicMetaProxy.prototype._dyInvoke = function(method, args) {\n\tvar targetBean = this._getBean();\n\tif (Utils.checkFunction(targetBean[method])) {\n\t\treturn targetBean[method].apply(targetBean, args);\n\t} else {\n\t\tlogger.error('invoke error no such method %s in the target bean', method);\n\t}\n}\n\n/**\n * DynamicMetaProxy get target bean through beanFactory.\n *\n * @return  {Object}  target bean\n * @api public\n */\nDynamicMetaProxy.prototype._getBean = function() {\n\tvar args = this.args;\n\n\tvar beanFactory = this.beanFactory;\n\tif (!this.target) {\n\t\tthis.target = beanFactory.getBean.apply(beanFactory, args);\n\t}\n\n\treturn this.target;\n}\n\nvar names = [\"_dyInit\", \"_dyInvoke\", \"_getBean\"];\n\nvar checkFuncName = function(name) {\n\tfor (var i = 0; i < names.length; i++) {\n\t\tif (name === names[i]) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\nmodule.exports = DynamicMetaProxy;","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/beans/singletonBeanFactory.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat SingletonBeanFactory\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>\n * MIT Licensed\n */\n\nvar logger = require('pomelo-logger').getLogger('bearcat', 'SingletonBeanFactory');\n\n/**\n * SingletonBeanFactory constructor function.\n *\n * @api public\n */\nvar SingletonBeanFactory = function(beanFactory) {\n\tthis.beanFactory = beanFactory;\n\tthis.singletonObjects = {};\n}\n\n/**\n * SingletonBeanFactory add singleton to SingletonBeanFactory.\n *\n * @param  {String} beanName\n * @param  {Object} beanObject\n * @api public\n */\nSingletonBeanFactory.prototype.addSingleton = function(beanName, beanObject) {\n\tthis.singletonObjects[beanName] = beanObject;\n}\n\n/**\n * SingletonBeanFactory check SingletonBeanFactory contains singleton or not.\n *\n * @param  {String} beanName\n * @return {Boolean}\n * @api public\n */\nSingletonBeanFactory.prototype.containsSingleton = function(beanName) {\n\treturn !!this.singletonObjects[beanName];\n}\n\n/**\n * SingletonBeanFactory get singleton from SingletonBeanFactory.\n *\n * @param  {String} beanName\n * @return {Object} singletonObject\n * @api public\n */\nSingletonBeanFactory.prototype.getSingleton = function(beanName) {\n\tvar beanFactory = this.beanFactory;\n\n\tvar bean = this.singletonObjects[beanName];\n\tif (bean) {\n\t\treturn bean;\n\t} else {\n\t\tbean = beanFactory.createBean.apply(beanFactory, arguments);\n\t}\n\n\tthis.addSingleton(beanName, bean);\n\n\treturn bean;\n}\n\n/**\n * SingletonBeanFactory get all singleton names from SingletonBeanFactory.\n *\n * @api public\n */\nSingletonBeanFactory.prototype.getSingletonNames = function() {\n\tvar r = [];\n\tfor (var name in this.singletonObjects) {\n\t\tr.push(name);\n\t}\n\n\treturn r;\n}\n\n/**\n * SingletonBeanFactory remove singleton from SingletonBeanFactory.\n *\n * @param  {String} beanName\n * @api public\n */\nSingletonBeanFactory.prototype.removeSingleton = function(beanName) {\n\tdelete this.singletonObjects[beanName];\n}\n\nmodule.exports = SingletonBeanFactory;","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/model/modelConstraint.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat ModelConstraint\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>\n * MIT Licensed\n */\n\n/**\n * ModelConstraint constructor function.\n *\n * @api public\n */\nvar ModelConstraint = function() {\n\tthis.id = null;\n\tthis.cid = null;\n\tthis.constraint = null;\n}\n\n/**\n * ModelConstraint set bean id.\n *\n * @param   {String} bean id\n * @api public\n */\nModelConstraint.prototype.setId = function(id) {\n\tthis.id = id;\n}\n\n/**\n * ModelConstraint get bean id.\n *\n * @return   {String} bean id\n * @api public\n */\nModelConstraint.prototype.getId = function() {\n\treturn this.id;\n}\n\n/**\n * ModelConstraint set constraint id.\n *\n * @param   {String} constraint id\n * @api public\n */\nModelConstraint.prototype.setCid = function(cid) {\n\tthis.cid = cid;\n}\n\n/**\n * ModelConstraint get bean id.\n *\n * @return   {String} constraint id\n * @api public\n */\nModelConstraint.prototype.getCid = function() {\n\treturn this.cid;\n}\n\n/**\n * ModelConstraint set constraint expression.\n *\n * @param   {String} constraint expression\n * @api public\n */\nModelConstraint.prototype.setConstraint = function(constraint) {\n\tthis.constraint = constraint;\n}\n\n/**\n * ModelConstraint get constraint expression.\n *\n * @return   {String} constraint expression\n * @api public\n */\nModelConstraint.prototype.getConstraint = function() {\n\treturn this.constraint;\n}\n\nmodule.exports = ModelConstraint;","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/model/modelDefinition.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat ModelDefinition\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>\n * MIT Licensed\n */\n\nvar Utils = require('../util/utils');\n\n/**\n * ModelDefinition constructor function.\n *\n * @api public\n */\nvar ModelDefinition = function() {\n\tthis.id = null;\n\tthis.mid = null;\n\tthis.table = null;\n\tthis.prefix = null;\n\tthis.balance = null;\n\tthis.fields = {};\n\tthis.refFields = [];\n\tthis.modelKeyMap = {};\n\tthis.oneToMany = false;\n}\n\n/**\n * ModelDefinition set bean id.\n *\n * @param   {String} bean id\n * @api public\n */\nModelDefinition.prototype.setId = function(id) {\n\tthis.id = id;\n}\n\n/**\n * ModelDefinition get bean id.\n *\n * @return   {String} bean id\n * @api public\n */\nModelDefinition.prototype.getId = function() {\n\treturn this.id;\n}\n\n/**\n * ModelDefinition set model id.\n *\n * @param   {String} model id\n * @api public\n */\nModelDefinition.prototype.setMid = function(mid) {\n\tthis.mid = mid;\n}\n\n/**\n * ModelDefinition get model id.\n *\n * @return   {String} model id\n * @api public\n */\nModelDefinition.prototype.getMid = function() {\n\treturn this.mid;\n}\n\n/**\n * ModelDefinition set ORM table.\n *\n * @param   {String} ORM table\n * @api public\n */\nModelDefinition.prototype.setTable = function(table) {\n\tif (!table) {\n\t\treturn;\n\t}\n\n\tthis.table = table;\n}\n\n/**\n * ModelDefinition get ORM table.\n *\n * @return   {String} ORM table\n * @api public\n */\nModelDefinition.prototype.getTable = function() {\n\treturn this.table;\n}\n\n/**\n * ModelDefinition set model definition prefix.\n *\n * @param   {String} model definition prefix\n * @api public\n */\nModelDefinition.prototype.setPrefix = function(prefix) {\n\tif (!prefix) {\n\t\treturn;\n\t}\n\n\tthis.prefix = prefix;\n}\n\n/**\n * ModelDefinition get model definition prefix.\n *\n * @return   {String} model definition prefix\n * @api public\n */\nModelDefinition.prototype.getPrefix = function() {\n\treturn this.prefix;\n}\n\n/**\n * ModelDefinition set model definition balance field for ddb sharding.\n *\n * @param   {String} model definition balance field\n * @api public\n */\nModelDefinition.prototype.setBalance = function(balance) {\n\tif (!balance) {\n\t\treturn;\n\t}\n\n\tthis.balance = balance;\n}\n\n/**\n * ModelDefinition get model definition balance field for ddb sharding.\n *\n * @return   {String} model definition balance field\n * @api public\n */\nModelDefinition.prototype.getBalance = function() {\n\treturn this.balance;\n}\n\n/**\n * ModelDefinition set model fields.\n *\n * @param   {Array} model fields\n * @api public\n */\nModelDefinition.prototype.setFields = function(fields) {\n\tif (Utils.isNotNull(fields)) {\n\t\tthis.fields = fields;\n\t}\n}\n\n/**\n * ModelDefinition get model fields.\n *\n * @return   {Array} model fields\n * @api public\n */\nModelDefinition.prototype.getFields = function() {\n\treturn this.fields;\n}\n\n/**\n * ModelDefinition get model field by key.\n *\n * @return   {Object} model field\n * @api public\n */\nModelDefinition.prototype.getField = function(key) {\n\treturn this.fields[key];\n}\n\n/**\n * ModelDefinition add ref field name.\n *\n * @param   {String} ref field name\n * @api public\n */\nModelDefinition.prototype.addRefField = function(refField) {\n\tthis.refFields.push(refField);\n}\n\n/**\n * ModelDefinition set ref fields.\n *\n * @param   {Array} ref fields\n * @api public\n */\nModelDefinition.prototype.setRefFields = function(refFields) {\n\tif (Utils.isNotNull(refFields)) {\n\t\tthis.refFields = refFields;\n\t}\n}\n\n/**\n * ModelDefinition get ref fields.\n *\n * @return   {Array} ref fields\n * @api public\n */\nModelDefinition.prototype.getRefFields = function() {\n\treturn this.refFields;\n}\n\n/**\n * ModelDefinition set model key map used for resultSet to model object mapping.\n *\n * @param   {Object} model key map\n * @api public\n */\nModelDefinition.prototype.setModelKeyMap = function(modelKeyMap) {\n\tthis.modelKeyMap = modelKeyMap;\n}\n\n/**\n * ModelDefinition get model key map used for resultSet to model object mapping.\n *\n * @return   {Object} model key map\n * @api public\n */\nModelDefinition.prototype.getModelKeyMap = function() {\n\treturn this.modelKeyMap;\n}\n\n/**\n * ModelDefinition set model oneToMany relation.\n *\n * @param   {Boolean} oneToMany relation\n * @api public\n */\nModelDefinition.prototype.setOneToMany = function(oneToMany) {\n\tthis.oneToMany = oneToMany;\n}\n\n/**\n * ModelDefinition check model oneToMany relation.\n *\n * @return   {Boolean} if it is oneToMany relation\n * @api public\n */\nModelDefinition.prototype.isOneToMany = function() {\n\treturn this.oneToMany;\n}\n\nmodule.exports = ModelDefinition;","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/beans/support/beanDefinition.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat BeanDefinition\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>\n * MIT Licensed\n */\n\nvar Constant = require('../../util/constant');\nvar BeanUtils = require('../../util/beanUtil');\nvar Utils = require('../../util/utils');\n\n/**\n * BeanDefinition constructor function.\n *\n * @api public\n */\nvar BeanDefinition = function() {\n\tthis.argsOn = [];\n\tthis.propsOn = [];\n\tthis.func = null;\n\tthis.order = null;\n\tthis.proxy = true;\n\tthis.aspect = false;\n\tthis.abstract = false;\n\tthis.lazyInit = false;\n\tthis.asyncInit = false;\n\tthis.parentName = null;\n\tthis.parentBean = null;\n\tthis.beanName = null;\n\tthis.factoryArgsOn = {};\n\tthis.factoryBeanName = null;\n\tthis.factoryMethodName = null;\n\tthis.initMethodName = null;\n\tthis.destroyMethodName = null;\n\tthis.scope = Constant.SCOPE_DEFAULT;\n}\n\n/**\n * BeanDefinition get parentName.\n *\n * @return  {String} parentName\n * @api public\n */\nBeanDefinition.prototype.getParentName = function() {\n\treturn this.parentName;\n}\n\n/**\n * BeanDefinition set parentName.\n *\n * @param  {String} parentName\n * @api public\n */\nBeanDefinition.prototype.setParentName = function(parentName) {\n\tif (!parentName) {\n\t\treturn;\n\t}\n\tthis.parentName = parentName;\n}\n\n/**\n * BeanDefinition check whether has parent bean.\n *\n * @return  {Boolean} true|false\n * @api public\n */\nBeanDefinition.prototype.hasParentBean = function() {\n\treturn this.getParentName() && !this.getParentBean();\n}\n\n/**\n * BeanDefinition get parent bean.\n *\n * @return  {Object} parent bean\n * @api public\n */\nBeanDefinition.prototype.getParentBean = function() {\n\treturn this.parentBean;\n}\n\n/**\n * BeanDefinition set parent bean.\n *\n * @param  {Object} parentBean parent bean\n * @api public\n */\nBeanDefinition.prototype.setParentBean = function(parentBean) {\n\tif (!parentBean) {\n\t\treturn;\n\t}\n\tthis.parentBean = parentBean;\n}\n\n/**\n * BeanDefinition get beanName.\n *\n * @return  {String} beanName\n * @api public\n */\nBeanDefinition.prototype.getBeanName = function() {\n\treturn this.beanName;\n}\n\n/**\n * BeanDefinition set beanName.\n *\n * @param  {String} beanName\n * @api public\n */\nBeanDefinition.prototype.setBeanName = function(beanName) {\n\tif (!beanName) {\n\t\treturn;\n\t}\n\treturn this.beanName = beanName;\n}\n\n/**\n * BeanDefinition get factoryBeanName.\n *\n * @return  {String} factoryBeanName\n * @api public\n */\nBeanDefinition.prototype.getFactoryBeanName = function() {\n\tif (this.factoryBeanName) {\n\t\treturn this.factoryBeanName;\n\t} else {\n\t\tif (this.parentBean) {\n\t\t\treturn this.parentBean.factoryBeanName;\n\t\t}\n\t}\n}\n\n/**\n * BeanDefinition set factoryBeanName.\n *\n * @param  {String} factoryBeanName\n * @api public\n */\nBeanDefinition.prototype.setFactoryBeanName = function(factoryBeanName) {\n\tif (!factoryBeanName) {\n\t\treturn;\n\t}\n\tthis.factoryBeanName = factoryBeanName;\n}\n\n/**\n * BeanDefinition get factoryMethodName.\n *\n * @return  {String} factoryMethodName\n * @api public\n */\nBeanDefinition.prototype.getFactoryMethodName = function() {\n\tif (this.factoryMethodName) {\n\t\treturn this.factoryMethodName;\n\t} else {\n\t\tif (this.parentBean) {\n\t\t\treturn this.parentBean.factoryMethodName;\n\t\t}\n\t}\n}\n\n/**\n * BeanDefinition set factoryMethodName.\n *\n * @param  {String} factoryMethodName\n * @api public\n */\nBeanDefinition.prototype.setFactoryMethodName = function(factoryMethodName) {\n\tif (!factoryMethodName) {\n\t\treturn;\n\t}\n\tthis.factoryMethodName = factoryMethodName;\n}\n\n/**\n * BeanDefinition get bean scope: singleton(default), prototype.\n *\n * @return  {String} scope\n * @api public\n */\nBeanDefinition.prototype.getScope = function() {\n\treturn this.scope;\n}\n\n/**\n * BeanDefinition set bean scope: singleton(default), prototype.\n *\n * @param  {String} scope\n * @api public\n */\nBeanDefinition.prototype.setScope = function(scope) {\n\tif (!scope) {\n\t\treturn;\n\t}\n\tthis.scope = scope;\n}\n\n/**\n * BeanDefinition check whether is abstract.\n *\n * @return  {Boolean} true|false\n * @api public\n */\nBeanDefinition.prototype.isAbstract = function() {\n\treturn this.abstract;\n}\n\n/**\n * BeanDefinition set abstract.\n *\n * @param  {Boolean} lazyInit true|false\n * @api public\n */\nBeanDefinition.prototype.setAbstract = function(abstract) {\n\tif (Utils.isNotNull(abstract)) {\n\t\tthis.abstract = abstract;\n\t}\n}\n\n/**\n * BeanDefinition check whether is lazyInit.\n *\n * @return  {Boolean} true|false\n * @api public\n */\nBeanDefinition.prototype.isLazyInit = function() {\n\tif (this.lazyInit) {\n\t\treturn this.lazyInit;\n\t} else {\n\t\tif (this.parentBean) {\n\t\t\treturn this.parentBean.lazyInit;\n\t\t}\n\t}\n}\n\n/**\n * BeanDefinition  set lazyInit.\n *\n * @param  {Boolean} lazyInit true|false\n * @api public\n */\nBeanDefinition.prototype.setLazyInit = function(lazyInit) {\n\tif (Utils.isNotNull(lazyInit)) {\n\t\tthis.lazyInit = lazyInit;\n\t}\n}\n\n/**\n * BeanDefinition check whether need to be proxied or not.\n *\n * @return  {Boolean} true|false\n * @api public\n */\nBeanDefinition.prototype.needProxy = function() {\n\treturn this.proxy;\n}\n\n/**\n * BeanDefinition set bean need proxy or not.\n *\n * @param  {Boolean} proxy true|false\n * @api public\n */\nBeanDefinition.prototype.setProxy = function(proxy) {\n\tif (Utils.isNotNull(proxy)) {\n\t\tthis.proxy = proxy;\n\t}\n}\n\n/**\n * BeanDefinition check whether is asyncInit.\n *\n * @return  {Boolean} true|false\n * @api public\n */\nBeanDefinition.prototype.isAsyncInit = function() {\n\tif (this.asyncInit) {\n\t\treturn this.asyncInit;\n\t} else {\n\t\tif (this.parentBean) {\n\t\t\treturn this.parentBean.asyncInit;\n\t\t}\n\t}\n}\n\n/**\n * BeanDefinition set bean asyncInit or not.\n *\n * @param  {Boolean} asyncInit true|false\n * @api public\n */\nBeanDefinition.prototype.setAsyncInit = function(asyncInit) {\n\tif (Utils.isNotNull(asyncInit)) {\n\t\tthis.asyncInit = asyncInit;\n\t}\n}\n\n/**\n * BeanDefinition set bean an aspect or not.\n *\n * @param  {Boolean} aspect true|false\n * @api public\n */\nBeanDefinition.prototype.setAspect = function(aspect) {\n\tif (Utils.isNotNull(aspect)) {\n\t\tthis.aspect = aspect;\n\t}\n}\n\n/**\n * BeanDefinition check whether is a aspect.\n * an aspect do not need to be proxied\n *\n * @return  {Boolean} true|false\n * @api public\n */\nBeanDefinition.prototype.isAspect = function() {\n\tif (this.aspect) {\n\t\treturn this.aspect;\n\t} else {\n\t\tif (this.parentBean) {\n\t\t\treturn this.parentBean.aspect;\n\t\t}\n\t}\n}\n\n/**\n * BeanDefinition get bean props settings.\n *\n * @return  {Array} props settings\n * @api public\n */\nBeanDefinition.prototype.getProps = function() {\n\treturn this.propsOn;\n}\n\n/**\n * BeanDefinition get bean props settings.\n *\n * @return  {Array} props settings\n * @api public\n */\nBeanDefinition.prototype.getPropsOn = function() {\n\treturn this.propsOn;\n}\n\n/**\n * BeanDefinition set bean props settings.\n *\n * @param  {Array} propsOn props settings\n * @api public\n */\nBeanDefinition.prototype.setPropsOn = function(propsOn) {\n\tif (!propsOn || !Utils.checkArray(propsOn) || !propsOn.length) {\n\t\treturn;\n\t}\n\tthis.updateSettingsOn(this, Constant.SETTINGS_PROPS_ON, propsOn);\n}\n\n/**\n * BeanDefinition get bean args settings.\n *\n * @return  {Array} args settings\n * @api public\n */\nBeanDefinition.prototype.getArgs = function() {\n\treturn this.argsOn;\n}\n\n/**\n * BeanDefinition get bean args settings.\n *\n * @return  {Array} args settings\n * @api public\n */\nBeanDefinition.prototype.getArgsOn = function() {\n\treturn this.argsOn;\n}\n\n/**\n * BeanDefinition set bean args settings.\n *\n * @param  {Array} argsOn args settings\n * @api public\n */\nBeanDefinition.prototype.setArgsOn = function(argsOn) {\n\tif (!argsOn || !Utils.checkArray(argsOn) || !argsOn.length) {\n\t\treturn;\n\t}\n\tthis.updateSettingsOn(this, Constant.SETTINGS_ARGS_ON, argsOn);\n}\n\n/**\n * BeanDefinition get bean factory args settings.\n *\n * @return  {Array} factory args settings\n * @api public\n */\nBeanDefinition.prototype.getFactoryArgs = function() {\n\treturn this.factoryArgsOn;\n}\n\n/**\n * BeanDefinition get bean factory args settings.\n *\n * @return  {Array} factory args settings\n * @api public\n */\nBeanDefinition.prototype.getFactoryArgsOn = function() {\n\treturn this.factoryArgsOn;\n}\n\n/**\n * BeanDefinition set factory args settings.\n *\n * @param  {Array} factoryArgsOn factory args settings\n * @api public\n */\nBeanDefinition.prototype.setFactoryArgsOn = function(factoryArgsOn) {\n\tif (!factoryArgsOn || !Utils.checkArray(factoryArgsOn) || !factoryArgsOn.length) {\n\t\treturn;\n\t}\n\tthis.updateSettingsOn(this, Constant.SETTINGS_FACTORY_ARGS_ON, factoryArgsOn);\n}\n\n/**\n * BeanDefinition get bean init method name.\n *\n * @return  {String} bean init method name\n * @api public\n */\nBeanDefinition.prototype.getInitMethodName = function() {\n\tif (this.initMethodName) {\n\t\treturn this.initMethodName;\n\t} else {\n\t\tif (this.parentBean) {\n\t\t\treturn this.parentBean.initMethodName;\n\t\t}\n\t}\n}\n\n/**\n * BeanDefinition set bean init method name.\n *\n * @param  {String} initMethodName bean init method name\n * @api public\n */\nBeanDefinition.prototype.setInitMethodName = function(initMethodName) {\n\tif (!initMethodName) {\n\t\treturn;\n\t}\n\tthis.initMethodName = initMethodName;\n}\n\n/**\n * BeanDefinition get bean destroy method name.\n *\n * @return  {String} bean destroy method name\n * @api public\n */\nBeanDefinition.prototype.getDestroyMethodName = function() {\n\tif (this.destroyMethodName) {\n\t\treturn this.destroyMethodName;\n\t} else {\n\t\tif (this.parentBean) {\n\t\t\treturn this.parentBean.destroyMethodName;\n\t\t}\n\t}\n}\n\n/**\n * BeanDefinition set bean destroy method name.\n *\n * @param  {String} destroyMethodName bean destroy method name\n * @api public\n */\nBeanDefinition.prototype.setDestroyMethodName = function(destroyMethodName) {\n\tif (!destroyMethodName) {\n\t\treturn;\n\t}\n\tthis.destroyMethodName = destroyMethodName;\n}\n\n/**\n * BeanDefinition get bean constructor function.\n *\n * @return  {Function} bean constructor function\n * @api public\n */\nBeanDefinition.prototype.getFunc = function() {\n\treturn this.func;\n}\n\n/**\n * BeanDefinition set bean constructor function.\n *\n * @param  {Function} func bean constructor function\n * @api public\n */\nBeanDefinition.prototype.setFunc = function(func) {\n\tif (!this.func) {\n\t\tthis.func = func;\n\t}\n}\n\n/**\n * BeanDefinition get bean order.\n *\n * @return  {Number} bean order\n * @api public\n */\nBeanDefinition.prototype.getOrder = function() {\n\tif (this.order || this.order == 0) {\n\t\treturn this.order;\n\t} else {\n\t\tif (this.parentBean) {\n\t\t\treturn this.parentBean.order;\n\t\t}\n\t}\n}\n\n/**\n * BeanDefinition set bean order.\n *\n * @param  {Number} order bean order\n * @api public\n */\nBeanDefinition.prototype.setOrder = function(order) {\n\tif (Utils.isNotNull(order)) {\n\t\tthis.order = order;\n\t}\n}\n\n/**\n * BeanDefinition check bean whether is singleton or not.\n *\n * @return  {Boolean} true|false\n * @api public\n */\nBeanDefinition.prototype.isSingleton = function() {\n\treturn this.scope === Constant.SCOPE_SINGLETON;\n}\n\n/**\n * BeanDefinition check bean whether is prototype or not.\n *\n * @return  {Boolean} true|false\n * @api public\n */\nBeanDefinition.prototype.isPrototype = function() {\n\treturn this.scope === Constant.SCOPE_PROTOTYPE;\n}\n\n/**\n * BeanDefinition check bean whether has factoryBean or not.\n *\n * @return  {Boolean} true|false\n * @api public\n */\nBeanDefinition.prototype.hasFactoryBean = function() {\n\treturn Utils.isNotNull(this.factoryBeanName) && Utils.isNotNull(this.factoryMethodName);\n}\n\n/**\n * BeanDefinition check bean whether has initMethod or not.\n *\n * @return  {Boolean} true|false\n * @api public\n */\nBeanDefinition.prototype.hasInitMethod = function() {\n\treturn Utils.isNotNull(this.initMethodName);\n}\n\n/**\n * BeanDefinition check bean whether has parent or not.\n *\n * @return  {Boolean} true|false\n * @api public\n */\nBeanDefinition.prototype.hasParent = function() {\n\treturn Utils.isNotNull(this.parentName);\n}\n\n/**\n * BeanDefinition update settings.\n *\n * @param  {Object} beanDefinition\n * @param  {String} key key: propsOn, argsOn, factoryArgsOn\n * @param  {Array}  settingsOn settings\n * @api private\n */\nBeanDefinition.prototype.updateSettingsOn = function(BeanDefinition, key, settingsOn) {\n\tvar settings = BeanDefinition[key];\n\n\tvar settingsMap = BeanUtils.getBeanSettingsMap(settings);\n\tvar settingsOnMap = BeanUtils.getBeanSettingsMap(settingsOn);\n\n\tfor (var name in settingsOnMap) {\n\t\tif (!settingsMap[name]) {\n\t\t\tsettingsMap[name] = settingsOnMap[name];\n\t\t}\n\t}\n\n\tBeanDefinition[key] = BeanUtils.getBeanSettingsArray(settingsMap);\n}\n\nmodule.exports = BeanDefinition;","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/util/beanUtil.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat BeanUtils\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>\n * MIT Licensed\n */\n\nvar BeanWrapper = require('../beans/support/beanWrapper');\nvar Utils = require('./utils');\n\nvar BeanUtils = {};\n\n/**\n * BeanUtil build beanWrapper from meta settings.\n *\n * @param    {Array}  list meta settings\n * @return   {Array}  beanWrappers\n * @api public\n */\nBeanUtils.buildBeanWrapper = function(list) {\n\tvar r = [];\n\n\tif (!Utils.checkArray(list)) {\n\t\treturn r;\n\t}\n\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar w = list[i];\n\n\t\tvar bWrapper = new BeanWrapper();\n\t\tif (w.name) {\n\t\t\tbWrapper.setName(w.name);\n\t\t}\n\n\t\tif (w.type) {\n\t\t\tbWrapper.setType(w.type);\n\t\t}\n\n\t\tif (w.value) {\n\t\t\tbWrapper.setValue(w.value);\n\t\t}\n\n\t\tif (w.ref) {\n\t\t\tbWrapper.setRef(w.ref);\n\t\t}\n\n\t\tbWrapper.setRole();\n\n\t\tr.push(bWrapper);\n\t}\n\n\treturn r;\n}\n\n/**\n * BeanUtils getBeanSettingsMap.\n *\n * @param    {Array}   list beanWrappers\n * @return   {Object}  beanWrapper map\n * @api public\n */\nBeanUtils.getBeanSettingsMap = function(list) {\n\tvar r = {};\n\tif (!Utils.checkArray(list)) {\n\t\treturn r;\n\t}\n\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar w = list[i];\n\t\tvar name = w.getName();\n\t\tif (!name) {\n\t\t\tcontinue;\n\t\t}\n\t\tr[name] = w;\n\t}\n\n\treturn r;\n}\n\n/**\n * BeanUtils getBeanSettingsArray.\n *\n * @param   {Object}  map beanWrapper map\n * @return  {Array}   beanWrappers\n * @api public\n */\nBeanUtils.getBeanSettingsArray = function(map) {\n\tvar r = [];\n\n\tif (!Utils.isNotNull(map)) {\n\t\treturn r;\n\t}\n\n\tfor (var name in map) {\n\t\tr.push(map[name]);\n\t}\n\n\treturn r;\n}\n\n/**\n * BeanUtils sortBeanDefinitions.\n *\n * @param    {Array}  beanDefinitions\n * @return   {Array}  beanFactory sorted beanDefinitions\n * @api public\n */\nBeanUtils.sortBeanDefinitions = function(beanDefinitions, beanFactory) {\n\tvar r = [];\n\n\tfor (var beanName in beanDefinitions) {\n\t\tvar beanDefinition = beanDefinitions[beanName];\n\n\t\tif (beanDefinition.isSingleton() && !beanDefinition.isLazyInit() && !beanDefinition.isAbstract()) {\n\t\t\tif (beanDefinition.hasParentBean()) {\n\t\t\t\tbeanDefinition = beanFactory.setParentBean(beanDefinition.getBeanName());\n\t\t\t}\n\n\t\t\tr.push(beanDefinition);\n\t\t}\n\t}\n\n\tr.sort(Utils.compareBeans);\n\n\treturn r;\n}\n\nmodule.exports = BeanUtils;","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/beans/support/beanWrapper.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat BeanWrapper\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>\n * MIT Licensed\n */\n\nvar logger = require('pomelo-logger').getLogger('bearcat', 'BeanWrapper');\n\nvar Constant = require('../../util/constant');\nvar Utils = require('../../util/utils');\n\n/**\n * BeanWrapper constructor function.\n *\n * @api public\n */\nvar BeanWrapper = function() {\n\tthis.name = null;\n\tthis.type = null;\n\tthis.value = null;\n\tthis.ref = null;\n\tthis.role = null; // DEPENDS_ARGS, DEPENDS_PROPS\n\tthis.bean = null; // bean dependency inject instance\n}\n\n/**\n * BeanWrapper get depend type.\n *\n * @return  {String} depend type\n * @api public\n */\nBeanWrapper.prototype.getDependType = function() {\n\treturn this.role;\n}\n\n/**\n * BeanWrapper get name.\n *\n * @return  {String} name\n * @api public\n */\nBeanWrapper.prototype.getName = function() {\n\treturn this.name;\n}\n\n/**\n * BeanWrapper set name.\n *\n * @param  {String} name\n * @api public\n */\nBeanWrapper.prototype.setName = function(name) {\n\tthis.name = name;\n}\n\n/**\n * BeanWrapper get type.\n *\n * @return  {String} type\n * @api public\n */\nBeanWrapper.prototype.getType = function() {\n\treturn this.type;\n}\n\n/**\n * BeanWrapper set type.\n *\n * @param  {String} type\n * @api public\n */\nBeanWrapper.prototype.setType = function(type) {\n\tthis.type = type;\n}\n\n/**\n * BeanWrapper get value.\n *\n * @return  {String} value\n * @api public\n */\nBeanWrapper.prototype.getValue = function() {\n\treturn this.value;\n}\n\n/**\n * BeanWrapper set value.\n *\n * @param  {String} value\n * @api public\n */\nBeanWrapper.prototype.setValue = function(value) {\n\tthis.value = value;\n}\n\n/**\n * BeanWrapper get value once.\n *\n * prototype bean may share DEPEND_TYPE_VAR value\n *\n * @return  {String} value\n * @api public\n */\nBeanWrapper.prototype.getValueOnce = function() {\n\tvar value = this.value;\n\tthis.value = null;\n\treturn value;\n}\n\n/**\n * BeanWrapper get ref bean.\n *\n * @return  {String} ref bean\n * @api public\n */\nBeanWrapper.prototype.getRef = function() {\n\treturn this.ref;\n}\n\n/**\n * BeanWrapper set ref bean.\n *\n * @param  {String} ref reference bean\n * @api public\n */\nBeanWrapper.prototype.setRef = function(ref) {\n\tthis.ref = ref;\n}\n\n/**\n * BeanWrapper get role.\n *\n * @return  {String} role\n * @api public\n */\nBeanWrapper.prototype.getRole = function() {\n\treturn this.role;\n}\n\n/**\n * BeanWrapper set role.\n *\n * @api public\n */\nBeanWrapper.prototype.setRole = function() {\n\tvar role = Constant.DEPEND_TYPE_ERROR;\n\n\tif (!this.name) {\n\t\trole = Constant.DEPEND_TYPE_ERROR;\n\t}\n\n\tif (this.ref) {\n\t\trole = Constant.DEPEND_TYPE_BEAN;\n\t}\n\n\tif (this.value) {\n\t\trole = Constant.DEPEND_TYPE_VALUE;\n\t}\n\n\tif (this.type) {\n\t\tif (Utils.checkType(this.type)) {\n\t\t\trole = Constant.DEPEND_TYPE_VAR;\n\t\t}\n\t}\n\n\tthis.role = role;\n}\n\n/**\n * BeanWrapper get bean.\n *\n * @return  {Object} bean\n * @api public\n */\nBeanWrapper.prototype.getBean = function() {\n\treturn this.bean;\n}\n\n/**\n * BeanWrapper set bean.\n *\n * @param  {Object} bean\n * @api public\n */\nBeanWrapper.prototype.setBean = function(bean) {\n\tthis.bean = bean;\n}\n\nmodule.exports = BeanWrapper;","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/util/validatorUtil.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat ValidatorUtil\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>\n * MIT Licensed\n */\n\nvar Constant = require('./constant');\nvar Utils = require('./utils');\nvar ValidatorUtil = {};\n\n/**\n * ValidatorUtil validate metaObject.\n *\n * @param    {Object}   \t   metaObject\n * @return   {Boolean|Error}  true|error object\n * @api public\n */\nValidatorUtil.metaValidator = function(metaObject) {\n\tvar id = metaObject.id;\n\tvar mid = metaObject.mid;\n\tvar cid = metaObject.cid;\n\n\tif (!id && !mid && !cid)\n\t\treturn new Error('one of id, mid, cid must be exist');\n\n\tif (Utils.isNotNull(id) && !Utils.checkString(id))\n\t\treturn new Error('id must be String');\n\n\tif (Utils.isNotNull(mid) && !Utils.checkString(mid))\n\t\treturn new Error('mid must be String');\n\n\tif (Utils.isNotNull(cid) && !Utils.checkString(cid))\n\t\treturn new Error('cid must be String');\n\n\tvar func = metaObject.func;\n\tif (!Utils.isNotNull(func) || !Utils.checkFunction(func))\n\t\treturn new Error('func must be Function');\n\n\tvar table = metaObject.table;\n\tif (Utils.isNotNull(table) && !Utils.checkString(table)) {\n\t\treturn new Error('table must be String');\n\t}\n\n\tvar message = metaObject.message;\n\tif (Utils.isNotNull(message) && !Utils.checkString(message)) {\n\t\treturn new Error('message must be String');\n\t}\n\n\tvar constraint = metaObject.constraint;\n\tif (Utils.isNotNull(constraint) && !Utils.checkString(constraint)) {\n\t\treturn new Error('constraint must be String');\n\t}\n\n\tvar order = metaObject.order;\n\tif (Utils.isNotNull(order) && !Utils.checkNumber(order))\n\t\treturn new Error('order must be Number');\n\n\tvar parentName = metaObject.parent;\n\tif (Utils.isNotNull(parentName) && !Utils.checkString(parentName))\n\t\treturn new Error('parent must be String');\n\n\tvar initMethodName = metaObject.init;\n\tif (Utils.isNotNull(initMethodName) && !Utils.checkString(initMethodName))\n\t\treturn new Error('init must be String');\n\n\tvar destroyMethodName = metaObject.destroy;\n\tif (Utils.isNotNull(destroyMethodName) && !Utils.checkString(destroyMethodName))\n\t\treturn new Error('destroy must be String');\n\n\tvar factoryBeanName = metaObject.factoryBean;\n\tif (Utils.isNotNull(factoryBeanName) && !Utils.checkString(factoryBeanName))\n\t\treturn new Error('factoryBean must be String');\n\n\tvar factoryMethodName = metaObject.factoryMethod;\n\tif (Utils.isNotNull(factoryMethodName) && !Utils.checkString(factoryMethodName))\n\t\treturn new Error('factoryMethodName must be String');\n\n\tvar scope = metaObject.scope || Constant.SCOPE_DEFAULT;\n\tif (scope && scope !== Constant.SCOPE_SINGLETON && scope !== Constant.SCOPE_PROTOTYPE)\n\t\treturn new Error('scope must be singleton or prototype');\n\n\tvar asyncInit = metaObject.async || Constant.ASYNC_INIT_DEFAULT;\n\tif (Utils.isNotNull(asyncInit) && !Utils.checkBoolean(asyncInit))\n\t\treturn new Error('async must be Boolean');\n\n\tvar lazyInit = metaObject.lazy || Constant.LAZY_INIT_DEFAULT;\n\tif (Utils.isNotNull(lazyInit) && !Utils.checkBoolean(lazyInit))\n\t\treturn new Error('lazy must be Boolean');\n\n\treturn true;\n}\n\nmodule.exports = ValidatorUtil;","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/model/modelFilter.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat ModelFilter\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>\n * MIT Licensed\n */\n\nvar logger = require('pomelo-logger').getLogger('bearcat', 'ModelFilter');\nvar Utils = require('../util/utils');\n\n/**\n * ModelFilter constructor function.\n *\n * @api public\n */\nvar ModelFilter = function() {\n\tthis.modelBean = null;\n\tthis.modelDefinition = null;\n}\n\n/**\n * ModelFilter set model object ref.\n *\n * @param   {Object} model object ref\n * @api public\n */\nModelFilter.prototype.setModel = function(modelBean) {\n\tthis.modelBean = modelBean;\n}\n\n/**\n * ModelFilter get model object ref.\n *\n * @return   {Object} model object ref\n * @api public\n */\nModelFilter.prototype.getModel = function() {\n\treturn this.modelBean;\n}\n\n/**\n * ModelFilter set model definition.\n *\n * @param   {Object} model definition\n * @api public\n */\nModelFilter.prototype.setModelDefinition = function(modelDefinition) {\n\tthis.modelDefinition = modelDefinition;\n}\n\n/**\n * ModelFilter get model definition.\n *\n * @return   {Object} model definition\n * @api public\n */\nModelFilter.prototype.getModelDefinition = function() {\n\treturn this.modelDefinition;\n}\n\n/**\n * ModelFilter model filter key/value attribute.\n *\n * @param   {String} model attribute key\n * @param   {String} model attribute value\n * @api public\n */\nModelFilter.prototype.filter = function(key, value) {\n\tif (Utils.checkString(key)) {\n\t\treturn this.doFilterKey(key, value);\n\t}\n\n\treturn this.doFilterKeys();\n}\n\n/**\n * ModelFilter do model filter key/value attribute.\n *\n * @param   {String} \t\tmodel attribute key\n * @param   {String} \t\tmodel attribute value\n *\n * @return  {Boolean|Error} true|false|Error\n * @api private\n */\nModelFilter.prototype.doFilterKey = function(key, value) {\n\tvar field = this.modelDefinition.getField(key);\n\tif (field) {\n\t\treturn field.filter(value);\n\t}\n}\n\n/**\n * ModelFilter do model filter key/value attributes.\n *\n * @param   {String} \tmodel attribute key\n * @param   {String} \tmodel attribute value\n *\n * @return  {Error} \tError\n * @api private\n */\nModelFilter.prototype.doFilterKeys = function() {\n\tvar fields = this.modelDefinition.getFields();\n\n\tfor (var key in fields) {\n\t\tvar field = fields[key];\n\t\tvar value = this.modelBean[key];\n\t\tvar r = field.filter(value);\n\t\tif (Utils.checkModelFilterError(r)) {\n\t\t\treturn r;\n\t\t}\n\t}\n\n\treturn;\n}\n\nmodule.exports = ModelFilter;","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/model/modelProxy.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat ModelProxy\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>\n * MIT Licensed\n */\n\nvar logger = require('pomelo-logger').getLogger('bearcat', 'ModelProxy');\nvar Constant = require('../util/constant');\nvar Utils = require('../util/utils');\n\n/**\n * ModelProxy constructor function.\n *\n * @api public\n */\nvar ModelProxy = function() {\n\tthis.model = null;\n\tthis.modelFilter = null;\n\tthis.beanFactory = null;\n\tthis.beanDefinition = null;\n\tthis.modelDefinition = null;\n\tthis.beforeNames = [];\n\tthis.afterNames = [];\n\tthis.beforeName = null;\n\tthis.afterName = null;\n\tthis.beforeFlag = false;\n\tthis.afterFlag = false;\n}\n\n/**\n * ModelProxy set key/value to model.\n *\n * @param  {String} \tkey\n * @param  {Object} \tvalue\n * @return {Object} \tError object when set value failed\n * @api public\n */\nModelProxy.prototype.$set = function(key, value) {\n\tvar model = this.model;\n\tthis['beforeFlag'] = true; // setup before flag, enable builtin constaints by default\n\tvar befores = this._getFilters(Constant.MODEL_FILTER_BEFORE);\n\n\t// do model before filters\n\tvar r = this._doFilters(befores, key, value);\n\n\tif (Utils.checkModelFilterError(r)) {\n\t\treturn this._result(r);\n\t}\n\n\t//  setup value\n\tmodel[key] = value;\n\n\tvar afters = this._getFilters(Constant.MODEL_FILTER_AFTER);\n\n\t// do model after filters\n\tr = this._doFilters(afters, key, value);\n\n\tif (Utils.checkModelFilterError(r)) {\n\t\treturn this._result(r);\n\t}\n\n\treturn this._result(r);\n}\n\n/**\n * ModelProxy get data from model.\n *\n * @param  {String} key\n * @return {Object} data value\n * @api public\n */\nModelProxy.prototype.$get = function(key) {\n\treturn this.model[key];\n}\n\n/**\n * ModelProxy pack data object to model.\n *\n * @param  {Object} \tdata\n * @return {Object} \tError object when pack data failed\n * @api public\n */\nModelProxy.prototype.$pack = function(data) {\n\tif (!Utils.checkObject(data)) {\n\t\treturn new Error('pack data must be Object');\n\t}\n\n\tvar model = this.model;\n\n\tfor (var key in data) {\n\t\tvar value = data[key];\n\t\tmodel[key] = value;\n\t}\n\n\tthis['afterFlag'] = true;\n\n\t// $pack only have after filters\n\tvar afters = this._getFilters(Constant.MODEL_FILTER_AFTER);\n\n\t// do model after filters\n\tvar r = this._doFilters(afters);\n\n\tif (Utils.checkModelFilterError(r)) {\n\t\treturn this._result(r);\n\t}\n\n\treturn this._result(r);\n}\n\n/**\n * ModelProxy pack db ResultSet data to model.\n *\n * @param  {Object} resultSet data\n * @return {Object|Boolean} Error|true\n * @api public\n */\nModelProxy.prototype.$packResultSet = function(resultSet) {\n\tif (!Utils.checkObject(resultSet)) {\n\t\treturn new Error('resultSet must be Object');\n\t}\n\n\tvar beanFactory = this.beanFactory;\n\tvar resultModelId = this.modelDefinition.getMid();\n\tvar resultModel = this;\n\n\tif (!resultModel) {\n\t\tlogger.error('packResultSet error no such result model %s', resultModelId);\n\t\treturn;\n\t}\n\n\tvar modelKeyMap = this.modelDefinition.getModelKeyMap();\n\n\tvar dataResult = resultSet;\n\n\tvar modelResultMap = {};\n\tfor (var dataKey in dataResult) {\n\t\tvar dataValue = dataResult[dataKey];\n\t\tif (Utils.checkFunction(dataValue)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tvar modelMap = modelKeyMap[dataKey];\n\t\tif (!modelMap) {\n\t\t\tlogger.warn('packResultSet resultSet key %s does not match any model attribute', dataKey);\n\t\t\tcontinue;\n\t\t}\n\n\t\tvar modelId = modelMap['id'];\n\t\tvar fieldName = modelMap['fieldName'];\n\t\tvar fieldType = modelMap['type'];\n\t\tvar pid = modelMap['pid'] || modelId;\n\t\tvar pfield = modelMap['pfield'] || fieldName;\n\t\tvar ptype = modelMap['ptype'];\n\n\t\tvar model;\n\t\tif (Utils.checkTypeArray(ptype) || Utils.checkTypeObject(ptype)) {\n\t\t\tvar modelResultMapKey = pid + \"_\" + pfield;\n\t\t\tmodel = modelResultMap[modelResultMapKey];\n\t\t\tif (!model) {\n\t\t\t\tmodel = beanFactory.getModelProxy(modelId);\n\t\t\t\tmodelResultMap[modelResultMapKey] = model; // ref model object\n\t\t\t}\n\t\t} else {\n\t\t\tmodel = this;\n\t\t}\n\n\t\tvar r = model.$before().$set(fieldName, dataValue); // set data, do filter\n\t\tif (Utils.checkModelFilterError(r)) {\n\t\t\treturn r;\n\t\t}\n\t}\n\n\tthis._doPackResultSet(resultModel, modelResultMap);\n}\n\n/**\n * ModelProxy set before filter to model.\n * filter can be String which is the name of the filter method in the model\n * or can be Array which contains the filter methods in order\n *\n * @param  {String|Array} before filter\n * @api public\n */\nModelProxy.prototype.$before = function(before) {\n\treturn this._filter(Constant.MODEL_FILTER_BEFORE, before);\n}\n\n/**\n * ModelProxy set after filter to model.\n * filter can be String which is the name of the filter method in the model\n * or can be Array which contains the filter methods in order\n *\n * @param  {String|Array} after filter\n * @api public\n */\nModelProxy.prototype.$after = function(after) {\n\treturn this._filter(Constant.MODEL_FILTER_AFTER, after);\n}\n\nModelProxy.prototype.$clone = function() {\n\n}\n\n/**\n * ModelProxy  model proxy init.\n *\n * @api private\n */\nModelProxy.prototype._modelInit = function() {\n\tvar beanDefinition = this.beanDefinition;\n\tif (!beanDefinition) {\n\t\tlogger.error('init error no beanDefinition.');\n\t\treturn;\n\t}\n\n\tvar self = this;\n\n\tvar func = beanDefinition.getFunc();\n\n\tif (Utils.checkFunction(func)) {\n\t\tvar proto = func.prototype;\n\t\tfor (interface in proto) {\n\t\t\tif (Utils.checkFunction(proto[interface])) {\n\t\t\t\t(function(method) {\n\t\t\t\t\tif (checkFuncName(method)) {\n\t\t\t\t\t\tlogger.error('init error proxy method interface %j the same as ModelProxy, rename this name to another.', method)\n\t\t\t\t\t\treturn;\n\t\t\t\t\t};\n\n\t\t\t\t\tself[method] = function() {\n\t\t\t\t\t\treturn self._modelInvoke(method, arguments);\n\t\t\t\t\t};\n\t\t\t\t})(interface);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * ModelProxy model proxy invoke methods.\n *\n * @param  {String} invoke method name\n * @param  {Array}  invoke arguments\n * @return {Object} invoke result\n * @api private\n */\nModelProxy.prototype._modelInvoke = function(method, args) {\n\tvar targetModel = this.model;\n\tif (Utils.checkFunction(targetModel[method])) {\n\t\treturn targetModel[method].apply(targetModel, args);\n\t} else {\n\t\tlogger.error('invoke error with %s %j', method, args);\n\t}\n}\n\n/**\n * ModelProxy do pack db ResultSet data to model.\n *\n * @param  {Object} resultSet data\n * @return {Object|Boolean} Error|true\n * @api private\n */\nModelProxy.prototype._doPackResultSet = function(resultModel, modelResultMap) {\n\tvar resultModelFields = resultModel.modelDefinition.getFields();\n\tvar resultModelId = resultModel.modelDefinition.getMid();\n\tvar beanFactory = this.beanFactory;\n\n\tfor (var resultFieldKey in resultModelFields) {\n\t\tvar resultField = resultModelFields[resultFieldKey];\n\t\tvar resultFieldRef = resultField.getRef();\n\t\tvar resultFieldType = resultField.getType();\n\t\tvar key = resultModelId + \"_\" + resultFieldKey;\n\t\tvar value = modelResultMap[key];\n\n\t\tif (!Utils.isNotNull(value) && resultFieldRef) {\n\t\t\tvar refModel = beanFactory.getModelProxy(resultFieldRef);\n\t\t\tif (refModel) {\n\t\t\t\tthis._doPackResultSet(refModel, modelResultMap);\n\t\t\t\tvalue = refModel;\n\t\t\t}\n\t\t}\n\n\t\tif (!Utils.isNotNull(value)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tvar oneToMany = false;\n\t\tif (Utils.checkTypeArray(resultFieldType)) {\n\t\t\toneToMany = true;\n\t\t}\n\n\t\tif (oneToMany) {\n\t\t\tvar resultFieldValue = resultModel.$get(resultFieldKey);\n\t\t\tif (!Utils.checkArray(resultFieldValue)) {\n\t\t\t\tresultFieldValue = [];\n\t\t\t}\n\n\t\t\tresultFieldValue.push(value);\n\t\t\tresultModel['model'][resultFieldKey] = resultFieldValue;\n\t\t\tcontinue;\n\t\t}\n\n\t\tresultModel.$set(resultFieldKey, value);\n\t}\n}\n\n/**\n * ModelProxy do set filter to model.\n *\n * @param  {String}       filter type\n * @param  {String|Array} filter\n * @api private\n */\nModelProxy.prototype._filter = function(type, filter) {\n\tif (type !== Constant.MODEL_FILTER_BEFORE && type !== Constant.MODEL_FILTER_AFTER) {\n\t\tlogger.warn('unknow model filter type %s', type);\n\t\treturn this;\n\t}\n\n\tthis[type + 'Flag'] = true;\n\n\tif (Utils.checkString(filter)) {\n\t\tthis[type + 'Name'] = filter;\n\t}\n\n\tif (Utils.checkArray(filter)) {\n\t\tthis[type + 'Names'] = filter;\n\t}\n\n\treturn this;\n}\n\n/**\n * ModelProxy get filters by type.\n *\n * @param  {String} filter type\n * @param  {Array} \tfilters\n * @api private\n */\nModelProxy.prototype._getFilters = function(type) {\n\tif (type !== Constant.MODEL_FILTER_BEFORE && type !== Constant.MODEL_FILTER_AFTER) {\n\t\treturn;\n\t}\n\n\tvar filters = [];\n\n\t// before filter\n\t// before + after filter only do the builtin filter once\n\tif (type === Constant.MODEL_FILTER_BEFORE ||\n\t\t(type === Constant.MODEL_FILTER_AFTER && !this.beforeFlag)) {\n\t\tif (this[type + 'Flag']) {\n\t\t\tfilters.push({\n\t\t\t\ttype: Constant.FILTER_BUILTIN,\n\t\t\t\tmethod: Constant.FILTER_BUILTIN_METHOD // \"filter\"\n\t\t\t});\n\t\t}\n\t}\n\n\tvar filterName = this[type + 'Name'];\n\tif (filterName) {\n\t\tvar filterArray = this._modelInvoke(filterName);\n\t\tif (Utils.checkArray(filterArray)) {\n\t\t\tfor (var i = 0; i < filterArray.length; i++) {\n\t\t\t\tfilters.push({\n\t\t\t\t\ttype: Constant.FILTER_MODEL,\n\t\t\t\t\tmethod: filterArray[i]\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tvar filterNames = this[type + 'Names'];\n\tfor (var j = 0; j < filterNames.length; j++) {\n\t\tfilters.push({\n\t\t\ttype: Constant.FILTER_MODEL,\n\t\t\tmethod: filterNames[j]\n\t\t});\n\t}\n\n\treturn filters;\n}\n\n/**\n * ModelProxy do filters with key value.\n *\n * @param  {Array}  filters\n * @param  {String} key\n * @param  {Object} value\n * @return {Error}  Error object\n * @api private\n */\nModelProxy.prototype._doFilters = function(filters, key, value) {\n\tif (!filters || !filters.length) {\n\t\treturn;\n\t}\n\n\tvar r;\n\tfor (var i = 0; i < filters.length; i++) {\n\t\tvar filter = filters[i];\n\t\tvar type = filter['type'];\n\t\tvar method = filter['method'];\n\t\tif (type === Constant.FILTER_BUILTIN) {\n\t\t\tr = this.modelFilter[method](key, value);\n\t\t\tif (Utils.checkModelFilterError(r)) {\n\t\t\t\treturn r;\n\t\t\t}\n\t\t}\n\n\t\tif (type === Constant.FILTER_MODEL) {\n\t\t\tvar args = [];\n\t\t\tif (Utils.isNotNull(key)) args.push(key);\n\t\t\tif (Utils.isNotNull(value)) args.push(value);\n\t\t\tr = this._modelInvoke(method, args); // just call the filter method\n\t\t\tif (Utils.checkModelFilterError(r)) {\n\t\t\t\treturn r;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn;\n}\n\n/**\n * ModelProxy reset result.\n *\n * @param  {Object}  result\n * @return {Object}  result\n * @api private\n */\nModelProxy.prototype._result = function(r) {\n\tthis._reset(Constant.MODEL_FILTER_BEFORE);\n\tthis._reset(Constant.MODEL_FILTER_AFTER);\n\n\treturn r;\n}\n\n/**\n * ModelProxy reset filter.\n *\n * @param  {String}  filter type\n * @api private\n */\nModelProxy.prototype._reset = function(type) {\n\tif (type !== Constant.MODEL_FILTER_BEFORE && type !== Constant.MODEL_FILTER_AFTER) {\n\t\treturn;\n\t}\n\n\tthis[type + 'Flag'] = false;\n\tthis[type + 'Name'] = null;\n\tthis[type + 'Names'] = [];\n}\n\n/**\n * ModelProxy toJSON.\n *\n * @api public\n */\nModelProxy.prototype.toJSON = function() {\n\treturn this.model;\n}\n\nvar names = [\"_modelInit\", \"_modelInvoke\", \"$set\", \"$pack\", \"$packResultSet\",\n\t\"_doPackResultSet\", \"$get\", \"$before\", \"$after\", \"_filter\", \"$clone\",\n\t\"_getFilters\", \"_doFilters\", \"_result\", \"_reset\", \"toJSON\"\n];\n\nvar checkFuncName = function(name) {\n\tfor (var i = 0; i < names.length; i++) {\n\t\tif (name === names[i]) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\nmodule.exports = ModelProxy;","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/util/modelUtil.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat ModelUtils\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>\n * MIT Licensed\n */\n\nvar ModelAttribute = require('../model/modelAttribute');\nvar Constant = require('./constant');\nvar Utils = require('./utils');\nvar ModelUtil = {};\n\n/**\n * ModelUtil build model attribute.\n *\n * @param   {Array}  model meta attributes.\n * @param   {Object} beanFactory.\n * @return  {Object} modelAttributes.\n * @api public\n */\nModelUtil.buildModelAttribute = function(attributes, beanFactory) {\n\tif (!Utils.checkArray(attributes)) {\n\t\treturn {};\n\t}\n\n\tvar r = {};\n\tvar fields = {};\n\tvar refFields = [];\n\tvar oneToMany = false;\n\tvar balance = \"\";\n\tfor (var i = 0; i < attributes.length; i++) {\n\t\tvar attribute = attributes[i];\n\t\tvar name = attribute['name'];\n\t\tvar value = attribute['value'];\n\n\t\tvar modelAttribute = new ModelAttribute();\n\t\tmodelAttribute.setName(name);\n\t\tmodelAttribute.setExpression(value);\n\t\tmodelAttribute.parse(value, beanFactory);\n\n\t\tfields[name] = modelAttribute;\n\n\t\tif (modelAttribute.getRef()) {\n\t\t\trefFields.push(name);\n\t\t}\n\n\t\tvar type = modelAttribute.getType();\n\t\tif (Utils.checkTypeArray(type)) {\n\t\t\toneToMany = true;\n\t\t}\n\n\t\tif (modelAttribute.isBalance()) {\n\t\t\tbalance = name;\n\t\t}\n\t}\n\n\treturn {\n\t\tfields: fields,\n\t\tbalance: balance,\n\t\trefFields: refFields,\n\t\toneToMany: oneToMany\n\t};\n}\n\nmodule.exports = ModelUtil;","/home/travis/build/npmtest/node-npmtest-bearcat/bearcat/lib/model/modelAttribute.js":"/*!\n * .______    _______     ___      .______       ______     ___   .__________.\n * (   _  )  (   ____)   /   \\     (   _  )     (      )   /   \\  (          )\n * |  |_)  ) |  |__     /  ^  \\    |  |_)  )   |  ,----'  /  ^  \\ `---|  |---`\n * |   _  <  |   __)   /  /_\\  \\   |      )    |  |      /  /_\\  \\    |  |\n * |  |_)  ) |  |____ /  _____  \\  |  |)  ----.|  `----./  _____  \\   |  |\n * (______)  (_______/__/     \\__\\ ( _| `.____) (______)__/     \\__\\  |__|\n *\n * Bearcat ModelAttribute\n * Copyright(c) 2015 fantasyni <fantasyni@163.com>\n * MIT Licensed\n */\n\nvar Constant = require('../util/constant');\nvar Utils = require('../util/utils');\nvar Util = require('util');\n\n/**\n * ModelAttribute constructor function.\n *\n * @api public\n */\nvar ModelAttribute = function() {\n\tthis.ref = null;\n\tthis.name = null;\n\tthis.type = null;\n\tthis.prefix = null;\n\tthis.default = null;\n\tthis.primary = false;\n\tthis.balance = false;\n\tthis.constraints = [];\n\tthis.expression = null;\n}\n\n/**\n * ModelAttribute do filter attribute value.\n *\n * @param   {String} \tattribute value\n * @return  {Error}  \tError\n * @api public\n */\nModelAttribute.prototype.filter = function(value) {\n\tif (!Utils.isNotNull(value)) {\n\t\treturn;\n\t}\n\n\tvar r = this.filterType(value);\n\tif (Utils.checkModelFilterError(r)) {\n\t\treturn r;\n\t}\n\n\tvar key = this.name;\n\tvar constraints = this.constraints;\n\tvar constraintMethod = Constant.CONSTRAINT_METHOD;\n\n\tfor (var i = 0; i < constraints.length; i++) {\n\t\tvar constraint = constraints[i];\n\t\tif (constraint && Utils.checkFunction(constraint[constraintMethod])) {\n\t\t\tr = constraint[constraintMethod](key, value);\n\t\t\tif (Utils.checkModelFilterError(r)) {\n\t\t\t\treturn r;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn;\n}\n\n/**\n * ModelAttribute do filter attribute value type.\n *\n * @param   {String} \tattribute value\n * @return  {Error} \tError\n * @api private\n */\nModelAttribute.prototype.filterType = function(value) {\n\tvar type = this.type;\n\tif (!Utils.checkString(type)) {\n\t\treturn;\n\t}\n\n\tvar Type = type;\n\n\tvar isType = Utils.isType(Type);\n\n\tvar r = isType(value);\n\n\tif (r !== true) {\n\t\tvar message = 'field: %s with value: %s error, type not matched with %s';\n\t\treturn new Error(Util.format(message, this.name, value, Type));\n\t}\n\n\treturn;\n}\n\n/**\n * ModelAttribute do parse attribute expression.\n *\n * @param   {String} attribute expression\n * @param   {Object} bean factory\n * @api private\n */\nModelAttribute.prototype.parse = function(expression, beanFactory) {\n\tif (!expression) {\n\t\treturn;\n\t}\n\n\texpression = expression.replace(/\\s/g, \"\");\n\n\tvar f = expression[0];\n\tif (f !== Constant.CONSTRAINT_ANNOTATION) {\n\t\treturn;\n\t}\n\n\texpression = expression.substr(1);\n\n\tvar list = expression.split(Constant.CONSTRAINT_SPLIT); // split by ;\n\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar name = \"\";\n\t\tvar value = \"\";\n\t\tvar index = -1;\n\t\tvar props = [];\n\n\t\tvar item = list[i];\n\n\t\t// continue with \"\"\n\t\tif (!item) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// \"$primary;\"\n\t\tif (item === Constant.MODEL_ATTRIBUTE_PRIMARY) {\n\t\t\tthis[item] = true;\n\t\t\tcontinue;\n\t\t}\n\n\t\t// \"$balance;\"\n\t\tif (item === Constant.MODEL_ATTRIBUTE_BALANCE) {\n\t\t\tthis[item] = true;\n\t\t\tcontinue;\n\t\t}\n\n\t\tindex = item.indexOf(\":\");\n\t\t// \"$type:String;default:aaa\"\n\t\tif (index != -1) {\n\t\t\tvar p = item.split(\":\");\n\t\t\tname = p[0].toLowerCase();\n\n\t\t\tif (p.length >= 2) {\n\t\t\t\tvalue = p[1];\n\t\t\t\tif (this.checkProps(name)) {\n\t\t\t\t\tif (name === \"type\") {\n\t\t\t\t\t\tvalue = Utils.normalizeType(value);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis[name] = value;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// max:10\n\t\t\t\telse {\n\t\t\t\t\tprops.push({\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tvalue: value\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tindex = item.indexOf(\"(\");\n\n\t\tif (index != -1) {\n\t\t\tname = item.substr(0, index);\n\t\t\t// no prefix name\n\t\t\tif (!name) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar left = item.substr(index);\n\t\t\tvar len = left.length;\n\t\t\t// no this case\n\t\t\t// if (len < 1) {\n\t\t\t// \tcontinue;\n\t\t\t// }\n\t\t\tvar last = left[len - 1];\n\t\t\tif (last !== \")\") {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tleft = left.substr(1, len - 2);\n\t\t\tvar leftList = left.split(\",\");\n\n\t\t\tfor (var j = 0; j < leftList.length; j++) {\n\t\t\t\tvar leftProp = leftList[j].split(\"=\");\n\t\t\t\tvar leftPropLen = leftProp.length;\n\n\t\t\t\tif (leftPropLen < 2) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!leftProp[0] || !leftProp[1]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tprops.push({\n\t\t\t\t\tname: leftProp[0],\n\t\t\t\t\tvalue: leftProp[1]\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (!name) {\n\t\t\tname = item;\n\t\t}\n\n\t\tvar constraint = beanFactory.getConstraint(name);\n\t\tif (!constraint) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tvar constraintDefinition = beanFactory.getConstraintDefinition(name);\n\n\t\tvar constraintExpression = constraintDefinition.getConstraint();\n\t\tif (constraintExpression) {\n\t\t\tthis.parse(constraintExpression, beanFactory)\n\t\t}\n\n\t\tvar propsLen = props.length;\n\t\tif (propsLen) {\n\t\t\tfor (var k = 0; k < propsLen; k++) {\n\t\t\t\tvar prop = props[k];\n\t\t\t\tvar propName = prop['name'];\n\t\t\t\tvar propValue = prop['value'];\n\t\t\t\tconstraint[propName] = propValue;\n\t\t\t}\n\t\t}\n\n\t\tthis.addConstraints(constraint);\n\t}\n}\n\n/**\n * ModelAttribute set expression.\n *\n * @param   {String} expression\n * @api public\n */\nModelAttribute.prototype.setExpression = function(expression) {\n\tthis.expression = expression;\n}\n\n/**\n * ModelAttribute get expression.\n *\n * @return   {String} expression\n * @api public\n */\nModelAttribute.prototype.getExpression = function() {\n\treturn this.expression;\n}\n\n/**\n * ModelAttribute set ref.\n *\n * @param   {String} ref string.\n * @api public\n */\nModelAttribute.prototype.setRef = function(ref) {\n\tthis.ref = ref;\n}\n\n/**\n * ModelAttribute get ref.\n *\n * @return   {String} ref string.\n * @api public\n */\nModelAttribute.prototype.getRef = function() {\n\treturn this.ref;\n}\n\n/**\n * ModelAttribute set attribute name.\n *\n * @param   {String} attribute name.\n * @api public\n */\nModelAttribute.prototype.setName = function(name) {\n\tthis.name = name;\n}\n\n/**\n * ModelAttribute get attribute name.\n *\n * @return   {String} attribute name.\n * @api public\n */\nModelAttribute.prototype.getName = function() {\n\treturn this.name;\n}\n\n/**\n * ModelAttribute set attribute type.\n *\n * @param   {String} attribute type.\n * @api public\n */\nModelAttribute.prototype.setType = function(type) {\n\tthis.type = type;\n}\n\n/**\n * ModelAttribute get attribute type.\n *\n * @return   {String} attribute type.\n * @api public\n */\nModelAttribute.prototype.getType = function(type) {\n\treturn this.type;\n}\n\n/**\n * ModelAttribute set attribute primary.\n *\n * @param   {Boolean} if it is the attribute primary.\n * @api public\n */\nModelAttribute.prototype.setPrimary = function(primary) {\n\tthis.primary = primary;\n}\n\n/**\n * ModelAttribute get attribute primary.\n *\n * @return   {Boolean} attribute primary.\n * @api public\n */\nModelAttribute.prototype.getPrimary = function() {\n\treturn this.primary;\n}\n\n/**\n * ModelAttribute set attribute default value.\n *\n * @param   {String} attribute default value.\n * @api public\n */\nModelAttribute.prototype.setDefault = function(defaultValue) {\n\tthis.default = defaultValue;\n}\n\n/**\n * ModelAttribute get attribute default value.\n *\n * @return   {String} attribute default value.\n * @api public\n */\nModelAttribute.prototype.getDefault = function() {\n\treturn this.default;\n}\n\n/**\n * ModelAttribute set attribute prefix.\n *\n * @param   {String} attribute prefix.\n * @api public\n */\nModelAttribute.prototype.setPrefix = function(prefix) {\n\tthis.prefix = prefix;\n}\n\n/**\n * ModelAttribute get attribute prefix.\n *\n * @return   {String} attribute prefix.\n * @api public\n */\nModelAttribute.prototype.getPrefix = function() {\n\treturn this.prefix;\n}\n\n/**\n * ModelAttribute check if it is a primary attribute.\n *\n * @param   {Boolean} if it is a primary attribute.\n * @api public\n */\nModelAttribute.prototype.isPrimary = function() {\n\treturn this.primary;\n}\n\n/**\n * ModelAttribute check if it is a balance attribute.\n *\n * @param   {Boolean} if it is a balance attribute.\n * @api public\n */\nModelAttribute.prototype.isBalance = function() {\n\treturn this.balance;\n}\n\n/**\n * ModelAttribute add constraint.\n *\n * @param   {Object} constraint object.\n * @api public\n */\nModelAttribute.prototype.addConstraints = function(constraint) {\n\tthis.constraints.push(constraint);\n}\n\n/**\n * ModelAttribute check attribute properties.\n *\n * @param   {Boolean} check result.\n * @api private\n */\nModelAttribute.prototype.checkProps = function(key) {\n\tvar attributes = Constant.MODEL_ATTRIBUTES;\n\tfor (var i = 0; i < attributes.length; i++) {\n\t\tif (key === attributes[i]) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\nmodule.exports = ModelAttribute;"}